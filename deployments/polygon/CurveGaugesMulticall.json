{
  "address": "0xeea6c6834a4d39764D4aBDbcbfE7a7E81B7d531D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract GaugeFactory",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "getGaugesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveGaugesMulticall.GaugeInfo[]",
          "name": "gauges",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GaugeFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "gauges",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserGauges",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "poolShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableCrv",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "extraRewardTokens",
              "type": "address[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "extraRewardAmounts",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct CurveGaugesMulticall.UserGauge[]",
          "name": "userGauges",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7e4e17c812b00e1532a0d6bf5f959e1dc07ff80b103f6823ce10797c50d3f21",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xeea6c6834a4d39764D4aBDbcbfE7a7E81B7d531D",
    "transactionIndex": 40,
    "gasUsed": "1235837",
    "logsBloom": "0x
    "blockHash": "0x2fb6747c086786bebfdd719a0b70cf0229b7acd7b2bef4df997beab778f1f47d",
    "transactionHash": "0xd7e4e17c812b00e1532a0d6bf5f959e1dc07ff80b103f6823ce10797c50d3f21",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 30925195,
        "transactionHash": "0xd7e4e17c812b00e1532a0d6bf5f959e1dc07ff80b103f6823ce10797c50d3f21",
        "address": "0xeea6c6834a4d39764D4aBDbcbfE7a7E81B7d531D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x2fb6747c086786bebfdd719a0b70cf0229b7acd7b2bef4df997beab778f1f47d"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 30925195,
        "transactionHash": "0xd7e4e17c812b00e1532a0d6bf5f959e1dc07ff80b103f6823ce10797c50d3f21",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000119eb60ddee6bfc0000000000000000000000000000000000000000000000007ddd5e0b64201ff7000000000000000000000000000000000000000000014248d90180fc0dc82bfe0000000000000000000000000000000000000000000000007cc372aa8631b3fb000000000000000000000000000000000000000000014248da1b6c5cebb697fa",
        "logIndex": 137,
        "blockHash": "0x2fb6747c086786bebfdd719a0b70cf0229b7acd7b2bef4df997beab778f1f47d"
      }
    ],
    "blockNumber": 30925195,
    "cumulativeGasUsed": "7153032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4c7c4c9b199bf6544911e86ad5b9fd53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract GaugeFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getGaugesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveGaugesMulticall.GaugeInfo[]\",\"name\":\"gauges\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GaugeFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserGauges\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableCrv\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"extraRewardTokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"extraRewardAmounts\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct CurveGaugesMulticall.UserGauge[]\",\"name\":\"userGauges\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/CurveGaugesMulticall.sol\":\"CurveGaugesMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface Gauge is IERC20 {\\n    function integrate_fraction(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 index) external view returns (address);\\n\\n    function claimable_reward(address userAddress, address rewardToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6797431990ab8de5b869b48bc51cfc417173504a9b3944da11ae4459b58207cf\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/GaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface GaugeFactory {\\n    function minted(address userAddress, address gauge)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_gauge_count() external view returns (uint256);\\n\\n    function get_gauge(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8490711cde281fc1582a22a874cacc14e4a3078e7ce3a73cbf46e42cffad3051\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/LpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface LpToken is IERC20 {\\n    function minter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd6a491a5e721abeb6f3a0aa6cb6c232874499d7ac40d5d0328d20904dad2ea5e\",\"license\":\"GPL-3.0\"},\"contracts/multicall/CurveGaugesMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/curve/GaugeFactory.sol\\\";\\nimport \\\"../interfaces/curve/Gauge.sol\\\";\\nimport \\\"../interfaces/curve/LpToken.sol\\\";\\n\\ncontract CurveGaugesMulticall is Ownable {\\n    struct GaugeInfo {\\n        address gauge;\\n    }\\n\\n    struct UserGauge {\\n        address gauge;\\n        address lpToken;\\n        uint256 poolShare; // in wei.\\n        uint256 claimableCrv;\\n        address[2] extraRewardTokens;\\n        uint256[2] extraRewardAmounts;\\n    }\\n\\n    function getGaugesInfo(GaugeFactory factory)\\n        external\\n        view\\n        returns (GaugeInfo[] memory gauges)\\n    {\\n        uint256 count = factory.get_gauge_count();\\n\\n        gauges = new GaugeInfo[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            Gauge gauge = Gauge(factory.get_gauge(i));\\n\\n            gauges[i] = GaugeInfo(address(gauge));\\n        }\\n    }\\n\\n    function getUserGauges(\\n        GaugeFactory factory,\\n        address[] memory gauges,\\n        address userAddress\\n    ) external view returns (UserGauge[] memory userGauges) {\\n        userGauges = new UserGauge[](gauges.length);\\n\\n        for (uint256 i = 0; i < gauges.length; i++) {\\n            Gauge gauge = Gauge(gauges[i]);\\n\\n            uint256 userGaugeBalance = gauge.balanceOf(userAddress);\\n            if (userGaugeBalance == 0) {\\n                continue;\\n            }\\n\\n            // CRV Rewards\\n            uint256 minted = factory.minted(userAddress, address(gauge));\\n            uint256 totalMint = gauge.integrate_fraction(userAddress);\\n            uint256 claimableCrv = totalMint - minted;\\n\\n            // External Rewards\\n            uint256 rewardCount = min(gauge.reward_count(), 2);\\n            address[2] memory extraRewardTokens;\\n            uint256[2] memory extraRewardAmounts;\\n            for (uint256 j = 0; j < rewardCount; j++) {\\n                extraRewardTokens[j] = gauge.reward_tokens(j);\\n                extraRewardAmounts[j] = gauge.claimable_reward(\\n                    userAddress,\\n                    extraRewardTokens[j]\\n                );\\n            }\\n\\n            uint256 userGaugeShare = (userGaugeBalance * 10**18) /\\n                gauge.totalSupply();\\n\\n            LpToken lpToken = LpToken(gauge.lp_token());\\n            uint256 gaugeBalance = lpToken.balanceOf(address(gauge));\\n            uint256 gaugeShare = (gaugeBalance * 10**18) /\\n                lpToken.totalSupply();\\n\\n            userGauges[i] = UserGauge(\\n                address(gauge),\\n                address(lpToken),\\n                (userGaugeShare * gaugeShare) / 10**18,\\n                claimableCrv,\\n                extraRewardTokens,\\n                extraRewardAmounts\\n            );\\n        }\\n    }\\n\\n    // Shouldn't hold funds, just in case.\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x6ca664bbd326c75178ce2dccabf5ed9f1ad5be2c6cf4012aa5fea989d6425663\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361151090816100618239f35b600080fdfe6080604081815260048036101561001557600080fd5b600091823560e01c93846313284bd7146100b15750505050806324ae6a27146100a8578063362a64a31461009f578063715018a6146100965780637ae2b5c71461008d5780638da5cb5b146100845763f2fde38b14610077575b388080600080fd5b61007f6108b8565b61006f565b5061007f610865565b5061007f610814565b5061007f61076c565b5061007f610696565b5061007f610301565b34610279576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610275578335906100ed8261027d565b73ffffffffffffffffffffffffffffffffffffffff8092167ff111569c00000000000000000000000000000000000000000000000000000000845281848781845afa938415610268575b8794610239575b5061014884610a9c565b95875b8581106101635786518061015f8a826102a0565b0390f35b6101fa9087517f285218480000000000000000000000000000000000000000000000000000000081528581806101a0858883019190602083019252565b0381885afa90811561022c575b8b916101ff575b506101df876101c1610557565b9216829073ffffffffffffffffffffffffffffffffffffffff169052565b6101e9828b610be4565b526101f4818a610be4565b50610b62565b61014b565b61021f9150863d8811610225575b6102178183610516565b810190610b9c565b8b6101b4565b503d61020d565b610234610a8f565b6101ad565b61025a919450823d8411610261575b6102528183610516565b810190610a80565b928761013e565b503d610248565b610270610a8f565b610137565b8480fd5b8380fd5b73ffffffffffffffffffffffffffffffffffffffff81160361029b57565b600080fd5b6020908160408183019282815285518094520193019160005b8281106102c7575050505090565b83515173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016102b9565b604435906102ff8261027d565b565b503461029b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576104396004356103408161027d565b61041e60243561034f8161027d565b73ffffffffffffffffffffffffffffffffffffffff90610374826000541633146109ac565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315610494575b600093610475575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215610468575b60009261043b575b5050611463565b005b61045a9250803d10610461575b6104528183610516565b81019061144b565b3880610432565b503d610448565b610470610a8f565b61042a565b61048d919350843d8611610261576102528183610516565b91386103c3565b61049c610a8f565b6103bb565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176104ed57604052565b6104f56104a1565b604052565b6040810190811067ffffffffffffffff8211176104ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104ed57604052565b604051906020820182811067ffffffffffffffff8211176104ed57604052565b604051906102ff826104d1565b60209067ffffffffffffffff811161059e575b60051b0190565b6105a66104a1565b610597565b6000915b600283106105bc57505050565b6001908251815260208091019201920191906105af565b6020808201908083528351809252806040809401940192600080915b8483106105ff5750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff8082511684528083830151168385015284820151858501526060808301519085015260808083015190850187905b6002821061067d575050505060019261066f60a061010093015160c08301906105ab565b0197019594930191906105ef565b8251841681528a9592830192600192909201910161064b565b503461029b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576004356106d28161027d565b60243567ffffffffffffffff811161029b573660238201121561029b5780600401356106fd81610584565b9161070b6040519384610516565b81835260209160248385019160051b8301019136831161029b57602401905b8282106107535761015f61074787876107416102f2565b91610dad565b604051918291826105d3565b83809183356107618161027d565b81520191019061072a565b503461029b576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108115780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107e33384146109ac565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461029b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b5760206004356024358082101561085e57505b604051908152f35b9050610856565b503461029b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461029b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576004356108f48161027d565b73ffffffffffffffffffffffffffffffffffffffff610918816000541633146109ac565b8116156109285761043990610a11565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156109b357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b9081602091031261029b575190565b506040513d6000823e3d90fd5b90610aa682610584565b604090610ab582519182610516565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ae38295610584565b0191600091825b848110610af8575050505050565b60209083518280820182811067ffffffffffffffff821117610b25575b8652868252828501015201610aea565b610b2d6104a1565b610b15565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b90570190565b610b98610b32565b0190565b9081602091031261029b5751610bb18161027d565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020918151811015610bf9575b60051b010190565b610c01610bb4565b610bf1565b60405190610c13826104fa565b6040368337565b90610c2482610584565b604090610c3382519182610516565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c618295610584565b019160005b838110610c735750505050565b6020908251610c81816104d1565b6000815282600081830152600085830152600060608301528451610ca4816104fa565b8536823760808301528451610cb8816104fa565b8536823760a0830152828601015201610c66565b818110610cd7570390565b610cdf610b32565b0390565b906002811015610cf45760051b0190565b6105a6610bb4565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610d37570290565b610d3f610b32565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610d37570290565b8115610d7e570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9291610db98251610c1a565b9160005b815181101561144457610e0c610df3610df3610dd98486610be4565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b604080517f70a082310000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff871660048084019190915290926020908184602481895afa938415611437575b600094611418575b5083156114095780517f8b752bb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808b1685830190815290881660208201528d91610f6591859082908190604001038173ffffffffffffffffffffffffffffffffffffffff8097165afa9081156113fc575b6000916113df575b5083517f0940070700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1687820190815286908290819060200103818d5afa9081156113d2575b6000916113b5575b50610ccc565b93610fae83517f963c94b9000000000000000000000000000000000000000000000000000000008152858184818d5afa9081156113a8575b60009161138b575b509998996114c8565b96610fb7610c06565b96610fc0610c06565b9860008e5b828210611216575050506110f285946110ec6111459589989561116c9f9d9c9b9a6110cb8f826110b091610ffb6111009b610cfc565b956110438d517f18160ddd000000000000000000000000000000000000000000000000000000009889825285828c81885afa918215611209575b6000926111f1575b50610d74565b998d517f82c6306600000000000000000000000000000000000000000000000000000000815284818b81875afa9081156111e4575b6000916111c7575b50169c519384928392835289830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d5afa9081156111ba575b60009161119d575b50610cfc565b918a519384918252818a5afa918215611190575b6000926111715750610d74565b90610d43565b670de0b6b3a7640000900490565b9361112861110c610577565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b88019073ffffffffffffffffffffffffffffffffffffffff169052565b8501526060840152608083015260a08201526111618287610be4565b526101f48186610be4565b610dbd565b6111899192508a3d8c11610261576102528183610516565b903861103d565b611198610a8f565b6110df565b6111b49150833d8511610261576102528183610516565b386110c5565b6111c2610a8f565b6110bd565b6111de9150853d8711610225576102178183610516565b38611080565b6111ec610a8f565b611078565b611189919250863d8811610261576102528183610516565b611211610a8f565b611035565b908b6113058f9e9f8b8b8f9261132a978c6112ac610dd98a80986112a788517f54c49fe90000000000000000000000000000000000000000000000000000000081528a818061126c878b83019190602083019252565b03818c5afa90811561137e575b600091611361575b5061128c8484610ce3565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610ce3565b93517f33fd6f7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169181019182529190931660208401529485928391829160400190565b03915afa918215611354575b600092611333575b506113249192610ce3565b52610b62565b8e9c9b9c610fc5565b611324925061134e908d803d10610261576102528183610516565b91611319565b61135c610a8f565b611311565b61137891508b3d8d11610225576102178183610516565b38611281565b611386610a8f565b611279565b6113a29150863d8811610261576102528183610516565b38610fa5565b6113b0610a8f565b610f9d565b6113cc9150863d8811610261576102528183610516565b38610f5f565b6113da610a8f565b610f57565b6113f69150853d8711610261576102528183610516565b38610efe565b611404610a8f565b610ef6565b50505050505061116c90610b62565b611430919450823d8411610261576102528183610516565b9238610e71565b61143f610a8f565b610e69565b5050509150565b9081602091031261029b5751801515810361029b5790565b1561146a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fd5b60028110156114d45790565b5060029056fea2646970667358221220b9e0ff41992c21decb718916b0ef80480e84f40befd0cadc0d3cd258bbd5664f64736f6c634300080d0033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600091823560e01c93846313284bd7146100b15750505050806324ae6a27146100a8578063362a64a31461009f578063715018a6146100965780637ae2b5c71461008d5780638da5cb5b146100845763f2fde38b14610077575b388080600080fd5b61007f6108b8565b61006f565b5061007f610865565b5061007f610814565b5061007f61076c565b5061007f610696565b5061007f610301565b34610279576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610275578335906100ed8261027d565b73ffffffffffffffffffffffffffffffffffffffff8092167ff111569c00000000000000000000000000000000000000000000000000000000845281848781845afa938415610268575b8794610239575b5061014884610a9c565b95875b8581106101635786518061015f8a826102a0565b0390f35b6101fa9087517f285218480000000000000000000000000000000000000000000000000000000081528581806101a0858883019190602083019252565b0381885afa90811561022c575b8b916101ff575b506101df876101c1610557565b9216829073ffffffffffffffffffffffffffffffffffffffff169052565b6101e9828b610be4565b526101f4818a610be4565b50610b62565b61014b565b61021f9150863d8811610225575b6102178183610516565b810190610b9c565b8b6101b4565b503d61020d565b610234610a8f565b6101ad565b61025a919450823d8411610261575b6102528183610516565b810190610a80565b928761013e565b503d610248565b610270610a8f565b610137565b8480fd5b8380fd5b73ffffffffffffffffffffffffffffffffffffffff81160361029b57565b600080fd5b6020908160408183019282815285518094520193019160005b8281106102c7575050505090565b83515173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016102b9565b604435906102ff8261027d565b565b503461029b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576104396004356103408161027d565b61041e60243561034f8161027d565b73ffffffffffffffffffffffffffffffffffffffff90610374826000541633146109ac565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315610494575b600093610475575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215610468575b60009261043b575b5050611463565b005b61045a9250803d10610461575b6104528183610516565b81019061144b565b3880610432565b503d610448565b610470610a8f565b61042a565b61048d919350843d8611610261576102528183610516565b91386103c3565b61049c610a8f565b6103bb565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176104ed57604052565b6104f56104a1565b604052565b6040810190811067ffffffffffffffff8211176104ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104ed57604052565b604051906020820182811067ffffffffffffffff8211176104ed57604052565b604051906102ff826104d1565b60209067ffffffffffffffff811161059e575b60051b0190565b6105a66104a1565b610597565b6000915b600283106105bc57505050565b6001908251815260208091019201920191906105af565b6020808201908083528351809252806040809401940192600080915b8483106105ff5750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff8082511684528083830151168385015284820151858501526060808301519085015260808083015190850187905b6002821061067d575050505060019261066f60a061010093015160c08301906105ab565b0197019594930191906105ef565b8251841681528a9592830192600192909201910161064b565b503461029b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576004356106d28161027d565b60243567ffffffffffffffff811161029b573660238201121561029b5780600401356106fd81610584565b9161070b6040519384610516565b81835260209160248385019160051b8301019136831161029b57602401905b8282106107535761015f61074787876107416102f2565b91610dad565b604051918291826105d3565b83809183356107618161027d565b81520191019061072a565b503461029b576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108115780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107e33384146109ac565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461029b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b5760206004356024358082101561085e57505b604051908152f35b9050610856565b503461029b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461029b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029b576004356108f48161027d565b73ffffffffffffffffffffffffffffffffffffffff610918816000541633146109ac565b8116156109285761043990610a11565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156109b357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b9081602091031261029b575190565b506040513d6000823e3d90fd5b90610aa682610584565b604090610ab582519182610516565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ae38295610584565b0191600091825b848110610af8575050505050565b60209083518280820182811067ffffffffffffffff821117610b25575b8652868252828501015201610aea565b610b2d6104a1565b610b15565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b90570190565b610b98610b32565b0190565b9081602091031261029b5751610bb18161027d565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020918151811015610bf9575b60051b010190565b610c01610bb4565b610bf1565b60405190610c13826104fa565b6040368337565b90610c2482610584565b604090610c3382519182610516565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c618295610584565b019160005b838110610c735750505050565b6020908251610c81816104d1565b6000815282600081830152600085830152600060608301528451610ca4816104fa565b8536823760808301528451610cb8816104fa565b8536823760a0830152828601015201610c66565b818110610cd7570390565b610cdf610b32565b0390565b906002811015610cf45760051b0190565b6105a6610bb4565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610d37570290565b610d3f610b32565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610d37570290565b8115610d7e570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9291610db98251610c1a565b9160005b815181101561144457610e0c610df3610df3610dd98486610be4565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b604080517f70a082310000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff871660048084019190915290926020908184602481895afa938415611437575b600094611418575b5083156114095780517f8b752bb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808b1685830190815290881660208201528d91610f6591859082908190604001038173ffffffffffffffffffffffffffffffffffffffff8097165afa9081156113fc575b6000916113df575b5083517f0940070700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1687820190815286908290819060200103818d5afa9081156113d2575b6000916113b5575b50610ccc565b93610fae83517f963c94b9000000000000000000000000000000000000000000000000000000008152858184818d5afa9081156113a8575b60009161138b575b509998996114c8565b96610fb7610c06565b96610fc0610c06565b9860008e5b828210611216575050506110f285946110ec6111459589989561116c9f9d9c9b9a6110cb8f826110b091610ffb6111009b610cfc565b956110438d517f18160ddd000000000000000000000000000000000000000000000000000000009889825285828c81885afa918215611209575b6000926111f1575b50610d74565b998d517f82c6306600000000000000000000000000000000000000000000000000000000815284818b81875afa9081156111e4575b6000916111c7575b50169c519384928392835289830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d5afa9081156111ba575b60009161119d575b50610cfc565b918a519384918252818a5afa918215611190575b6000926111715750610d74565b90610d43565b670de0b6b3a7640000900490565b9361112861110c610577565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b88019073ffffffffffffffffffffffffffffffffffffffff169052565b8501526060840152608083015260a08201526111618287610be4565b526101f48186610be4565b610dbd565b6111899192508a3d8c11610261576102528183610516565b903861103d565b611198610a8f565b6110df565b6111b49150833d8511610261576102528183610516565b386110c5565b6111c2610a8f565b6110bd565b6111de9150853d8711610225576102178183610516565b38611080565b6111ec610a8f565b611078565b611189919250863d8811610261576102528183610516565b611211610a8f565b611035565b908b6113058f9e9f8b8b8f9261132a978c6112ac610dd98a80986112a788517f54c49fe90000000000000000000000000000000000000000000000000000000081528a818061126c878b83019190602083019252565b03818c5afa90811561137e575b600091611361575b5061128c8484610ce3565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610ce3565b93517f33fd6f7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169181019182529190931660208401529485928391829160400190565b03915afa918215611354575b600092611333575b506113249192610ce3565b52610b62565b8e9c9b9c610fc5565b611324925061134e908d803d10610261576102528183610516565b91611319565b61135c610a8f565b611311565b61137891508b3d8d11610225576102178183610516565b38611281565b611386610a8f565b611279565b6113a29150863d8811610261576102528183610516565b38610fa5565b6113b0610a8f565b610f9d565b6113cc9150863d8811610261576102528183610516565b38610f5f565b6113da610a8f565b610f57565b6113f69150853d8711610261576102528183610516565b38610efe565b611404610a8f565b610ef6565b50505050505061116c90610b62565b611430919450823d8411610261576102528183610516565b9238610e71565b61143f610a8f565b610e69565b5050509150565b9081602091031261029b5751801515810361029b5790565b1561146a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fd5b60028110156114d45790565b5060029056fea2646970667358221220b9e0ff41992c21decb718916b0ef80480e84f40befd0cadc0d3cd258bbd5664f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/CurveGaugesMulticall.sol:CurveGaugesMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}