{
  "address": "0xd52295AacD812177d67303CA0e8F97603e071ddb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "initiateVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2294c148ba0cc6b75c8d5ae6dcda62bbc791201aa6eefa99e59ea262fd95bec8",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xd52295AacD812177d67303CA0e8F97603e071ddb",
    "transactionIndex": 75,
    "gasUsed": "772798",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000108000000000000000000000000000000000000000000000000000100000800001000000000000000900000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000200000000000000000000000000000000000000000200000040000100000000000000000000000000000000000000000000000004002000000000000000001000000000010000000000000000000100000000020000000000000000000000000000000100000000000000000000000000000100000",
    "blockHash": "0x034b622e647efffe00143e99379eafdd44151f9efc3d5701ecade59c98c8fd91",
    "transactionHash": "0x2294c148ba0cc6b75c8d5ae6dcda62bbc791201aa6eefa99e59ea262fd95bec8",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 35410766,
        "transactionHash": "0x2294c148ba0cc6b75c8d5ae6dcda62bbc791201aa6eefa99e59ea262fd95bec8",
        "address": "0xd52295AacD812177d67303CA0e8F97603e071ddb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 239,
        "blockHash": "0x034b622e647efffe00143e99379eafdd44151f9efc3d5701ecade59c98c8fd91"
      },
      {
        "transactionIndex": 75,
        "blockNumber": 35410766,
        "transactionHash": "0x2294c148ba0cc6b75c8d5ae6dcda62bbc791201aa6eefa99e59ea262fd95bec8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018d0ac98d0de6a8000000000000000000000000000000000000000000000000585554139b4001fd000000000000000000000000000000000000000000006b69d87817fe482c920f00000000000000000000000000000000000000000000000056c8494a0e321b55000000000000000000000000000000000000000000006b69da0522c7d53a78b7",
        "logIndex": 240,
        "blockHash": "0x034b622e647efffe00143e99379eafdd44151f9efc3d5701ecade59c98c8fd91"
      }
    ],
    "blockNumber": 35410766,
    "cumulativeGasUsed": "9600493",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f0cd54e2a842bfcfab1d6972a610c493",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"initiateVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exec(address,uint256,bytes)\":{\"notice\":\"Shouldn't be necessary, this contract doesn't hold funds. Here just in case of emergency.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/defi/QiVaultCreator.sol\":\"QiVaultCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/defi/QiVaultCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/qidao/QiVault.sol\\\";\\n\\ncontract QiVaultCreator is Ownable {\\n    event VaultCreated(\\n        uint256 vaultId,\\n        address vaultAddress,\\n        address collateralToken,\\n        uint256 collateralAmount,\\n        uint256 debtAmount\\n    );\\n\\n    function initiateVault(\\n        address vaultAddress,\\n        address collateralToken,\\n        uint256 collateralAmount,\\n        uint256 debtAmount\\n    ) external returns (uint256 vaultId) {\\n        require(\\n            IERC20(collateralToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                collateralAmount\\n            ),\\n            \\\"QVC: Collateral transfer failed\\\"\\n        );\\n        QiVault vault = QiVault(vaultAddress);\\n        vaultId = vault.createVault();\\n\\n        IERC20(collateralToken).approve(vaultAddress, collateralAmount);\\n        vault.depositCollateral(vaultId, collateralAmount);\\n        vault.borrowToken(vaultId, debtAmount);\\n\\n        require(\\n            IERC20(vault.mai()).transfer(msg.sender, debtAmount),\\n            \\\"QVC: MAI transfer failed\\\"\\n        );\\n\\n        IERC721(vaultAddress).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            vaultId\\n        );\\n\\n        emit VaultCreated(\\n            vaultId,\\n            vaultAddress,\\n            collateralToken,\\n            collateralAmount,\\n            debtAmount\\n        );\\n    }\\n\\n    /// Shouldn't be necessary, this contract doesn't hold funds. Here just in case of emergency.\\n    function exec(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        (bool success, bytes memory reason) = target.call{value: value}(data);\\n        require(success, string(reason));\\n    }\\n}\\n\",\"keccak256\":\"0xae91cb191ea3b448961be0d182c6660d05e414a22d6e7d8c664857014f6afea7\",\"license\":\"MIT\"},\"contracts/interfaces/qidao/QiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface QiVault {\\n    function getDebtCeiling() external view returns (uint256);\\n\\n    function getClosingFee() external view returns (uint256);\\n\\n    function getOpeningFee() external view returns (uint256);\\n\\n    function getTokenPriceSource() external view returns (uint256);\\n\\n    function getEthPriceSource() external view returns (uint256);\\n\\n    function createVault() external returns (uint256);\\n\\n    function destroyVault(uint256 vaultID) external;\\n\\n    function transferVault(uint256 vaultID, address to) external;\\n\\n    function depositCollateral(uint256 vaultID, uint256 amount) external;\\n\\n    function withdrawCollateral(uint256 vaultID, uint256 amount) external;\\n\\n    function borrowToken(uint256 vaultID, uint256 amount) external;\\n\\n    function payBackToken(uint256 vaultID, uint256 amount) external;\\n\\n    function buyRiskyVault(uint256 vaultID) external;\\n\\n    function mai() external returns (address);\\n}\\n\",\"keccak256\":\"0xa6fcbee0c420ea02fa31824fde987376d01fb5605d6d869ef7e43188627ee411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a3610ca990816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081630565bb671461007a57508063715018a6146100715780638da5cb5b14610068578063c62c8cab1461005f5763f2fde38b1461005757600080fd5b61000e6107aa565b5061000e61022b565b5061000e6101d8565b5061000e610133565b346101075760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610107576004356100b58161010a565b6044359067ffffffffffffffff9081831161010357366023840112156101035782600401359182116101035736602483850101116101035760246100fe93019060243590610b1c565b604051f35b8380fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b600091031261000e57565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101075780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916101aa3384146108a0565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600480356102688161010a565b602435906102758261010a565b604435916064359173ffffffffffffffffffffffffffffffffffffffff92838316946040948551977f23b872dd0000000000000000000000000000000000000000000000000000000089528760208a81818030893391898401926103039360409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b0360009e8f80975af161032491811561079d575b8491610780575b50610a2b565b8387169389519a7f5d12928b000000000000000000000000000000000000000000000000000000008c52828c8681878a5af19b8c15610773575b849c61073a575b5082876103c4928b878f518096819582947f095ea7b30000000000000000000000000000000000000000000000000000000084528d84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561072d575b610710575b50843b156106ec5789517fece137320000000000000000000000000000000000000000000000000000000081528481018c8152602081018890528490829081906040010381838a5af18015610703575b6106f0575b50843b156106ec578161052c8489818f8f9082848d610487936105479d8f8751968795869485937f08ec5927000000000000000000000000000000000000000000000000000000008552840160209093929193604081019481520152565b03925af180156106df575b6106cc575b50858b8b8351809781937f570b2b840000000000000000000000000000000000000000000000000000000083525af19384156106bf575b8294610690575b50519586809581947fa9059cbb000000000000000000000000000000000000000000000000000000008352338d84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af1918215610683575b8c92610656575b5050610ab7565b813b156106525786517f42842e0e0000000000000000000000000000000000000000000000000000000081523091810191825233602083015260408201899052610628997f44af6ec22ccd3d0e77902015a78c08beef5480d0afff29d20c929b271ba2dd6e979695610617959094909383919082908490829060600103925af18015610645575b61062c575b508651948594898691608093969594919660a0840197845273ffffffffffffffffffffffffffffffffffffffff809216602085015216604083015260608201520152565b0390a1519081529081906020820190565b0390f35b8061063961063f926109a4565b80610128565b386105d3565b61064d610a1e565b6105ce565b8880fd5b6106759250803d1061067c575b61066d81836109c5565b810190610a06565b3880610540565b503d610663565b61068b610a1e565b610539565b6106b1919450863d88116106b8575b6106a981836109c5565b810190610a9f565b92386104d5565b503d61069f565b6106c7610a1e565b6104ce565b806106396106d9926109a4565b38610497565b6106e7610a1e565b610492565b8280fd5b806106396106fd926109a4565b38610429565b61070b610a1e565b610424565b61072690833d851161067c5761066d81836109c5565b50386103d4565b610735610a1e565b6103cf565b849c50878c928b8693843d861161076c575b61075681836109c5565b810161076191610a90565b9f5050925050610365565b503d61074c565b61077b610a1e565b61035e565b6107979150833d851161067c5761066d81836109c5565b3861031e565b6107a5610a1e565b610317565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356107e68161010a565b73ffffffffffffffffffffffffffffffffffffffff61080a816000541633146108a0565b81161561081c5761081a90610905565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156108a757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109b857604052565b6109c0610974565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109b857604052565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15610a3257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5156433a20436f6c6c61746572616c207472616e73666572206661696c6564006044820152fd5b9081602091031261000e575190565b9081602091031261000e5751610ab48161010a565b90565b15610abe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5156433a204d4149207472616e73666572206661696c656400000000000000006044820152fd5b91909160009384938493610b4873ffffffffffffffffffffffffffffffffffffffff86541633146108a0565b826040519384928337810185815203925af13d15610c6b573d9067ffffffffffffffff8211610c5e575b60405191610ba860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846109c5565b82523d83602084013e5b15610bbb575050565b60405180927f08c379a0000000000000000000000000000000000000000000000000000000008252602080600484015283519384602485015282915b858310610c45575050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092604495601f9311610c39575b5001168101030190fd5b85828601015286610c2f565b8183018101518784016044015286945091820191610bf7565b610c66610974565b610b72565b606090610bb256fea264697066735822122080fb531121a4af140fae91eb73934bc981661b10737ff2d42c676b871835fcce64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081630565bb671461007a57508063715018a6146100715780638da5cb5b14610068578063c62c8cab1461005f5763f2fde38b1461005757600080fd5b61000e6107aa565b5061000e61022b565b5061000e6101d8565b5061000e610133565b346101075760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610107576004356100b58161010a565b6044359067ffffffffffffffff9081831161010357366023840112156101035782600401359182116101035736602483850101116101035760246100fe93019060243590610b1c565b604051f35b8380fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b600091031261000e57565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101075780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916101aa3384146108a0565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600480356102688161010a565b602435906102758261010a565b604435916064359173ffffffffffffffffffffffffffffffffffffffff92838316946040948551977f23b872dd0000000000000000000000000000000000000000000000000000000089528760208a81818030893391898401926103039360409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b0360009e8f80975af161032491811561079d575b8491610780575b50610a2b565b8387169389519a7f5d12928b000000000000000000000000000000000000000000000000000000008c52828c8681878a5af19b8c15610773575b849c61073a575b5082876103c4928b878f518096819582947f095ea7b30000000000000000000000000000000000000000000000000000000084528d84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561072d575b610710575b50843b156106ec5789517fece137320000000000000000000000000000000000000000000000000000000081528481018c8152602081018890528490829081906040010381838a5af18015610703575b6106f0575b50843b156106ec578161052c8489818f8f9082848d610487936105479d8f8751968795869485937f08ec5927000000000000000000000000000000000000000000000000000000008552840160209093929193604081019481520152565b03925af180156106df575b6106cc575b50858b8b8351809781937f570b2b840000000000000000000000000000000000000000000000000000000083525af19384156106bf575b8294610690575b50519586809581947fa9059cbb000000000000000000000000000000000000000000000000000000008352338d84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af1918215610683575b8c92610656575b5050610ab7565b813b156106525786517f42842e0e0000000000000000000000000000000000000000000000000000000081523091810191825233602083015260408201899052610628997f44af6ec22ccd3d0e77902015a78c08beef5480d0afff29d20c929b271ba2dd6e979695610617959094909383919082908490829060600103925af18015610645575b61062c575b508651948594898691608093969594919660a0840197845273ffffffffffffffffffffffffffffffffffffffff809216602085015216604083015260608201520152565b0390a1519081529081906020820190565b0390f35b8061063961063f926109a4565b80610128565b386105d3565b61064d610a1e565b6105ce565b8880fd5b6106759250803d1061067c575b61066d81836109c5565b810190610a06565b3880610540565b503d610663565b61068b610a1e565b610539565b6106b1919450863d88116106b8575b6106a981836109c5565b810190610a9f565b92386104d5565b503d61069f565b6106c7610a1e565b6104ce565b806106396106d9926109a4565b38610497565b6106e7610a1e565b610492565b8280fd5b806106396106fd926109a4565b38610429565b61070b610a1e565b610424565b61072690833d851161067c5761066d81836109c5565b50386103d4565b610735610a1e565b6103cf565b849c50878c928b8693843d861161076c575b61075681836109c5565b810161076191610a90565b9f5050925050610365565b503d61074c565b61077b610a1e565b61035e565b6107979150833d851161067c5761066d81836109c5565b3861031e565b6107a5610a1e565b610317565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356107e68161010a565b73ffffffffffffffffffffffffffffffffffffffff61080a816000541633146108a0565b81161561081c5761081a90610905565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156108a757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109b857604052565b6109c0610974565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109b857604052565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15610a3257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5156433a20436f6c6c61746572616c207472616e73666572206661696c6564006044820152fd5b9081602091031261000e575190565b9081602091031261000e5751610ab48161010a565b90565b15610abe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5156433a204d4149207472616e73666572206661696c656400000000000000006044820152fd5b91909160009384938493610b4873ffffffffffffffffffffffffffffffffffffffff86541633146108a0565b826040519384928337810185815203925af13d15610c6b573d9067ffffffffffffffff8211610c5e575b60405191610ba860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846109c5565b82523d83602084013e5b15610bbb575050565b60405180927f08c379a0000000000000000000000000000000000000000000000000000000008252602080600484015283519384602485015282915b858310610c45575050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092604495601f9311610c39575b5001168101030190fd5b85828601015286610c2f565b8183018101518784016044015286945091820191610bf7565b610c66610974565b610b72565b606090610bb256fea264697066735822122080fb531121a4af140fae91eb73934bc981661b10737ff2d42c676b871835fcce64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exec(address,uint256,bytes)": {
        "notice": "Shouldn't be necessary, this contract doesn't hold funds. Here just in case of emergency."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/defi/QiVaultCreator.sol:QiVaultCreator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}