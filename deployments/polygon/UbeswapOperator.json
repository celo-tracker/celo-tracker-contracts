{
  "address": "0x0D57f319f4539D51e2cE792D99f565828C2AD043",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "swapAndZapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0f80e69d612dd894ee59a8f01f98a8fbc41402598e483ad6b4b3fa3dcb821ad7",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x0D57f319f4539D51e2cE792D99f565828C2AD043",
    "transactionIndex": 35,
    "gasUsed": "1503576",
    "logsBloom": "0x
    "blockHash": "0xaeb3b009254ac7468bb16fb1d1244b7c7ba07debfbe5c3bc7dc126e2c0b7aad5",
    "transactionHash": "0x0f80e69d612dd894ee59a8f01f98a8fbc41402598e483ad6b4b3fa3dcb821ad7",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 31134342,
        "transactionHash": "0x0f80e69d612dd894ee59a8f01f98a8fbc41402598e483ad6b4b3fa3dcb821ad7",
        "address": "0x0D57f319f4539D51e2cE792D99f565828C2AD043",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0xaeb3b009254ac7468bb16fb1d1244b7c7ba07debfbe5c3bc7dc126e2c0b7aad5"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 31134342,
        "transactionHash": "0x0f80e69d612dd894ee59a8f01f98a8fbc41402598e483ad6b4b3fa3dcb821ad7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d3a566010525700000000000000000000000000000000000000000000000007a64768cda708216000000000000000000000000000000000000000000005b5db65532a8511b89fb0000000000000000000000000000000000000000000000007990d126d96b5ca6000000000000000000000000000000000000000000005b5db728d80e5220af6b",
        "logIndex": 147,
        "blockHash": "0xaeb3b009254ac7468bb16fb1d1244b7c7ba07debfbe5c3bc7dc126e2c0b7aad5"
      }
    ],
    "blockNumber": 31134342,
    "cumulativeGasUsed": "7470739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff",
    "0x5757371414417b8c6caad45baef941abc7d3ab32",
    "0xDbb5fE606db4240ce75D280c18d74536369543DB"
  ],
  "numDeployments": 1,
  "solcInputHash": "48b735005414ad105911279df2f3e452",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"swapAndZapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/defi/UbeswapOperator.sol\":\"UbeswapOperator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/defi/UbeswapOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\nimport \\\"./UniswapOperator.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\ncontract UbeswapOperator is UniswapOperator, Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IRewarder private rewarder;\\n\\n  constructor(\\n    address _router,\\n    address _factory,\\n    address _rewarder\\n  ) UniswapOperator(_router, _factory) {\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  receive() external payable {}\\n\\n  function setRewarder(address _rewarder) public onlyOwner {\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  function swapAndZapIn(\\n    address from,\\n    address to,\\n    uint256 fromAmount,\\n    uint256 minAmountOut,\\n    uint256 percentMin,\\n    address user\\n  ) external {\\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\\n    uint256 halfFromAmount = fromAmount / 2;\\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\\n\\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, user);\\n  }\\n\\n  function zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    address user\\n  ) external {\\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\\n\\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, user);\\n  }\\n\\n  function _zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    address user\\n  ) internal {\\n    _addLiquidityAndTransferLpToken(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin,\\n      user\\n    );\\n\\n    rewarder.onReward(\\n      user,\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin\\n    );\\n\\n    // Return leftovers\\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\\n  }\\n\\n  function _addLiquidityAndTransferLpToken(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    address user\\n  ) internal {\\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\\n\\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\\n    IERC20(lpToken).transfer(user, lpBalance);\\n  }\\n}\\n\",\"keccak256\":\"0x3628a7692346addc3f3461f8ca5d1d2a5f3a23802a50a9a495a8b822aaf4e65c\",\"license\":\"MIT\"},\"contracts/defi/UniswapOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\n\\ncontract UniswapOperator {\\n  using SafeMath for uint256;\\n\\n  address public immutable router;\\n  address public immutable factory;\\n\\n  constructor(address _router, address _factory) {\\n    router = _router;\\n    factory = _factory;\\n  }\\n\\n  function _swapUsingPool(\\n    address from,\\n    address to,\\n    uint256 inputAmount,\\n    uint256 minAmountOut\\n  ) internal returns (uint256 outAmount) {\\n    address pairAddress = UniswapV2Library.pairFor(factory, from, to);\\n    address[] memory path = new address[](2);\\n    path[0] = from;\\n    path[1] = to;\\n\\n    require(\\n      IERC20(from).transfer(pairAddress, inputAmount),\\n      \\\"UniswapOperator: Transfer failed\\\"\\n    );\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n    if (pair.token0() == from) {\\n      outAmount = getAmountOut(inputAmount, reserve0, reserve1);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(0, outAmount, address(this), new bytes(0));\\n    } else {\\n      outAmount = getAmountOut(inputAmount, reserve1, reserve0);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(outAmount, 0, address(this), new bytes(0));\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) internal {\\n    IERC20(token0).approve(router, token0Amount);\\n    IERC20(token1).approve(router, token1Amount);\\n    IUniswapV2Router02(router).addLiquidity(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      (token0Amount * percentMin) / 100,\\n      (token1Amount * percentMin) / 100,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n}\\n\",\"keccak256\":\"0xc55dfdf9830f4fce7a96ef153366280102127eaa40b81b82bd35562f09bd76f3\",\"license\":\"MIT\"},\"contracts/defi/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  function onReward(\\n    address user,\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7b6e3e4ec270b17e4ee80ba24054eef5b0e599c9d88a3b402b50a5ae5e717127\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function poolLength() external view returns (uint256);\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\n    function harvest(uint256 pid, address to) external;\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xb8a04e3167bc858953a4fbc97d8e16d92f53c7069e41b3caa013565bac235020\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\",\"keccak256\":\"0x3922110d266eb2283dcd89a633ff54e48d95e5739e7ac10b5ac78604bd6ea19b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external returns (address);\\n\\n  function WETH() external returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x28dd31008745b25e75c3b9f1826db8f9fc6d4990266b60999423cd69a733a311\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0197ba652269a2a07a102680f714d6a348643ad62a9b16e2122bec834c0d542f\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary UniswapSafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0x1ea866557685098ca7d44d43aea18634d5ae315ee58a3725f725a0084a71682c\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IUniswapV2Pair.sol\\\";\\nimport \\\"../IUniswapV2Factory.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  using UniswapSafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = IUniswapV2Factory(factory).getPair(token0, token1);\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    ).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4528f7edccd012c764889218b9a23f0ac71520aca7484d8d44d74f40ee2bd6f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c034620000ad57601f62001abb38819003918201601f19168301916001600160401b03831184841017620000b257808492606094604052833981010312620000ad5780620000526200007692620000c8565b906200006f60406200006760208401620000c8565b9201620000c8565b91620000dd565b604051611984908162000137823960805181818161085f0152611492015260a051818181610218015281816106fb01526110af0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000ad57565b60805260a05260005460018060a01b031991338383161760005560018060a01b0391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a31690600154161760015556fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c9081633a6462e4146100be5750806358042a03146100b5578063715018a6146100ac5780638da5cb5b146100a35780639c697d941461009a578063c45a015514610091578063f2fde38b146100885763f887ea400361000e57610083610813565b61000e565b5061008361071f565b506100836106af565b5061008361065f565b5061008361060c565b50610083610567565b506100836101d1565b3461014c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014c576004356100f98161014f565b73ffffffffffffffffffffffffffffffffffffffff9061011d828454163314610883565b167fffffffffffffffffffffffff00000000000000000000000000000000000000006001541617600155604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361016d57565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60c091011261016d576004356101a88161014f565b906024356101b58161014f565b9060443590606435906084359060a4356101ce8161014f565b90565b503461016d576101e036610172565b9173ffffffffffffffffffffffffffffffffffffffff948587169461020781303389610a51565b60011c906000956102de61023c838b7f0000000000000000000000000000000000000000000000000000000000000000611786565b9161027a8461025a8d6102756102506111a4565b9161025a836111df565b9073ffffffffffffffffffffffffffffffffffffffff169052565b61121b565b8960409a8b946102f88c87517fa9059cbb0000000000000000000000000000000000000000000000000000000081528a818060209a8b9388600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0381858b5af191821561054f575b91610522575b5061122b565b16998451937f0902f1ac0000000000000000000000000000000000000000000000000000000085528b606086600481845afa958615610515575b839084976104d9575b509180916004936dffffffffffffffffffffffffffff80911698169851938480927f0dfe16810000000000000000000000000000000000000000000000000000000082525afa9283156104cc575b9261049f575b5050160361043f576103ae916103a591856116c6565b938410156112f6565b6103b6611381565b97863b1561016d5760008061040061041699829c8c519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308d600485016113f3565b03925af18015610432575b610419575b50610d9a565b51f35b8061042661042c926109b7565b8061055c565b38610410565b61043a610d7e565b61040b565b6103a59061044d92856116c6565b610455611381565b97863b1561016d5760008061040061041699829c8c519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308d600485016113ba565b6104be9250803d106104c5575b6104b68183610a10565b8101906112e1565b388061038f565b503d6104ac565b6104d4610d7e565b610389565b8392975060049391506105029060603d811161050e575b6104fa8183610a10565b8101906112ab565b5097909150919261033b565b503d6104f0565b61051d610d7e565b610332565b6105429150873d8911610548575b61053a8183610a10565b810190610b3d565b386102f2565b503d610530565b610557610d7e565b6102ec565b600091031261016d57565b503461016d576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014c5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916105de338414610883565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016d5761001961067136610172565b946106aa8373ffffffffffffffffffffffffffffffffffffffff96939695949561069f863033848816610a51565b309033908616610a51565b610d9a565b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d5760043561075b8161014f565b73ffffffffffffffffffffffffffffffffffffffff61077f81600054163314610883565b81161561078f57610019906108e8565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b1561088a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109cb57604052565b6109d3610987565b604052565b60a0810190811067ffffffffffffffff8211176109cb57604052565b6040810190811067ffffffffffffffff8211176109cb57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109cb57604052565b600091610b16949383926040519560208701937f23b872dd00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff938480921660248a0152166044880152606487015260648652610abe866109d8565b16908260405195610ace876109f4565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152610b04843b1515610be0565b51925af1610b10610c45565b90610d20565b805180610b21575050565b81602080610b3693610b3b9501019101610b3d565b610b55565b565b9081602091031261016d5751801515810361016d5790565b15610b5c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15610be757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15610cac573d9067ffffffffffffffff8211610c9f575b60405191610c9360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610a10565b82523d6000602084013e565b610ca7610987565b610c5d565b606090565b91908251928382526000905b848210610d085750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610cfb575b0116010190565b6000858286010152610cf4565b90602090818082850101519082860101520190610cbd565b90919015610d2c575090565b815115610d3c5750805190602001fd5b610d7a906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610cb1565b0390fd5b506040513d6000823e3d90fd5b9081602091031261016d575190565b91909492610dac848683858a88611092565b610de7610dce60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b1561016d576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a4810194909452610fa7936000918290829060c490829084905af18015611085575b611072575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa958615611065575b8496611046575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af18015611039575b61101c575b5060405195865230600487015216928585602481875afa94851561100f575b8295610fe0575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610fd3575b610fba575050565b81610fd092903d106105485761053a8183610a10565b50565b610fdb610d7e565b610fb2565b611001919550863d8811611008575b610ff98183610a10565b810190610d8b565b9338610f6e565b503d610fef565b611017610d7e565b610f67565b61103290883d8a116105485761053a8183610a10565b5038610f48565b611041610d7e565b610f43565b61105e919650883d8a1161100857610ff98183610a10565b9438610ee2565b61106d610d7e565b610edb565b8061042661107f926109b7565b38610e79565b61108d610d7e565b610e74565b90610dce916110ad610fa7966110d396610dce968585611484565b7f0000000000000000000000000000000000000000000000000000000000000000611786565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526020938492908383602481855afa928315611197575b600093611178575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b611190919350843d861161100857610ff98183610a10565b913861111d565b61119f610d7e565b611115565b604051906060820182811067ffffffffffffffff8211176111d2575b60405260028252604082602036910137565b6111da610987565b6111c0565b8051156111ec5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051600110156111ec5760400190565b1561123257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff8216820361016d57565b9081606091031261016d576112bf81611290565b9160406112ce60208401611290565b92015163ffffffff8116810361016d5790565b9081602091031261016d57516101ce8161014f565b156112fd57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176113ad575b8360405281815292369037565b6113b5610987565b6113a0565b73ffffffffffffffffffffffffffffffffffffffff6101ce94936080938352600060208401521660408201528160608201520190610cb1565b73ffffffffffffffffffffffffffffffffffffffff6101ce94936080936000845260208401521660408201528160608201520190610cb1565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482118115151661145d570290565b611465610957565b0290565b9081606091031261016d578051916040602083015192015190565b9391926000856060956116257f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b300000000000000000000000000000000000000000000000000000000908181528981806115126020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af180156116b9575b61169c575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af1801561168f575b611671575b505061159f6115916115986115918b8761142c565b6064900490565b998861142c565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af18015611664575b6116385750565b6116589060603d811161165d575b6116508183610a10565b810190611469565b505050565b503d611646565b61166c610d7e565b611631565b8161168792903d106105485761053a8183610a10565b50388061157c565b611697610d7e565b611577565b6116b290833d85116105485761053a8183610a10565b503861153b565b6116c1610d7e565b611536565b9190916117087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e590808404821181151516611779575b02928361142c565b92806103e8920482118115151661176c575b028119811161175f575b01908115611730570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611767610957565b611724565b611774610957565b61171a565b611781610957565b611700565b73ffffffffffffffffffffffffffffffffffffffff9081841693828416938585146118655761182295602095101561185f5790925b6117c881831615156118e9565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa908115611852575b60009161183a575090565b6101ce915060203d81116104c5576104b68183610a10565b61185a610d7e565b61182f565b926117bb565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b156118f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea26469706673582212208b8dd0d55b24c5ecda15866ba52032eedb550db19b011173aefd0f2ebd620bd364736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c9081633a6462e4146100be5750806358042a03146100b5578063715018a6146100ac5780638da5cb5b146100a35780639c697d941461009a578063c45a015514610091578063f2fde38b146100885763f887ea400361000e57610083610813565b61000e565b5061008361071f565b506100836106af565b5061008361065f565b5061008361060c565b50610083610567565b506100836101d1565b3461014c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014c576004356100f98161014f565b73ffffffffffffffffffffffffffffffffffffffff9061011d828454163314610883565b167fffffffffffffffffffffffff00000000000000000000000000000000000000006001541617600155604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361016d57565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60c091011261016d576004356101a88161014f565b906024356101b58161014f565b9060443590606435906084359060a4356101ce8161014f565b90565b503461016d576101e036610172565b9173ffffffffffffffffffffffffffffffffffffffff948587169461020781303389610a51565b60011c906000956102de61023c838b7f0000000000000000000000000000000000000000000000000000000000000000611786565b9161027a8461025a8d6102756102506111a4565b9161025a836111df565b9073ffffffffffffffffffffffffffffffffffffffff169052565b61121b565b8960409a8b946102f88c87517fa9059cbb0000000000000000000000000000000000000000000000000000000081528a818060209a8b9388600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0381858b5af191821561054f575b91610522575b5061122b565b16998451937f0902f1ac0000000000000000000000000000000000000000000000000000000085528b606086600481845afa958615610515575b839084976104d9575b509180916004936dffffffffffffffffffffffffffff80911698169851938480927f0dfe16810000000000000000000000000000000000000000000000000000000082525afa9283156104cc575b9261049f575b5050160361043f576103ae916103a591856116c6565b938410156112f6565b6103b6611381565b97863b1561016d5760008061040061041699829c8c519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308d600485016113f3565b03925af18015610432575b610419575b50610d9a565b51f35b8061042661042c926109b7565b8061055c565b38610410565b61043a610d7e565b61040b565b6103a59061044d92856116c6565b610455611381565b97863b1561016d5760008061040061041699829c8c519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308d600485016113ba565b6104be9250803d106104c5575b6104b68183610a10565b8101906112e1565b388061038f565b503d6104ac565b6104d4610d7e565b610389565b8392975060049391506105029060603d811161050e575b6104fa8183610a10565b8101906112ab565b5097909150919261033b565b503d6104f0565b61051d610d7e565b610332565b6105429150873d8911610548575b61053a8183610a10565b810190610b3d565b386102f2565b503d610530565b610557610d7e565b6102ec565b600091031261016d57565b503461016d576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014c5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916105de338414610883565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016d5761001961067136610172565b946106aa8373ffffffffffffffffffffffffffffffffffffffff96939695949561069f863033848816610a51565b309033908616610a51565b610d9a565b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d5760043561075b8161014f565b73ffffffffffffffffffffffffffffffffffffffff61077f81600054163314610883565b81161561078f57610019906108e8565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461016d5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016d57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b1561088a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109cb57604052565b6109d3610987565b604052565b60a0810190811067ffffffffffffffff8211176109cb57604052565b6040810190811067ffffffffffffffff8211176109cb57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109cb57604052565b600091610b16949383926040519560208701937f23b872dd00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff938480921660248a0152166044880152606487015260648652610abe866109d8565b16908260405195610ace876109f4565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152610b04843b1515610be0565b51925af1610b10610c45565b90610d20565b805180610b21575050565b81602080610b3693610b3b9501019101610b3d565b610b55565b565b9081602091031261016d5751801515810361016d5790565b15610b5c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15610be757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15610cac573d9067ffffffffffffffff8211610c9f575b60405191610c9360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610a10565b82523d6000602084013e565b610ca7610987565b610c5d565b606090565b91908251928382526000905b848210610d085750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610cfb575b0116010190565b6000858286010152610cf4565b90602090818082850101519082860101520190610cbd565b90919015610d2c575090565b815115610d3c5750805190602001fd5b610d7a906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610cb1565b0390fd5b506040513d6000823e3d90fd5b9081602091031261016d575190565b91909492610dac848683858a88611092565b610de7610dce60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b1561016d576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a4810194909452610fa7936000918290829060c490829084905af18015611085575b611072575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa958615611065575b8496611046575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af18015611039575b61101c575b5060405195865230600487015216928585602481875afa94851561100f575b8295610fe0575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610fd3575b610fba575050565b81610fd092903d106105485761053a8183610a10565b50565b610fdb610d7e565b610fb2565b611001919550863d8811611008575b610ff98183610a10565b810190610d8b565b9338610f6e565b503d610fef565b611017610d7e565b610f67565b61103290883d8a116105485761053a8183610a10565b5038610f48565b611041610d7e565b610f43565b61105e919650883d8a1161100857610ff98183610a10565b9438610ee2565b61106d610d7e565b610edb565b8061042661107f926109b7565b38610e79565b61108d610d7e565b610e74565b90610dce916110ad610fa7966110d396610dce968585611484565b7f0000000000000000000000000000000000000000000000000000000000000000611786565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526020938492908383602481855afa928315611197575b600093611178575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b611190919350843d861161100857610ff98183610a10565b913861111d565b61119f610d7e565b611115565b604051906060820182811067ffffffffffffffff8211176111d2575b60405260028252604082602036910137565b6111da610987565b6111c0565b8051156111ec5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051600110156111ec5760400190565b1561123257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff8216820361016d57565b9081606091031261016d576112bf81611290565b9160406112ce60208401611290565b92015163ffffffff8116810361016d5790565b9081602091031261016d57516101ce8161014f565b156112fd57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176113ad575b8360405281815292369037565b6113b5610987565b6113a0565b73ffffffffffffffffffffffffffffffffffffffff6101ce94936080938352600060208401521660408201528160608201520190610cb1565b73ffffffffffffffffffffffffffffffffffffffff6101ce94936080936000845260208401521660408201528160608201520190610cb1565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482118115151661145d570290565b611465610957565b0290565b9081606091031261016d578051916040602083015192015190565b9391926000856060956116257f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b300000000000000000000000000000000000000000000000000000000908181528981806115126020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af180156116b9575b61169c575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af1801561168f575b611671575b505061159f6115916115986115918b8761142c565b6064900490565b998861142c565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af18015611664575b6116385750565b6116589060603d811161165d575b6116508183610a10565b810190611469565b505050565b503d611646565b61166c610d7e565b611631565b8161168792903d106105485761053a8183610a10565b50388061157c565b611697610d7e565b611577565b6116b290833d85116105485761053a8183610a10565b503861153b565b6116c1610d7e565b611536565b9190916117087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e590808404821181151516611779575b02928361142c565b92806103e8920482118115151661176c575b028119811161175f575b01908115611730570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611767610957565b611724565b611774610957565b61171a565b611781610957565b611700565b73ffffffffffffffffffffffffffffffffffffffff9081841693828416938585146118655761182295602095101561185f5790925b6117c881831615156118e9565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa908115611852575b60009161183a575090565b6101ce915060203d81116104c5576104b68183610a10565b61185a610d7e565b61182f565b926117bb565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b156118f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea26469706673582212208b8dd0d55b24c5ecda15866ba52032eedb550db19b011173aefd0f2ebd620bd364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/defi/UbeswapOperator.sol:UbeswapOperator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4627,
        "contract": "contracts/defi/UbeswapOperator.sol:UbeswapOperator",
        "label": "rewarder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRewarder)5193"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)5193": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      }
    }
  }
}