{
  "address": "0x18708c90c8a342ADD9a688D7eDCd9aa31D4Cbf99",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewardAddresses",
          "type": "address[]"
        }
      ],
      "name": "getDualRewardPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardRateA",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsTokenA",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardRateB",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsTokenB",
              "type": "address"
            }
          ],
          "internalType": "struct QuickswapMulticall.QuickswapDualRewardPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewardAddresses",
          "type": "address[]"
        }
      ],
      "name": "getSingleRewardPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsToken",
              "type": "address"
            }
          ],
          "internalType": "struct QuickswapMulticall.QuickswapSingleRewardPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76e05b3285b95ea86f154c5fe8c7966a9d054c8bf2cbd42c9b84bc5e970b1332",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0x18708c90c8a342ADD9a688D7eDCd9aa31D4Cbf99",
    "transactionIndex": 70,
    "gasUsed": "1109633",
    "logsBloom": "0x
    "blockHash": "0x87303821be10119c5b2ca6da897789f20287bf46c6d4f3314c2b343777e61329",
    "transactionHash": "0x76e05b3285b95ea86f154c5fe8c7966a9d054c8bf2cbd42c9b84bc5e970b1332",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 31738738,
        "transactionHash": "0x76e05b3285b95ea86f154c5fe8c7966a9d054c8bf2cbd42c9b84bc5e970b1332",
        "address": "0x18708c90c8a342ADD9a688D7eDCd9aa31D4Cbf99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636"
        ],
        "data": "0x",
        "logIndex": 243,
        "blockHash": "0x87303821be10119c5b2ca6da897789f20287bf46c6d4f3314c2b343777e61329"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 31738738,
        "transactionHash": "0x76e05b3285b95ea86f154c5fe8c7966a9d054c8bf2cbd42c9b84bc5e970b1332",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636",
          "0x0000000000000000000000002a998cc0bb43dc510e523fe33c8f1c04bf607a1e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000c51bebed4afaa10000000000000000000000000000000000000000000000002f977b8454b9ad72000000000000000000000000000000000000000000002a4f477d73f2491e568f0000000000000000000000000000000000000000000000002ed25f98676eb2d1000000000000000000000000000000000000000000002a4f48428fde36695130",
        "logIndex": 244,
        "blockHash": "0x87303821be10119c5b2ca6da897789f20287bf46c6d4f3314c2b343777e61329"
      }
    ],
    "blockNumber": 31738738,
    "cumulativeGasUsed": "12001790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "7019ccae51361351a0493724e6e0ec9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewardAddresses\",\"type\":\"address[]\"}],\"name\":\"getDualRewardPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRateA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsTokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRateB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsTokenB\",\"type\":\"address\"}],\"internalType\":\"struct QuickswapMulticall.QuickswapDualRewardPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewardAddresses\",\"type\":\"address[]\"}],\"name\":\"getSingleRewardPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"}],\"internalType\":\"struct QuickswapMulticall.QuickswapSingleRewardPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/QuickswapMulticall.sol\":\"QuickswapMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/quickswap/IStakingDualRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IStakingDualRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerTokenA() external view returns (uint256);\\n    function rewardPerTokenB() external view returns (uint256);\\n\\n    function earnedA(address account) external view returns (uint256);\\n\\n    function earnedB(address account) external view returns (uint256);\\n   \\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n    \\n    function rewardsTokenA() external view returns(address);\\n\\n    function rewardsTokenB() external view returns(address);\\n\\n    function rewardRateA() external view returns(uint256);\\n\\n    function rewardRateB() external view returns(uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\",\"keccak256\":\"0x1734ff4494ff5814911d646877484354088abbfd69127671ad6b522522c54bde\",\"license\":\"MIT\"},\"contracts/interfaces/quickswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IStakingRewards {\\n  // Views\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function rewardsToken() external view returns (address);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function stakingToken() external view returns (address);\\n\\n  // Mutative\\n\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n}\\n\",\"keccak256\":\"0xebee4bd8c84e68e4b47b8d287e0ce4c1180690b1b032df6132b34d550bb3f7dc\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/QuickswapMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/quickswap/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/quickswap/IStakingDualRewards.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract QuickswapMulticall is Ownable {\\n  struct QuickswapSingleRewardPool {\\n    address poolAddress;\\n    address farmAddress;\\n    uint256 amount0;\\n    address token0;\\n    uint256 amount1;\\n    address token1;\\n    uint256 rewardRate;\\n    address rewardsToken;\\n  }\\n\\n  struct QuickswapDualRewardPool {\\n    address poolAddress;\\n    address farmAddress;\\n    uint256 amount0;\\n    address token0;\\n    uint256 amount1;\\n    address token1;\\n    uint256 rewardRateA;\\n    address rewardsTokenA;\\n    uint256 rewardRateB;\\n    address rewardsTokenB;\\n  }\\n\\n  function getSingleRewardPools(address[] memory stakingRewardAddresses)\\n    external\\n    view\\n    returns (QuickswapSingleRewardPool[] memory pools)\\n  {\\n    uint256 poolCount = stakingRewardAddresses.length;\\n\\n    pools = new QuickswapSingleRewardPool[](poolCount);\\n\\n    for (uint16 index = 0; index < poolCount; index++) {\\n      IStakingRewards stakingRewards = IStakingRewards(\\n        stakingRewardAddresses[index]\\n      );\\n\\n      address pairAddress = stakingRewards.stakingToken();\\n      IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\n      address token0 = pair.token0();\\n      address token1 = pair.token1();\\n\\n      address rewardsToken = stakingRewards.rewardsToken();\\n      uint256 rewardRate = stakingRewards.rewardRate();\\n\\n      pools[index] = QuickswapSingleRewardPool(\\n        pairAddress,\\n        stakingRewardAddresses[index],\\n        reserve0,\\n        token0,\\n        reserve1,\\n        token1,\\n        rewardRate,\\n        rewardsToken\\n      );\\n    }\\n\\n    return pools;\\n  }\\n\\n  function getDualRewardPools(address[] memory stakingRewardAddresses)\\n    external\\n    view\\n    returns (QuickswapDualRewardPool[] memory pools)\\n  {\\n    uint256 poolCount = stakingRewardAddresses.length;\\n\\n    pools = new QuickswapDualRewardPool[](poolCount);\\n\\n    for (uint16 index = 0; index < poolCount; index++) {\\n      IStakingDualRewards stakingRewards = IStakingDualRewards(\\n        stakingRewardAddresses[index]\\n      );\\n\\n      address pairAddress = stakingRewards.stakingToken();\\n      IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      address token0 = pair.token0();\\n      address token1 = pair.token1();\\n\\n      address rewardsTokenA = stakingRewards.rewardsTokenA();\\n      address rewardsTokenB = stakingRewards.rewardsTokenA();\\n      uint256 rewardRateA = stakingRewards.rewardRateA();\\n      uint256 rewardRateB = stakingRewards.rewardRateB();\\n\\n      pools[index] = QuickswapDualRewardPool(\\n        pairAddress,\\n        stakingRewardAddresses[index],\\n        reserve0,\\n        token0,\\n        reserve1,\\n        token1,\\n        rewardRateA,\\n        rewardsTokenA,\\n        rewardRateB,\\n        rewardsTokenB\\n      );\\n    }\\n\\n    return pools;\\n  }\\n}\\n\",\"keccak256\":\"0x0fb7c2f9132256a76a518285676f71cdb3f4dc278feb70bdbdd050bfb0c84824\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a36112c790816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c908163715018a61461007a575080637b0c9ef3146100715780638da5cb5b14610068578063c68943371461005f5763f2fde38b1461005757600080fd5b61000e610e6d565b5061000e6109a1565b5061000e61081e565b5061000e6103b9565b3461011857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610118576100b0610fac565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761016857604052565b61017061011b565b604052565b610140810190811067ffffffffffffffff82111761016857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761016857604052565b604051906101e08261014b565b565b604051906101e082610175565b60209067ffffffffffffffff8111610209575b60051b0190565b61021161011b565b610202565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261000e576004359167ffffffffffffffff831161000e578060238401121561000e57826004013561028b816101ef565b936102996040519586610192565b81855260248486019260051b82010192831161000e57602401905b8282106102c2575050505090565b83809183356102d081610216565b8152019101906102b4565b60208082019080835283518092528060408094019401926000905b83821061030557505050505090565b9091929394836101006001926103ac895173ffffffffffffffffffffffffffffffffffffffff8082511684528086830151168685015287820151888501526060908183015116908401526080808201519084015261038060a0808301519085019073ffffffffffffffffffffffffffffffffffffffff169052565b60c0818101519084015260e09081015173ffffffffffffffffffffffffffffffffffffffff1690830152565b01960194939201906102f6565b503461000e576103c836610234565b80516103d38161102b565b9060005b61ffff81168281101561080c5761042a6104116104116103f78489611113565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040908151907f72f702f30000000000000000000000000000000000000000000000000000000082526020926004908985858481875afa9485156107ff575b6000956107de575b50849573ffffffffffffffffffffffffffffffffffffffff84959616908351937f0902f1ac0000000000000000000000000000000000000000000000000000000085526060918a83878981885afa9586156107d1575b600097889761079b575b508351957f0dfe168100000000000000000000000000000000000000000000000000000000875283878b81845afa96871561078e575b60009761076d575b50839085519a8b80927fd21220a70000000000000000000000000000000000000000000000000000000082525afa988915610760575b600099610741575b5083519a7fd1af0c7d000000000000000000000000000000000000000000000000000000008c52838c8c81845afa9b8c15610734575b60009c610703575b50839085519b8c80927f7b0a47ee0000000000000000000000000000000000000000000000000000000082525afa998a156106f6575b60009a6106c1575b50906105d491611113565b5173ffffffffffffffffffffffffffffffffffffffff16906105f46101d3565b73ffffffffffffffffffffffffffffffffffffffff909b168b5273ffffffffffffffffffffffffffffffffffffffff909116908a01526dffffffffffffffffffffffffffff9485169089015273ffffffffffffffffffffffffffffffffffffffff9091169087015216608085015273ffffffffffffffffffffffffffffffffffffffff1660a084015260c083015273ffffffffffffffffffffffffffffffffffffffff1660e08201526106a78286611113565b526106b29084611113565b506106bc906110d1565b6103d7565b6105d492919a506106e790843d86116106ef575b6106df8183610192565b8101906111cc565b9990916105c9565b503d6106d5565b6106fe61116e565b6105c1565b84919c5061072690823d841161072d575b61071e8183610192565b810190611156565b9b9061058b565b503d610714565b61073c61116e565b610583565b610759919950833d851161072d5761071e8183610192565b973861054d565b61076861116e565b610545565b8491975061078790823d841161072d5761071e8183610192565b969061050f565b61079661116e565b610507565b9096506107bf919750843d86116107ca575b6107b78183610192565b810190611196565b5096909695386104d1565b503d6107ad565b6107d961116e565b6104c7565b839495506107f890873d891161072d5761071e8183610192565b9493610471565b61080761116e565b610469565b6040518061081a86826102db565b0390f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b60208082019080835283518092528060408094019401926000905b83821061089b57505050505090565b90919293948361014060019261099489516108cc83825173ffffffffffffffffffffffffffffffffffffffff169052565b8085015173ffffffffffffffffffffffffffffffffffffffff1683860152808701518388015260608082015173ffffffffffffffffffffffffffffffffffffffff16908401526080818101519084015260a08082015173ffffffffffffffffffffffffffffffffffffffff169084015260c0818101519084015260e08082015173ffffffffffffffffffffffffffffffffffffffff169084015261010081810151908401526101209081015173ffffffffffffffffffffffffffffffffffffffff1690830152565b019601949392019061088c565b503461000e576109b036610234565b80516109bb816111db565b9060005b61ffff811682811015610e5f576109df6104116104116103f78489611113565b8560408051927f72f702f300000000000000000000000000000000000000000000000000000000845260209060049282868581855afa958615610e52575b600096610e31575b5080517f0902f1ac000000000000000000000000000000000000000000000000000000008152849173ffffffffffffffffffffffffffffffffffffffff88166060838581845afa918215610e24575b6000938493610dfc575b50868151927f0dfe168100000000000000000000000000000000000000000000000000000000845281848881845afa938415610def575b600094610dd0575b508251968780927fd21220a70000000000000000000000000000000000000000000000000000000082525afa948515610dc3575b600095610da4575b508051968b7f5fd1020c000000000000000000000000000000000000000000000000000000009a8b8a52828a8c818c5afa998a15610d97575b60009a610d78575b5083519b8c52828c8c818c5afa9b8c15610d6b575b60009c610d4c575b508351987f255cfca3000000000000000000000000000000000000000000000000000000008a52838a8d81845afa998a15610d3f575b60009a610d1e575b50839085519c8d80927fefa1c63c0000000000000000000000000000000000000000000000000000000082525afa9a8b15610d11575b60009b610cec575b5090610bde91611113565b5173ffffffffffffffffffffffffffffffffffffffff1690610bfe6101e2565b73ffffffffffffffffffffffffffffffffffffffff909c168c5273ffffffffffffffffffffffffffffffffffffffff909116908b01526dffffffffffffffffffffffffffff938416908a015273ffffffffffffffffffffffffffffffffffffffff16606089015216608087015273ffffffffffffffffffffffffffffffffffffffff1660a086015260c085015273ffffffffffffffffffffffffffffffffffffffff1660e084015261010083015273ffffffffffffffffffffffffffffffffffffffff16610120820152610cd28286611113565b52610cdd9084611113565b50610ce7906110d1565b6109bf565b610bde92919b50610d0990843d86116106ef576106df8183610192565b9a9091610bd3565b610d1961116e565b610bcb565b84919a50610d3890823d84116106ef576106df8183610192565b9990610b95565b610d4761116e565b610b8d565b610d64919c50833d851161072d5761071e8183610192565b9a38610b57565b610d7361116e565b610b4f565b610d90919a50833d851161072d5761071e8183610192565b9838610b3a565b610d9f61116e565b610b32565b610dbc919550873d891161072d5761071e8183610192565b9338610af9565b610dcb61116e565b610af1565b610de8919450823d841161072d5761071e8183610192565b9238610abd565b610df761116e565b610ab5565b909250610e1991935060603d6060116107ca576107b78183610192565b509290929138610a7e565b610e2c61116e565b610a74565b84919650610e4b90843d861161072d5761071e8183610192565b9590610a25565b610e5a61116e565b610a1d565b6040518061081a8682610871565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ea981610216565b610eb1610fac565b73ffffffffffffffffffffffffffffffffffffffff809116908115610f2857600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff600054163303610fcd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90611035826101ef565b60409061104482519182610192565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061107282956101ef565b019160005b8381106110845750505050565b60209082516110928161014b565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201611077565b61ffff8091169081146110e45760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80518210156111275760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575161116b81610216565b90565b506040513d6000823e3d90fd5b51906dffffffffffffffffffffffffffff8216820361000e57565b9081606091031261000e576111aa8161117b565b9160406111b96020840161117b565b92015163ffffffff8116810361000e5790565b9081602091031261000e575190565b906111e5826101ef565b6040906111f482519182610192565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061122282956101ef565b019160005b8381106112345750505050565b602090825161124281610175565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e08301526000610100830152600061012083015282860101520161122756fea26469706673582212202746b03d0a7072f4775f9f5cf949a08a18c7c640c036d85bb9019a3e0ffea44064736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c908163715018a61461007a575080637b0c9ef3146100715780638da5cb5b14610068578063c68943371461005f5763f2fde38b1461005757600080fd5b61000e610e6d565b5061000e6109a1565b5061000e61081e565b5061000e6103b9565b3461011857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610118576100b0610fac565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761016857604052565b61017061011b565b604052565b610140810190811067ffffffffffffffff82111761016857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761016857604052565b604051906101e08261014b565b565b604051906101e082610175565b60209067ffffffffffffffff8111610209575b60051b0190565b61021161011b565b610202565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261000e576004359167ffffffffffffffff831161000e578060238401121561000e57826004013561028b816101ef565b936102996040519586610192565b81855260248486019260051b82010192831161000e57602401905b8282106102c2575050505090565b83809183356102d081610216565b8152019101906102b4565b60208082019080835283518092528060408094019401926000905b83821061030557505050505090565b9091929394836101006001926103ac895173ffffffffffffffffffffffffffffffffffffffff8082511684528086830151168685015287820151888501526060908183015116908401526080808201519084015261038060a0808301519085019073ffffffffffffffffffffffffffffffffffffffff169052565b60c0818101519084015260e09081015173ffffffffffffffffffffffffffffffffffffffff1690830152565b01960194939201906102f6565b503461000e576103c836610234565b80516103d38161102b565b9060005b61ffff81168281101561080c5761042a6104116104116103f78489611113565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040908151907f72f702f30000000000000000000000000000000000000000000000000000000082526020926004908985858481875afa9485156107ff575b6000956107de575b50849573ffffffffffffffffffffffffffffffffffffffff84959616908351937f0902f1ac0000000000000000000000000000000000000000000000000000000085526060918a83878981885afa9586156107d1575b600097889761079b575b508351957f0dfe168100000000000000000000000000000000000000000000000000000000875283878b81845afa96871561078e575b60009761076d575b50839085519a8b80927fd21220a70000000000000000000000000000000000000000000000000000000082525afa988915610760575b600099610741575b5083519a7fd1af0c7d000000000000000000000000000000000000000000000000000000008c52838c8c81845afa9b8c15610734575b60009c610703575b50839085519b8c80927f7b0a47ee0000000000000000000000000000000000000000000000000000000082525afa998a156106f6575b60009a6106c1575b50906105d491611113565b5173ffffffffffffffffffffffffffffffffffffffff16906105f46101d3565b73ffffffffffffffffffffffffffffffffffffffff909b168b5273ffffffffffffffffffffffffffffffffffffffff909116908a01526dffffffffffffffffffffffffffff9485169089015273ffffffffffffffffffffffffffffffffffffffff9091169087015216608085015273ffffffffffffffffffffffffffffffffffffffff1660a084015260c083015273ffffffffffffffffffffffffffffffffffffffff1660e08201526106a78286611113565b526106b29084611113565b506106bc906110d1565b6103d7565b6105d492919a506106e790843d86116106ef575b6106df8183610192565b8101906111cc565b9990916105c9565b503d6106d5565b6106fe61116e565b6105c1565b84919c5061072690823d841161072d575b61071e8183610192565b810190611156565b9b9061058b565b503d610714565b61073c61116e565b610583565b610759919950833d851161072d5761071e8183610192565b973861054d565b61076861116e565b610545565b8491975061078790823d841161072d5761071e8183610192565b969061050f565b61079661116e565b610507565b9096506107bf919750843d86116107ca575b6107b78183610192565b810190611196565b5096909695386104d1565b503d6107ad565b6107d961116e565b6104c7565b839495506107f890873d891161072d5761071e8183610192565b9493610471565b61080761116e565b610469565b6040518061081a86826102db565b0390f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b60208082019080835283518092528060408094019401926000905b83821061089b57505050505090565b90919293948361014060019261099489516108cc83825173ffffffffffffffffffffffffffffffffffffffff169052565b8085015173ffffffffffffffffffffffffffffffffffffffff1683860152808701518388015260608082015173ffffffffffffffffffffffffffffffffffffffff16908401526080818101519084015260a08082015173ffffffffffffffffffffffffffffffffffffffff169084015260c0818101519084015260e08082015173ffffffffffffffffffffffffffffffffffffffff169084015261010081810151908401526101209081015173ffffffffffffffffffffffffffffffffffffffff1690830152565b019601949392019061088c565b503461000e576109b036610234565b80516109bb816111db565b9060005b61ffff811682811015610e5f576109df6104116104116103f78489611113565b8560408051927f72f702f300000000000000000000000000000000000000000000000000000000845260209060049282868581855afa958615610e52575b600096610e31575b5080517f0902f1ac000000000000000000000000000000000000000000000000000000008152849173ffffffffffffffffffffffffffffffffffffffff88166060838581845afa918215610e24575b6000938493610dfc575b50868151927f0dfe168100000000000000000000000000000000000000000000000000000000845281848881845afa938415610def575b600094610dd0575b508251968780927fd21220a70000000000000000000000000000000000000000000000000000000082525afa948515610dc3575b600095610da4575b508051968b7f5fd1020c000000000000000000000000000000000000000000000000000000009a8b8a52828a8c818c5afa998a15610d97575b60009a610d78575b5083519b8c52828c8c818c5afa9b8c15610d6b575b60009c610d4c575b508351987f255cfca3000000000000000000000000000000000000000000000000000000008a52838a8d81845afa998a15610d3f575b60009a610d1e575b50839085519c8d80927fefa1c63c0000000000000000000000000000000000000000000000000000000082525afa9a8b15610d11575b60009b610cec575b5090610bde91611113565b5173ffffffffffffffffffffffffffffffffffffffff1690610bfe6101e2565b73ffffffffffffffffffffffffffffffffffffffff909c168c5273ffffffffffffffffffffffffffffffffffffffff909116908b01526dffffffffffffffffffffffffffff938416908a015273ffffffffffffffffffffffffffffffffffffffff16606089015216608087015273ffffffffffffffffffffffffffffffffffffffff1660a086015260c085015273ffffffffffffffffffffffffffffffffffffffff1660e084015261010083015273ffffffffffffffffffffffffffffffffffffffff16610120820152610cd28286611113565b52610cdd9084611113565b50610ce7906110d1565b6109bf565b610bde92919b50610d0990843d86116106ef576106df8183610192565b9a9091610bd3565b610d1961116e565b610bcb565b84919a50610d3890823d84116106ef576106df8183610192565b9990610b95565b610d4761116e565b610b8d565b610d64919c50833d851161072d5761071e8183610192565b9a38610b57565b610d7361116e565b610b4f565b610d90919a50833d851161072d5761071e8183610192565b9838610b3a565b610d9f61116e565b610b32565b610dbc919550873d891161072d5761071e8183610192565b9338610af9565b610dcb61116e565b610af1565b610de8919450823d841161072d5761071e8183610192565b9238610abd565b610df761116e565b610ab5565b909250610e1991935060603d6060116107ca576107b78183610192565b509290929138610a7e565b610e2c61116e565b610a74565b84919650610e4b90843d861161072d5761071e8183610192565b9590610a25565b610e5a61116e565b610a1d565b6040518061081a8682610871565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ea981610216565b610eb1610fac565b73ffffffffffffffffffffffffffffffffffffffff809116908115610f2857600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff600054163303610fcd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90611035826101ef565b60409061104482519182610192565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061107282956101ef565b019160005b8381106110845750505050565b60209082516110928161014b565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201611077565b61ffff8091169081146110e45760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80518210156111275760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575161116b81610216565b90565b506040513d6000823e3d90fd5b51906dffffffffffffffffffffffffffff8216820361000e57565b9081606091031261000e576111aa8161117b565b9160406111b96020840161117b565b92015163ffffffff8116810361000e5790565b9081602091031261000e575190565b906111e5826101ef565b6040906111f482519182610192565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061122282956101ef565b019160005b8381106112345750505050565b602090825161124281610175565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e08301526000610100830152600061012083015282860101520161122756fea26469706673582212202746b03d0a7072f4775f9f5cf949a08a18c7c640c036d85bb9019a3e0ffea44064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/QuickswapMulticall.sol:QuickswapMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}