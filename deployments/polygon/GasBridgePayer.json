{
  "address": "0x9FD0DB7b64b69D120E57BdC96e1547830F1aF813",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWormhole",
          "name": "_wormhole",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "GasSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "cashier",
          "type": "bytes32"
        }
      ],
      "name": "SetCashier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "SetPaymentAmount",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "original",
          "type": "bytes32"
        }
      ],
      "name": "addressFromBytes32",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "cashiersByChainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "decodePayload",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "destinationChain",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedVm",
          "type": "bytes"
        }
      ],
      "name": "sendGas",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "cashier",
          "type": "bytes32"
        }
      ],
      "name": "setChainIdCashier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "setPaymentAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "transactionMade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdc3114b3f305ac2708994a97bc39ec0e9aa1a57322c91b0604874207a18be02f",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x9FD0DB7b64b69D120E57BdC96e1547830F1aF813",
    "transactionIndex": 46,
    "gasUsed": "1189172",
    "logsBloom": "0x
    "blockHash": "0x76cc71332fe26d060f859395d93f98233e457631d69d466393182f9a1dda790e",
    "transactionHash": "0xdc3114b3f305ac2708994a97bc39ec0e9aa1a57322c91b0604874207a18be02f",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 30423007,
        "transactionHash": "0xdc3114b3f305ac2708994a97bc39ec0e9aa1a57322c91b0604874207a18be02f",
        "address": "0x9FD0DB7b64b69D120E57BdC96e1547830F1aF813",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 248,
        "blockHash": "0x76cc71332fe26d060f859395d93f98233e457631d69d466393182f9a1dda790e"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 30423007,
        "transactionHash": "0xdc3114b3f305ac2708994a97bc39ec0e9aa1a57322c91b0604874207a18be02f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x0000000000000000000000002a998cc0bb43dc510e523fe33c8f1c04bf607a1e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000fe550c0c99fb000000000000000000000000000000000000000000000000000706ea49fd6a7fe10000000000000000000000000000000000000000000026a7ee7f8e7cffb62fc70000000000000000000000000000000000000000000000000608953df0d084e10000000000000000000000000000000000000000000026a7ef7de3890c502ac7",
        "logIndex": 249,
        "blockHash": "0x76cc71332fe26d060f859395d93f98233e457631d69d466393182f9a1dda790e"
      }
    ],
    "blockNumber": 30423007,
    "cumulativeGasUsed": "10430412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7",
    "100000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "8a3c795a2526ad6f5eb20faf39c0d7d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"_wormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"GasSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cashier\",\"type\":\"bytes32\"}],\"name\":\"SetCashier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"SetPaymentAmount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"original\",\"type\":\"bytes32\"}],\"name\":\"addressFromBytes32\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"cashiersByChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodePayload\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"destinationChain\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"sendGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"cashier\",\"type\":\"bytes32\"}],\"name\":\"setChainIdCashier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"setPaymentAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"transactionMade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transactionMade(bytes32,uint32)\":{\"notice\":\"For each (emitter, nonce), was the transaction already processed?\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/GasBridgePayer.sol\":\"GasBridgePayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridge/GasBridgePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/wormhole/IWormhole.sol\\\";\\n\\n///\\ncontract GasBridgePayer is Ownable {\\n    event GasSent(\\n        address indexed recipient,\\n        uint256 paymentAmount,\\n        bytes32 hash,\\n        uint32 nonce\\n    );\\n    event SetPaymentAmount(uint256 paymentAmount);\\n    event SetCashier(uint16 indexed chainId, bytes32 cashier);\\n\\n    mapping(uint16 => bytes32) public cashiersByChainId;\\n    /// For each (emitter, nonce), was the transaction already processed?\\n    mapping(bytes32 => mapping(uint32 => bool)) public transactionMade;\\n    IWormhole wormhole;\\n    uint256 public paymentAmount;\\n\\n    constructor(IWormhole _wormhole, uint256 _paymentAmount) {\\n        wormhole = _wormhole;\\n        paymentAmount = _paymentAmount;\\n    }\\n\\n    function sendGas(bytes memory encodedVm) external payable {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole\\n            .parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(\\n            cashiersByChainId[vm.emitterChainId] == vm.emitterAddress,\\n            \\\"Invalid emitter\\\"\\n        );\\n\\n        require(\\n            !transactionMade[vm.emitterAddress][vm.nonce],\\n            \\\"Gas already sent\\\"\\n        );\\n        transactionMade[vm.emitterAddress][vm.nonce] = true;\\n\\n        (address recipient, uint16 destinationChain) = decodePayload(\\n            vm.payload\\n        );\\n        require(\\n            destinationChain == wormhole.chainId(),\\n            \\\"Invalid destination chain\\\"\\n        );\\n\\n        (bool sent, ) = recipient.call{value: paymentAmount}(\\\"\\\");\\n        require(sent, \\\"Insufficient balance\\\");\\n\\n        emit GasSent(recipient, paymentAmount, vm.hash, vm.nonce);\\n    }\\n\\n    function decodePayload(bytes memory payload)\\n        public\\n        pure\\n        returns (address recipient, uint16 destinationChain)\\n    {\\n        (bytes32 recipientBytes, uint16 chainId) = abi.decode(\\n            payload,\\n            (bytes32, uint16)\\n        );\\n        recipient = addressFromBytes32(recipientBytes);\\n        destinationChain = chainId;\\n    }\\n\\n    function addressFromBytes32(bytes32 original)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(original)));\\n    }\\n\\n    function setChainIdCashier(uint16 chainId, bytes32 cashier)\\n        external\\n        onlyOwner\\n    {\\n        cashiersByChainId[chainId] = cashier;\\n        emit SetCashier(chainId, cashier);\\n    }\\n\\n    function setPaymentAmount(uint256 _paymentAmount) external onlyOwner {\\n        paymentAmount = _paymentAmount;\\n        emit SetPaymentAmount(_paymentAmount);\\n    }\\n\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0da25d023186f1bf20d22d328b4ece380a255384a952ced76f36d2e61d10a1eb\",\"license\":\"MIT\"},\"contracts/interfaces/wormhole/IWormhole.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IWormhole is Structs {\\n    event LogMessagePublished(\\n        address indexed sender,\\n        uint64 sequence,\\n        uint32 nonce,\\n        bytes payload,\\n        uint8 consistencyLevel\\n    );\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (\\n            Structs.VM memory vm,\\n            bool valid,\\n            string memory reason\\n        );\\n\\n    function verifyVM(Structs.VM memory vm)\\n        external\\n        view\\n        returns (bool valid, string memory reason);\\n\\n    function verifySignatures(\\n        bytes32 hash,\\n        Structs.Signature[] memory signatures,\\n        Structs.GuardianSet memory guardianSet\\n    ) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM)\\n        external\\n        pure\\n        returns (Structs.VM memory vm);\\n\\n    function getGuardianSet(uint32 index)\\n        external\\n        view\\n        returns (Structs.GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf2177dda8dd8a109b4dd8c181657886b1b3267871cd2f78fe9e757678835daf\",\"license\":\"Apache 2\"},\"contracts/interfaces/wormhole/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface Structs {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n    }\\n\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n}\\n\",\"keccak256\":\"0x280a693d4ed71744d067ee7d71fb58fd4ee59f0dceb7ae7e831ece86d01dc03e\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x60803461006c57601f61143738819003918201601f19168301916001600160401b0383118484101761007157808492604094855283398101031261006c5780516001600160a01b038116810361006c57602061005d92015190610087565b60405161135990816100de8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b60005460018060a01b031991338383161760005560018060a01b0391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a31690600354161760035560045556fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806218c4711461010a57806305f6c1a814610101578063197c6e77146100f857806324ae6a27146100ef578063715018a6146100e65780638ccceb4b146100dd5780638da5cb5b146100d4578063b087a1d4146100cb578063c35905c6146100c2578063c5268d3d146100b9578063f0749dba146100b05763f2fde38b0361000e576100ab610b7b565b61000e565b506100ab610ad8565b506100ab610a86565b506100ab610a49565b506100ab610737565b506100ab6106e4565b506100ab61068c565b506100ab6105d8565b506100ab610432565b506100ab6103aa565b506100ab610199565b506100ab610126565b63ffffffff81160361012157565b600080fd5b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602060ff61018d60243561016981610113565b6004356000526002845260406000209063ffffffff16600052602052604060002090565b54166040519015158152f35b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121577fcb616ae3461b7df928f3b1a884bc2086a9438d8fae9335905b4b033be98167ae602060043561021273ffffffffffffffffffffffffffffffffffffffff600054163314610c6b565b80600455604051908152a1005b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761026b57604052565b61027361021f565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761026b57604052565b60405190610160820182811067ffffffffffffffff82111761026b57604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610316575b01160190565b61031e61021f565b610310565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126101215760043567ffffffffffffffff8111610121578160238201121561012157806004013590610379826102da565b926103876040519485610278565b828452602483830101116101215781600092602460209301838601378301015290565b503461012157604061ffff6103c66103c136610323565b61125f565b73ffffffffffffffffffffffffffffffffffffffff849392935193168352166020820152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361012157565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361012157565b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101215761001961046d6103ec565b61054761047861040f565b73ffffffffffffffffffffffffffffffffffffffff9061049d82600054163314610c6b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa9283156105cb575b60009361059c575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561058f575b600092610562575b50506112be565b6105819250803d10610588575b6105798183610278565b8101906112aa565b388061055b565b503d61056f565b61059761102f565b610553565b6105bd919350843d86116105c4575b6105b58183610278565b81019061129b565b91386104ec565b503d6105ab565b6105d361102f565b6104e4565b5034610121576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261067d5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161064f338414610c6b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b61ffff81160361012157565b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101215761ffff6004356106cb81610680565b1660005260016020526020604060002054604051908152f35b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b506107b961074436610323565b61077f61076660035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b604091825180927fc0fd8bde000000000000000000000000000000000000000000000000000000008252818060009788956004830161101e565b03915afa8015610a3c575b8390848591610a10575b6107d992935061103c565b7f98336b511578c6eb94a33220a5edf6997e50982af72c99c807ba0805c566caf573ffffffffffffffffffffffffffffffffffffffff6109766109cf846108f76108cc6108bf896108ae6108a96108a561089e61085261083e60608b015161ffff1690565b61ffff166000526001602052604060002090565b549461086460808b0196875114611086565b61087986516000526002602052604060002090565b99019861088a8a5163ffffffff1690565b63ffffffff16600052602052604060002090565b5460ff1690565b1590565b6110eb565b516000526002602052604060002090565b835163ffffffff1661088a565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b61090460e087015161125f565b6004602061092d61076660039895985473ffffffffffffffffffffffffffffffffffffffff1690565b8b51928380927f9a8a05920000000000000000000000000000000000000000000000000000000082525afa908115610a03575b8b916109d5575b5061ffff809116911614611165565b6109938880806004548b5190885af161098d6111ca565b506111fa565b6109aa610140600454970151915163ffffffff1690565b8751968752602087019190915263ffffffff1660408601529116929081906060820190565b0390a251f35b6109f6915060203d81116109fc575b6109ee8183610278565b810190611150565b38610967565b503d6109e4565b610a0b61102f565b610960565b505050610a316107d9913d8086833e610a298183610278565b810190610ebf565b9192508291906107ce565b610a4461102f565b6107c4565b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121576020600454604051908152f35b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602060405173ffffffffffffffffffffffffffffffffffffffff600435168152f35b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157600435610b1481610680565b7f977771b80a3c4d277af69f597123bbe6cff96cc42c4f64abcd40d30ded04c690602061ffff60243593610b6173ffffffffffffffffffffffffffffffffffffffff600054163314610c6b565b1692836000526001825280604060002055604051908152a2005b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157610bb36103ec565b73ffffffffffffffffffffffffffffffffffffffff610bd781600054163314610c6b565b811615610be75761001990610cd0565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610c7257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b519060ff8216820361012157565b5190610d5882610113565b565b5190610d5882610680565b519067ffffffffffffffff8216820361012157565b918091926000905b828210610d9a575011610d93575050565b6000910152565b91508060209183015181860152018291610d82565b81601f82011215610121578051610dc5816102da565b92610dd36040519485610278565b8184526020828401011161012157610df19160208085019101610d7a565b90565b9080601f830112156101215781519167ffffffffffffffff8311610ea5575b604091825193602091610e2b838360051b0187610278565b818652828087019260071b85010193818511610121578301915b848310610e555750505050505090565b60808383031261012157836080918751610e6e8161024f565b855181528286015183820152610e85898701610d3f565b898201526060610e96818801610d3f565b90820152815201920191610e45565b610ead61021f565b610e13565b5190811515820361012157565b90916060828403126101215781519167ffffffffffffffff928381116101215781016101608186031261012157610ef46102b9565b90610efe81610d3f565b8252610f0c60208201610d4d565b6020830152610f1d60408201610d4d565b6040830152610f2e60608201610d5a565b606083015260808101516080830152610f4960a08201610d65565b60a0830152610f5a60c08201610d3f565b60c083015260e08101518581116101215786610f77918301610daf565b60e0830152610100610f8a818301610d4d565b90830152610120808201518681116101215787610fa8918401610df4565b90830152610140809101519082015293610fc460208301610eb2565b93604083015190811161012157610df19201610daf565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361101781518092818752878088019101610d7a565b0116010190565b906020610df1928181520190610fdb565b506040513d6000823e3d90fd5b156110445750565b611082906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610fdb565b0390fd5b1561108d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420656d697474657200000000000000000000000000000000006044820152fd5b156110f257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f47617320616c72656164792073656e74000000000000000000000000000000006044820152fd5b908160209103126101215751610df181610680565b1561116c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642064657374696e6174696f6e20636861696e000000000000006044820152fd5b3d156111f5573d906111db826102da565b916111e96040519384610278565b82523d6000602084013e565b606090565b1561120157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b906040828051810103126101215773ffffffffffffffffffffffffffffffffffffffff604060208401519301519261129684610680565b169190565b90816020910312610121575190565b9081602091031261012157610df190610eb2565b156112c557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f558346b28924109af0e3b48f0852b98efd59d44eb69bc64fe05a043d51bac8264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806218c4711461010a57806305f6c1a814610101578063197c6e77146100f857806324ae6a27146100ef578063715018a6146100e65780638ccceb4b146100dd5780638da5cb5b146100d4578063b087a1d4146100cb578063c35905c6146100c2578063c5268d3d146100b9578063f0749dba146100b05763f2fde38b0361000e576100ab610b7b565b61000e565b506100ab610ad8565b506100ab610a86565b506100ab610a49565b506100ab610737565b506100ab6106e4565b506100ab61068c565b506100ab6105d8565b506100ab610432565b506100ab6103aa565b506100ab610199565b506100ab610126565b63ffffffff81160361012157565b600080fd5b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602060ff61018d60243561016981610113565b6004356000526002845260406000209063ffffffff16600052602052604060002090565b54166040519015158152f35b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121577fcb616ae3461b7df928f3b1a884bc2086a9438d8fae9335905b4b033be98167ae602060043561021273ffffffffffffffffffffffffffffffffffffffff600054163314610c6b565b80600455604051908152a1005b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761026b57604052565b61027361021f565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761026b57604052565b60405190610160820182811067ffffffffffffffff82111761026b57604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610316575b01160190565b61031e61021f565b610310565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126101215760043567ffffffffffffffff8111610121578160238201121561012157806004013590610379826102da565b926103876040519485610278565b828452602483830101116101215781600092602460209301838601378301015290565b503461012157604061ffff6103c66103c136610323565b61125f565b73ffffffffffffffffffffffffffffffffffffffff849392935193168352166020820152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361012157565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361012157565b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101215761001961046d6103ec565b61054761047861040f565b73ffffffffffffffffffffffffffffffffffffffff9061049d82600054163314610c6b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa9283156105cb575b60009361059c575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561058f575b600092610562575b50506112be565b6105819250803d10610588575b6105798183610278565b8101906112aa565b388061055b565b503d61056f565b61059761102f565b610553565b6105bd919350843d86116105c4575b6105b58183610278565b81019061129b565b91386104ec565b503d6105ab565b6105d361102f565b6104e4565b5034610121576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261067d5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161064f338414610c6b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b61ffff81160361012157565b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101215761ffff6004356106cb81610680565b1660005260016020526020604060002054604051908152f35b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b506107b961074436610323565b61077f61076660035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b604091825180927fc0fd8bde000000000000000000000000000000000000000000000000000000008252818060009788956004830161101e565b03915afa8015610a3c575b8390848591610a10575b6107d992935061103c565b7f98336b511578c6eb94a33220a5edf6997e50982af72c99c807ba0805c566caf573ffffffffffffffffffffffffffffffffffffffff6109766109cf846108f76108cc6108bf896108ae6108a96108a561089e61085261083e60608b015161ffff1690565b61ffff166000526001602052604060002090565b549461086460808b0196875114611086565b61087986516000526002602052604060002090565b99019861088a8a5163ffffffff1690565b63ffffffff16600052602052604060002090565b5460ff1690565b1590565b6110eb565b516000526002602052604060002090565b835163ffffffff1661088a565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b61090460e087015161125f565b6004602061092d61076660039895985473ffffffffffffffffffffffffffffffffffffffff1690565b8b51928380927f9a8a05920000000000000000000000000000000000000000000000000000000082525afa908115610a03575b8b916109d5575b5061ffff809116911614611165565b6109938880806004548b5190885af161098d6111ca565b506111fa565b6109aa610140600454970151915163ffffffff1690565b8751968752602087019190915263ffffffff1660408601529116929081906060820190565b0390a251f35b6109f6915060203d81116109fc575b6109ee8183610278565b810190611150565b38610967565b503d6109e4565b610a0b61102f565b610960565b505050610a316107d9913d8086833e610a298183610278565b810190610ebf565b9192508291906107ce565b610a4461102f565b6107c4565b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121576020600454604051908152f35b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157602060405173ffffffffffffffffffffffffffffffffffffffff600435168152f35b50346101215760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157600435610b1481610680565b7f977771b80a3c4d277af69f597123bbe6cff96cc42c4f64abcd40d30ded04c690602061ffff60243593610b6173ffffffffffffffffffffffffffffffffffffffff600054163314610c6b565b1692836000526001825280604060002055604051908152a2005b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012157610bb36103ec565b73ffffffffffffffffffffffffffffffffffffffff610bd781600054163314610c6b565b811615610be75761001990610cd0565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610c7257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b519060ff8216820361012157565b5190610d5882610113565b565b5190610d5882610680565b519067ffffffffffffffff8216820361012157565b918091926000905b828210610d9a575011610d93575050565b6000910152565b91508060209183015181860152018291610d82565b81601f82011215610121578051610dc5816102da565b92610dd36040519485610278565b8184526020828401011161012157610df19160208085019101610d7a565b90565b9080601f830112156101215781519167ffffffffffffffff8311610ea5575b604091825193602091610e2b838360051b0187610278565b818652828087019260071b85010193818511610121578301915b848310610e555750505050505090565b60808383031261012157836080918751610e6e8161024f565b855181528286015183820152610e85898701610d3f565b898201526060610e96818801610d3f565b90820152815201920191610e45565b610ead61021f565b610e13565b5190811515820361012157565b90916060828403126101215781519167ffffffffffffffff928381116101215781016101608186031261012157610ef46102b9565b90610efe81610d3f565b8252610f0c60208201610d4d565b6020830152610f1d60408201610d4d565b6040830152610f2e60608201610d5a565b606083015260808101516080830152610f4960a08201610d65565b60a0830152610f5a60c08201610d3f565b60c083015260e08101518581116101215786610f77918301610daf565b60e0830152610100610f8a818301610d4d565b90830152610120808201518681116101215787610fa8918401610df4565b90830152610140809101519082015293610fc460208301610eb2565b93604083015190811161012157610df19201610daf565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361101781518092818752878088019101610d7a565b0116010190565b906020610df1928181520190610fdb565b506040513d6000823e3d90fd5b156110445750565b611082906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610fdb565b0390fd5b1561108d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420656d697474657200000000000000000000000000000000006044820152fd5b156110f257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f47617320616c72656164792073656e74000000000000000000000000000000006044820152fd5b908160209103126101215751610df181610680565b1561116c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642064657374696e6174696f6e20636861696e000000000000006044820152fd5b3d156111f5573d906111db826102da565b916111e96040519384610278565b82523d6000602084013e565b606090565b1561120157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b906040828051810103126101215773ffffffffffffffffffffffffffffffffffffffff604060208401519301519261129684610680565b169190565b90816020910312610121575190565b9081602091031261012157610df190610eb2565b156112c557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f558346b28924109af0e3b48f0852b98efd59d44eb69bc64fe05a043d51bac8264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transactionMade(bytes32,uint32)": {
        "notice": "For each (emitter, nonce), was the transaction already processed?"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/bridge/GasBridgePayer.sol:GasBridgePayer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3132,
        "contract": "contracts/bridge/GasBridgePayer.sol:GasBridgePayer",
        "label": "cashiersByChainId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes32)"
      },
      {
        "astId": 3139,
        "contract": "contracts/bridge/GasBridgePayer.sol:GasBridgePayer",
        "label": "transactionMade",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint32,t_bool))"
      },
      {
        "astId": 3142,
        "contract": "contracts/bridge/GasBridgePayer.sol:GasBridgePayer",
        "label": "wormhole",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWormhole)6880"
      },
      {
        "astId": 3144,
        "contract": "contracts/bridge/GasBridgePayer.sol:GasBridgePayer",
        "label": "paymentAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IWormhole)6880": {
        "encoding": "inplace",
        "label": "contract IWormhole",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_bool)"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}