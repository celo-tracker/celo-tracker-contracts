{
  "address": "0xB5c8012e2b0E1680ac382041946544C33Cf385e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6ebc7fe40766951daf385193baeb55308edd71c4755d8b86d12418322d48c4e",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xB5c8012e2b0E1680ac382041946544C33Cf385e5",
    "transactionIndex": 35,
    "gasUsed": "333234",
    "logsBloom": "0x
    "blockHash": "0xd66a3b641c203e4ca12f11313310e188c772015eb48cea0b781eb6bda0b04c87",
    "transactionHash": "0xa6ebc7fe40766951daf385193baeb55308edd71c4755d8b86d12418322d48c4e",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 34590665,
        "transactionHash": "0xa6ebc7fe40766951daf385193baeb55308edd71c4755d8b86d12418322d48c4e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b1a4981f5aaaec00000000000000000000000000000000000000000000000062835fbda0812704000000000000000000000000000000000000000000002ff2db37f63705c2418d00000000000000000000000000000000000000000000000061d1bb2581267c18000000000000000000000000000000000000000000002ff2dbe99acf251cec79",
        "logIndex": 118,
        "blockHash": "0xd66a3b641c203e4ca12f11313310e188c772015eb48cea0b781eb6bda0b04c87"
      }
    ],
    "blockNumber": 34590665,
    "cumulativeGasUsed": "4534596",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "10b882975d7be40a2d5a463185fe5857",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/tokenPrices/CurveBasePoolQuoter.sol\":\"CurveBasePoolQuoter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/multicall/tokenPrices/CurveBasePoolQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./Quoter.sol\\\";\\n\\ninterface BasePool {\\n    function coins(uint256 index) external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\\ninterface BasePool2 {\\n    function coins(uint256 index) external view returns (address);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\\ncontract CurveBasePoolQuoter is Quoter {\\n    function getQuote(\\n        address from,\\n        address to,\\n        uint256 amountIn,\\n        bytes memory data\\n    ) external view returns (uint256) {\\n        address poolAddress;\\n        assembly {\\n            poolAddress := mload(add(data, 20))\\n        }\\n\\n        BasePool basePool = BasePool(poolAddress);\\n\\n        (uint128 i, uint128 j) = findIndexes(basePool, from, to);\\n        try basePool.get_dy(int128(i), int128(j), amountIn) returns (\\n            uint256 quote\\n        ) {\\n            return quote;\\n        } catch {\\n            return BasePool2(poolAddress).get_dy(i, j, amountIn);\\n        }\\n    }\\n\\n    function findIndexes(\\n        BasePool basePool,\\n        address t0,\\n        address t1\\n    ) internal view returns (uint128 i, uint128 j) {\\n        i = j = 100;\\n\\n        for (uint16 x = 0; x <= 3; x++) {\\n            address token = basePool.coins(x);\\n            if (t0 == token) {\\n                i = x;\\n            } else if (t1 == token) {\\n                j = x;\\n            }\\n            if (i != 100 && j != 100) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39cbaa30106a05c886a7bfd4cb36e83cb9d8a6751bf23d84054c65e5b5781189\",\"license\":\"MIT\"},\"contracts/multicall/tokenPrices/Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface Quoter {\\n    function getQuote(\\n        address from,\\n        address to,\\n        uint256 amountIn,\\n        bytes calldata data\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdc5db2309094f2fdb997460bfb383893b9d408b8cca8fe4db527bc9bea5fc914\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610517908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c631cc47f0e146100295750600080fd5b3461012e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012e5760043561006481610131565b6024359061007182610131565b6064359167ffffffffffffffff80841161012a573660238501121561012a57836004013590811161011d575b604051936100d360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160186610184565b8185523660248383010111610119579460208261010596959493602461011599018388013785010152604435916101ee565b6040519081529081906020820190565b0390f35b8580fd5b610125610154565b61009d565b8480fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361014f57565b600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101c557604052565b6101cd610154565b604052565b9081602091031261014f575190565b506040513d6000823e3d90fd5b929073ffffffffffffffffffffffffffffffffffffffff60146102159301511693846103a8565b6040517f5e0d443f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff838116600f90810b6004840152908316900b60248201526044810184905260209492908581606481875afa60009181610332575b5061032957506040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529116602482015260448101929092528290829060649082905afa91821561031c575b6000926102f357505090565b6103129250803d10610315575b61030a8183610184565b8101906101d2565b90565b503d610300565b6103246101e1565b6102e7565b94505050505090565b61034a919250873d89116103155761030a8183610184565b9038610280565b61ffff8091169081146103645760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9081602091031261014f575161031281610131565b606491906000908190845b61ffff841690600382116104d6576040517fc661065700000000000000000000000000000000000000000000000000000000815261ffff8616600482015273ffffffffffffffffffffffffffffffffffffffff90819060209081816024818a87165afa9182156104c9575b889261049c575b50501690878116820361048257505050925b6fffffffffffffffffffffffffffffffff606481861614159081610474575b5061046a5761046490610351565b926103b3565b5050509391925050565b606491508716141538610456565b89969392961614610494575b50610437565b95503861048e565b6104bb9250803d106104c2575b6104b38183610184565b810190610393565b3880610425565b503d6104a9565b6104d16101e1565b61041e565b97959650505050505056fea2646970667358221220217369018bfccad4191053991022ae6d0e2ae44108b24718ce52f3be4a9aac4f64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c631cc47f0e146100295750600080fd5b3461012e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012e5760043561006481610131565b6024359061007182610131565b6064359167ffffffffffffffff80841161012a573660238501121561012a57836004013590811161011d575b604051936100d360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160186610184565b8185523660248383010111610119579460208261010596959493602461011599018388013785010152604435916101ee565b6040519081529081906020820190565b0390f35b8580fd5b610125610154565b61009d565b8480fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361014f57565b600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101c557604052565b6101cd610154565b604052565b9081602091031261014f575190565b506040513d6000823e3d90fd5b929073ffffffffffffffffffffffffffffffffffffffff60146102159301511693846103a8565b6040517f5e0d443f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff838116600f90810b6004840152908316900b60248201526044810184905260209492908581606481875afa60009181610332575b5061032957506040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529116602482015260448101929092528290829060649082905afa91821561031c575b6000926102f357505090565b6103129250803d10610315575b61030a8183610184565b8101906101d2565b90565b503d610300565b6103246101e1565b6102e7565b94505050505090565b61034a919250873d89116103155761030a8183610184565b9038610280565b61ffff8091169081146103645760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9081602091031261014f575161031281610131565b606491906000908190845b61ffff841690600382116104d6576040517fc661065700000000000000000000000000000000000000000000000000000000815261ffff8616600482015273ffffffffffffffffffffffffffffffffffffffff90819060209081816024818a87165afa9182156104c9575b889261049c575b50501690878116820361048257505050925b6fffffffffffffffffffffffffffffffff606481861614159081610474575b5061046a5761046490610351565b926103b3565b5050509391925050565b606491508716141538610456565b89969392961614610494575b50610437565b95503861048e565b6104bb9250803d106104c2575b6104b38183610184565b810190610393565b3880610425565b503d6104a9565b6104d16101e1565b61041e565b97959650505050505056fea2646970667358221220217369018bfccad4191053991022ae6d0e2ae44108b24718ce52f3be4a9aac4f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}