{
  "address": "0xDbb5fE606db4240ce75D280c18d74536369543DB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02253ef9f0bda57a25f738d4503c4398416c26746c6f2885a1a1735a674b9c92",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xDbb5fE606db4240ce75D280c18d74536369543DB",
    "transactionIndex": 8,
    "gasUsed": "104609",
    "logsBloom": "0x
    "blockHash": "0xbd9fa97952833e41884045a12c8749438faceefc7fc938450d5e9d9bd909a3df",
    "transactionHash": "0x02253ef9f0bda57a25f738d4503c4398416c26746c6f2885a1a1735a674b9c92",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 31134265,
        "transactionHash": "0x02253ef9f0bda57a25f738d4503c4398416c26746c6f2885a1a1735a674b9c92",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x000000000000000000000000b95d435df3f8b2a8d8b9c2b7c8766c9ae6ed8cc9"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001414757d15a8bc0000000000000000000000000000000000000000000000007a79533f14b4564f000000000000000000000000000000000000000000003ee224395bae082d22b60000000000000000000000000000000000000000000000007a653ec9979ead93000000000000000000000000000000000000000000003ee2244d70238542cb72",
        "logIndex": 30,
        "blockHash": "0xbd9fa97952833e41884045a12c8749438faceefc7fc938450d5e9d9bd909a3df"
      }
    ],
    "blockNumber": 31134265,
    "cumulativeGasUsed": "2157700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48b735005414ad105911279df2f3e452",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/defi/EmptyRewarder.sol\":\"EmptyRewarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/defi/EmptyRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\ncontract EmptyRewarder is IRewarder {\\n\\n    function onReward(\\n        address user,\\n        address token0,\\n        address token1,\\n        uint256 token0Amount,\\n        uint256 token1Amount,\\n        uint256 percentMin\\n    ) external override {}\\n}\\n\",\"keccak256\":\"0x3c7d0f780d52dbea3a474385fed903d259849c39649d4077b749a1da3bda271e\",\"license\":\"MIT\"},\"contracts/defi/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  function onReward(\\n    address user,\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7b6e3e4ec270b17e4ee80ba24054eef5b0e599c9d88a3b402b50a5ae5e717127\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100155760ed908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63aa906c0b1460295750600080fd5b3460885760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260885773ffffffffffffffffffffffffffffffffffffffff60043581811603608c576024359081160360885760856090565b50f35b5080fd5b8280fd5b6044359073ffffffffffffffffffffffffffffffffffffffff8216820360b257565b600080fdfea264697066735822122016211c58ab4f7397029ae9e140ba8a4c7f90544720a315fd07b734b660a6007764736f6c634300080d0033",
  "deployedBytecode": "0x6080806040526004361015601257600080fd5b600090813560e01c63aa906c0b1460295750600080fd5b3460885760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260885773ffffffffffffffffffffffffffffffffffffffff60043581811603608c576024359081160360885760856090565b50f35b5080fd5b8280fd5b6044359073ffffffffffffffffffffffffffffffffffffffff8216820360b257565b600080fdfea264697066735822122016211c58ab4f7397029ae9e140ba8a4c7f90544720a315fd07b734b660a6007764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}