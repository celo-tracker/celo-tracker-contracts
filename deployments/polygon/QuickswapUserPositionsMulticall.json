{
  "address": "0x32D0f038067D0Eb1116Bb7113590258548Cd4307",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewardAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getDualRewardPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsTokenA",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountA",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsTokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountB",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuickswapUserPositionsMulticall.QuickswapDualRewardPosition[]",
          "name": "positions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewardAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSingleRewardPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardsToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuickswapUserPositionsMulticall.QuickswapSingleRewardPosition[]",
          "name": "positions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e4d5fcdf6b8927f6b5b07aa6387d3f8f7727fdb9796fd76fbb62c9f25d531a3",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0x32D0f038067D0Eb1116Bb7113590258548Cd4307",
    "transactionIndex": 16,
    "gasUsed": "1010115",
    "logsBloom": "0x
    "blockHash": "0x707e17dc67c081d4932a9c39996ef89b7306b3ce4eac3e697b4e8c73657c0cff",
    "transactionHash": "0x6e4d5fcdf6b8927f6b5b07aa6387d3f8f7727fdb9796fd76fbb62c9f25d531a3",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 31743290,
        "transactionHash": "0x6e4d5fcdf6b8927f6b5b07aa6387d3f8f7727fdb9796fd76fbb62c9f25d531a3",
        "address": "0x32D0f038067D0Eb1116Bb7113590258548Cd4307",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x707e17dc67c081d4932a9c39996ef89b7306b3ce4eac3e697b4e8c73657c0cff"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 31743290,
        "transactionHash": "0x6e4d5fcdf6b8927f6b5b07aa6387d3f8f7727fdb9796fd76fbb62c9f25d531a3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000aa506863020ded0000000000000000000000000000000000000000000000002ed25cd963b4028300000000000000000000000000000000000000000000001844a8ae2ff4ddb5890000000000000000000000000000000000000000000000002e280c7100b1f4960000000000000000000000000000000000000000000000184552fe9857dfc376",
        "logIndex": 64,
        "blockHash": "0x707e17dc67c081d4932a9c39996ef89b7306b3ce4eac3e697b4e8c73657c0cff"
      }
    ],
    "blockNumber": 31743290,
    "cumulativeGasUsed": "3929272",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d70b398898011f75b8055095e0063ef2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDualRewardPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsTokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsTokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountB\",\"type\":\"uint256\"}],\"internalType\":\"struct QuickswapUserPositionsMulticall.QuickswapDualRewardPosition[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSingleRewardPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuickswapUserPositionsMulticall.QuickswapSingleRewardPosition[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/QuickswapUserPositionsMulticall.sol\":\"QuickswapUserPositionsMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/quickswap/IStakingDualRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IStakingDualRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerTokenA() external view returns (uint256);\\n    function rewardPerTokenB() external view returns (uint256);\\n\\n    function earnedA(address account) external view returns (uint256);\\n\\n    function earnedB(address account) external view returns (uint256);\\n   \\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n    \\n    function rewardsTokenA() external view returns(address);\\n\\n    function rewardsTokenB() external view returns(address);\\n\\n    function rewardRateA() external view returns(uint256);\\n\\n    function rewardRateB() external view returns(uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\",\"keccak256\":\"0x1734ff4494ff5814911d646877484354088abbfd69127671ad6b522522c54bde\",\"license\":\"MIT\"},\"contracts/interfaces/quickswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IStakingRewards {\\n  // Views\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function rewardsToken() external view returns (address);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function stakingToken() external view returns (address);\\n\\n  // Mutative\\n\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n}\\n\",\"keccak256\":\"0xebee4bd8c84e68e4b47b8d287e0ce4c1180690b1b032df6132b34d550bb3f7dc\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/QuickswapUserPositionsMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/quickswap/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/quickswap/IStakingDualRewards.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract QuickswapUserPositionsMulticall is Ownable {\\n\\n  struct QuickswapSingleRewardPosition {\\n    address poolAddress;\\n    uint256 share;\\n    address rewardsToken;\\n    uint256 rewardAmount;\\n  }\\n\\n  struct QuickswapDualRewardPosition {\\n    address poolAddress;\\n    uint256 share;\\n    address rewardsTokenA;\\n    uint256 rewardAmountA;\\n    address rewardsTokenB;\\n    uint256 rewardAmountB;\\n  }\\n\\n  function getSingleRewardPositions(\\n    address[] memory stakingRewardAddresses,\\n    address owner\\n  ) external view returns (QuickswapSingleRewardPosition[] memory positions) {\\n    uint256 poolCount = stakingRewardAddresses.length;\\n\\n    positions = new QuickswapSingleRewardPosition[](poolCount);\\n\\n    for (uint16 index = 0; index < poolCount; index++) {\\n      IStakingRewards stakingRewards = IStakingRewards(\\n        stakingRewardAddresses[index]\\n      );\\n\\n      uint256 own = stakingRewards.balanceOf(owner);\\n      if (own == 0) {\\n        continue;\\n      }\\n      uint256 totalSupply = stakingRewards.totalSupply();\\n      uint256 share = (own * 10**18) / totalSupply;\\n\\n      address rewardsToken = stakingRewards.rewardsToken();\\n      uint256 earnedRewards = stakingRewards.earned(owner);\\n\\n      positions[index] = QuickswapSingleRewardPosition(\\n        stakingRewards.stakingToken(),\\n        share,\\n        rewardsToken,\\n        earnedRewards\\n      );\\n    }\\n\\n    return positions;\\n  }\\n\\n  function getDualRewardPositions(\\n    address[] memory stakingRewardAddresses,\\n    address owner\\n  ) external view returns (QuickswapDualRewardPosition[] memory positions) {\\n    uint256 poolCount = stakingRewardAddresses.length;\\n\\n    positions = new QuickswapDualRewardPosition[](poolCount);\\n\\n    for (uint16 index = 0; index < poolCount; index++) {\\n      IStakingDualRewards stakingRewards = IStakingDualRewards(\\n        stakingRewardAddresses[index]\\n      );\\n\\n      uint256 own = stakingRewards.balanceOf(owner);\\n      if (own == 0) {\\n        continue;\\n      }\\n      uint256 totalSupply = stakingRewards.totalSupply();\\n      uint256 share = (own * 10**18) / totalSupply;\\n\\n      address rewardsTokenA = stakingRewards.rewardsTokenA();\\n      uint256 earnedA = stakingRewards.earnedA(owner);\\n      address rewardsTokenB = stakingRewards.rewardsTokenB();\\n      uint256 earnedB = stakingRewards.earnedB(owner);\\n\\n      positions[index] = QuickswapDualRewardPosition(\\n        stakingRewards.stakingToken(),\\n        share,\\n        rewardsTokenA,\\n        earnedA,\\n        rewardsTokenB,\\n        earnedB\\n      );\\n    }\\n\\n    return positions;\\n  }\\n}\\n\",\"keccak256\":\"0x29548f3f6ba92b82dc04756e1cec60e2fa26e00679b8172e0f9ab56e363d37e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a36110fa90816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c908163715018a61461007a575080638da5cb5b14610071578063977b8c32146100685780639ccef8861461005f5763f2fde38b1461005757600080fd5b61000e610c64565b5061000e610926565b5061000e6103c2565b5061000e61011b565b3461011857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610118576100b0610da3565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101df57604052565b6101e761016e565b604052565b6040519060c0820182811067ffffffffffffffff8211176101df57604052565b604051906080820182811067ffffffffffffffff8211176101df57604052565b60209067ffffffffffffffff8111610246575b60051b0190565b61024e61016e565b61023f565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6024359061027e82610253565b565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261000e5760043567ffffffffffffffff811161000e578160238201121561000e578060040135916102d68361022c565b926102e4604051948561019e565b80845260209260248486019260051b82010192831161000e57602401905b828210610319575050505090610316610271565b90565b838091833561032781610253565b815201910190610302565b60208082019080835283518092528060408094019401926000905b83821061035c57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0908101519087015260c0909501949382019360019091019061034d565b503461000e576103d136610280565b908051916103de8361100e565b9260005b61ffff81168281101561089c57908161043a610421610421610407610723968a610f1a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b906040918251907f70a08231000000000000000000000000000000000000000000000000000000008252602091886004928483806104978588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa92831561088f575b600093610870575b508215610864578661050a6106409461071d9951907f18160ddd00000000000000000000000000000000000000000000000000000000825288828981885afa918215610857575b600092610834575b5061050590610f79565b610fc0565b908051917f5fd1020c00000000000000000000000000000000000000000000000000000000835287838881875afa928315610827575b600093610808575b50878251947f1820d73900000000000000000000000000000000000000000000000000000000865281868061059c8a8d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa9586156107fb575b6000966107dc575b508351967f88c4c66600000000000000000000000000000000000000000000000000000000885282888b81855afa9788156107cf575b6000986107ae575b5082908551809a81927f60fb36260000000000000000000000000000000000000000000000000000000083528d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa9788156107a1575b600098610772575b508351988980927f72f702f30000000000000000000000000000000000000000000000000000000082525afa968715610765575b600097610728575b50906106e592916107079697986106c56106a96101ec565b73ffffffffffffffffffffffffffffffffffffffff909b168b52565b89015287019073ffffffffffffffffffffffffffffffffffffffff169052565b606085015273ffffffffffffffffffffffffffffffffffffffff166080840152565b60a0820152610716828a610f1a565b5287610f1a565b50610efa565b6103e2565b610707969750906107536106e59493928a3d8c1161075e575b61074b818361019e565b810190610ff9565b979650909192610691565b503d610741565b61076d610f6c565b610689565b610793919850823d841161079a575b61078b818361019e565b810190610f5d565b9638610655565b503d610781565b6107a9610f6c565b61064d565b839198506107c890823d841161075e5761074b818361019e565b97906105ef565b6107d7610f6c565b6105e7565b6107f4919650823d841161079a5761078b818361019e565b94386105b1565b610803610f6c565b6105a9565b610820919350883d8a1161075e5761074b818361019e565b9138610548565b61082f610f6c565b610540565b610505919250610850908a3d8c1161079a5761078b818361019e565b91906104fb565b61085f610f6c565b6104f3565b50505050505050610efa565b610888919350853d871161079a5761078b818361019e565b91386104ac565b610897610f6c565b6104a4565b604051806108aa8882610332565b0390f35b60208082019080835283518092528060408094019401926000905b8382106108d857505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151168783015260609081015190870152608090950194938201936001909101906108c9565b503461000e5761093536610280565b9080519161094283610e22565b9260005b61ffff811682811015610c5657908161096b610421610421610407610b67968a610f1a565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048083019190915291939260209291908382602481845afa918215610c49575b600092610c2a575b508115610c1f5785610a2a610ab99361071d9851907f18160ddd00000000000000000000000000000000000000000000000000000000825287828881885afa918215610c12575b600092610bf6575061050590610f79565b858251937fd1af0c7d0000000000000000000000000000000000000000000000000000000085528d82868981855afa958615610be9575b600096610bc8575b5082908551809881927e8cc2620000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615610bbb575b600096610b9c575b508351968780927f72f702f30000000000000000000000000000000000000000000000000000000082525afa948515610b8f575b600095610b6c575b50610b58939495610b38610b1c61020c565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86015284019073ffffffffffffffffffffffffffffffffffffffff169052565b6060820152610716828a610f1a565b610946565b610b58949550610b8890873d891161075e5761074b818361019e565b9493610b0a565b610b97610f6c565b610b02565b610bb4919650823d841161079a5761078b818361019e565b9438610ace565b610bc3610f6c565b610ac6565b83919650610be290823d841161075e5761074b818361019e565b9590610a69565b610bf1610f6c565b610a61565b61050591925061085090893d8b1161079a5761078b818361019e565b610c1a610f6c565b610a19565b505050505050610efa565b610c42919250843d861161079a5761078b818361019e565b90386109d2565b610c51610f6c565b6109ca565b604051806108aa88826108ae565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ca081610253565b610ca8610da3565b73ffffffffffffffffffffffffffffffffffffffff809116908115610d1f57600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff600054163303610dc457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610e2c8261022c565b604090610e3b8251918261019e565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610e69829561022c565b019160005b838110610e7b5750505050565b60209082516080810181811067ffffffffffffffff821117610ebd575b8452600081528260008183015260008583015260006060830152828601015201610e6e565b610ec561016e565b610e98565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610f0e570190565b610f16610eca565b0190565b8051821015610f2e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610fb4570290565b610fbc610eca565b0290565b8115610fca570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9081602091031261000e575161031681610253565b906110188261022c565b6040906110278251918261019e565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611055829561022c565b019160005b8381106110675750505050565b602090825160c0810181811067ffffffffffffffff8211176110b7575b845260008152826000818301526000858301526000606083015260006080830152600060a083015282860101520161105a565b6110bf61016e565b61108456fea264697066735822122000b7ba1f939e36a8587850cbd49d9999dffaae369792ec63b7c4b68a921eb58864736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c908163715018a61461007a575080638da5cb5b14610071578063977b8c32146100685780639ccef8861461005f5763f2fde38b1461005757600080fd5b61000e610c64565b5061000e610926565b5061000e6103c2565b5061000e61011b565b3461011857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610118576100b0610da3565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101df57604052565b6101e761016e565b604052565b6040519060c0820182811067ffffffffffffffff8211176101df57604052565b604051906080820182811067ffffffffffffffff8211176101df57604052565b60209067ffffffffffffffff8111610246575b60051b0190565b61024e61016e565b61023f565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6024359061027e82610253565b565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261000e5760043567ffffffffffffffff811161000e578160238201121561000e578060040135916102d68361022c565b926102e4604051948561019e565b80845260209260248486019260051b82010192831161000e57602401905b828210610319575050505090610316610271565b90565b838091833561032781610253565b815201910190610302565b60208082019080835283518092528060408094019401926000905b83821061035c57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0908101519087015260c0909501949382019360019091019061034d565b503461000e576103d136610280565b908051916103de8361100e565b9260005b61ffff81168281101561089c57908161043a610421610421610407610723968a610f1a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b906040918251907f70a08231000000000000000000000000000000000000000000000000000000008252602091886004928483806104978588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa92831561088f575b600093610870575b508215610864578661050a6106409461071d9951907f18160ddd00000000000000000000000000000000000000000000000000000000825288828981885afa918215610857575b600092610834575b5061050590610f79565b610fc0565b908051917f5fd1020c00000000000000000000000000000000000000000000000000000000835287838881875afa928315610827575b600093610808575b50878251947f1820d73900000000000000000000000000000000000000000000000000000000865281868061059c8a8d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa9586156107fb575b6000966107dc575b508351967f88c4c66600000000000000000000000000000000000000000000000000000000885282888b81855afa9788156107cf575b6000986107ae575b5082908551809a81927f60fb36260000000000000000000000000000000000000000000000000000000083528d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa9788156107a1575b600098610772575b508351988980927f72f702f30000000000000000000000000000000000000000000000000000000082525afa968715610765575b600097610728575b50906106e592916107079697986106c56106a96101ec565b73ffffffffffffffffffffffffffffffffffffffff909b168b52565b89015287019073ffffffffffffffffffffffffffffffffffffffff169052565b606085015273ffffffffffffffffffffffffffffffffffffffff166080840152565b60a0820152610716828a610f1a565b5287610f1a565b50610efa565b6103e2565b610707969750906107536106e59493928a3d8c1161075e575b61074b818361019e565b810190610ff9565b979650909192610691565b503d610741565b61076d610f6c565b610689565b610793919850823d841161079a575b61078b818361019e565b810190610f5d565b9638610655565b503d610781565b6107a9610f6c565b61064d565b839198506107c890823d841161075e5761074b818361019e565b97906105ef565b6107d7610f6c565b6105e7565b6107f4919650823d841161079a5761078b818361019e565b94386105b1565b610803610f6c565b6105a9565b610820919350883d8a1161075e5761074b818361019e565b9138610548565b61082f610f6c565b610540565b610505919250610850908a3d8c1161079a5761078b818361019e565b91906104fb565b61085f610f6c565b6104f3565b50505050505050610efa565b610888919350853d871161079a5761078b818361019e565b91386104ac565b610897610f6c565b6104a4565b604051806108aa8882610332565b0390f35b60208082019080835283518092528060408094019401926000905b8382106108d857505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151168783015260609081015190870152608090950194938201936001909101906108c9565b503461000e5761093536610280565b9080519161094283610e22565b9260005b61ffff811682811015610c5657908161096b610421610421610407610b67968a610f1a565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048083019190915291939260209291908382602481845afa918215610c49575b600092610c2a575b508115610c1f5785610a2a610ab99361071d9851907f18160ddd00000000000000000000000000000000000000000000000000000000825287828881885afa918215610c12575b600092610bf6575061050590610f79565b858251937fd1af0c7d0000000000000000000000000000000000000000000000000000000085528d82868981855afa958615610be9575b600096610bc8575b5082908551809881927e8cc2620000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615610bbb575b600096610b9c575b508351968780927f72f702f30000000000000000000000000000000000000000000000000000000082525afa948515610b8f575b600095610b6c575b50610b58939495610b38610b1c61020c565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86015284019073ffffffffffffffffffffffffffffffffffffffff169052565b6060820152610716828a610f1a565b610946565b610b58949550610b8890873d891161075e5761074b818361019e565b9493610b0a565b610b97610f6c565b610b02565b610bb4919650823d841161079a5761078b818361019e565b9438610ace565b610bc3610f6c565b610ac6565b83919650610be290823d841161075e5761074b818361019e565b9590610a69565b610bf1610f6c565b610a61565b61050591925061085090893d8b1161079a5761078b818361019e565b610c1a610f6c565b610a19565b505050505050610efa565b610c42919250843d861161079a5761078b818361019e565b90386109d2565b610c51610f6c565b6109ca565b604051806108aa88826108ae565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ca081610253565b610ca8610da3565b73ffffffffffffffffffffffffffffffffffffffff809116908115610d1f57600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff600054163303610dc457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610e2c8261022c565b604090610e3b8251918261019e565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610e69829561022c565b019160005b838110610e7b5750505050565b60209082516080810181811067ffffffffffffffff821117610ebd575b8452600081528260008183015260008583015260006060830152828601015201610e6e565b610ec561016e565b610e98565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610f0e570190565b610f16610eca565b0190565b8051821015610f2e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575190565b506040513d6000823e3d90fd5b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610fb4570290565b610fbc610eca565b0290565b8115610fca570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9081602091031261000e575161031681610253565b906110188261022c565b6040906110278251918261019e565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611055829561022c565b019160005b8381106110675750505050565b602090825160c0810181811067ffffffffffffffff8211176110b7575b845260008152826000818301526000858301526000606083015260006080830152600060a083015282860101520161105a565b6110bf61016e565b61108456fea264697066735822122000b7ba1f939e36a8587850cbd49d9999dffaae369792ec63b7c4b68a921eb58864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/QuickswapUserPositionsMulticall.sol:QuickswapUserPositionsMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}