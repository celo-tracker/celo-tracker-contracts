{
  "address": "0x64A24d408fDBe762C48eD5c8309D07d1181A1B0b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vaultNFTs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "vaultsInfo",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserVaults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultInfo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultNft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct QiDaoUserVaults.UserVault[]",
          "name": "userVaults",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vaultsInfo",
          "type": "address[]"
        }
      ],
      "name": "getVaults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultInfo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "openingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumCollateralPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct QiDaoUserVaults.Vault[]",
          "name": "vaults",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x021830cbdec034d5ccb94a22e0a0207940ecb78d66208019f085d0421fa8a42e",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x64A24d408fDBe762C48eD5c8309D07d1181A1B0b",
    "transactionIndex": 34,
    "gasUsed": "886300",
    "logsBloom": "0x
    "blockHash": "0xc2ae1d22ddca9f1f70c64f431bac15d6751a4e74bc31c6e119338fb965f7d5cc",
    "transactionHash": "0x021830cbdec034d5ccb94a22e0a0207940ecb78d66208019f085d0421fa8a42e",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 34918573,
        "transactionHash": "0x021830cbdec034d5ccb94a22e0a0207940ecb78d66208019f085d0421fa8a42e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x00000000000000000000000002f70172f7f490653665c9bfac0666147c8af1f5"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006d1ad9c06c26000000000000000000000000000000000000000000000000005eebb457308d762f00000000000000000000000000000000000000000000008d3e7bba92346a1f220000000000000000000000000000000000000000000000005e7e997d7021502f00000000000000000000000000000000000000000000008d3ee8d56bf4d64522",
        "logIndex": 134,
        "blockHash": "0xc2ae1d22ddca9f1f70c64f431bac15d6751a4e74bc31c6e119338fb965f7d5cc"
      }
    ],
    "blockNumber": 34918573,
    "cumulativeGasUsed": "6330735",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "838bc2e3fa29f5dfcd16fa337d3707d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultNFTs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"vaultsInfo\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserVaults\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct QiDaoUserVaults.UserVault[]\",\"name\":\"userVaults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultsInfo\",\"type\":\"address[]\"}],\"name\":\"getVaults\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCollateralPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct QiDaoUserVaults.Vault[]\",\"name\":\"vaults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/QiDaoUserVaults.sol\":\"QiDaoUserVaults\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/multicall/QiDaoUserVaults.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IVaultNFT {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface IVaultInfo {\\n    function _minimumCollateralPercentage() external view returns (uint256);\\n\\n    function collateral() external view returns (address);\\n\\n    function vaultCollateral(uint256 vaultId) external view returns (uint256);\\n\\n    function vaultDebt(uint256 vaultId) external view returns (uint256);\\n\\n    function checkCollateralPercentage(uint256 vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function openingFee() external view returns (uint256);\\n\\n    function closingFee() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ncontract QiDaoUserVaults {\\n    struct Vault {\\n        address vaultInfo;\\n        address collateralToken;\\n        string name;\\n        uint256 openingFee;\\n        uint256 closingFee;\\n        uint256 minimumCollateralPercentage;\\n    }\\n\\n    struct UserVault {\\n        address vaultInfo;\\n        address vaultNft;\\n        uint256 vaultId;\\n        uint256 collateral;\\n        uint256 debt;\\n        uint256 collateralPercentage;\\n    }\\n\\n    function getVaults(address[] memory vaultsInfo)\\n        external\\n        view\\n        returns (Vault[] memory vaults)\\n    {\\n        vaults = new Vault[](vaultsInfo.length);\\n        for (uint256 i = 0; i < vaultsInfo.length; i++) {\\n            IVaultInfo vaultInfo = IVaultInfo(vaultsInfo[i]);\\n            address collateralToken = vaultInfo.collateral();\\n            string memory name = vaultInfo.name();\\n            uint256 openingFee = getOpeningFee(vaultInfo);\\n            uint256 closingFee = getClosingFee(vaultInfo);\\n            vaults[i] = Vault(\\n                vaultsInfo[i],\\n                collateralToken,\\n                name,\\n                openingFee,\\n                closingFee,\\n                vaultInfo._minimumCollateralPercentage()\\n            );\\n        }\\n    }\\n\\n    function getUserVaults(\\n        address[] memory vaultNFTs,\\n        address[] memory vaultsInfo,\\n        address user\\n    ) external view returns (UserVault[] memory userVaults) {\\n        uint256 size = 0;\\n        for (uint256 i = 0; i < vaultNFTs.length; i++) {\\n            size = size + IVaultNFT(vaultNFTs[i]).balanceOf(user);\\n        }\\n        userVaults = new UserVault[](size);\\n        uint256 vaultIndex = 0;\\n        for (uint256 i = 0; i < vaultNFTs.length; i++) {\\n            uint256 userVaultCount = IVaultNFT(vaultNFTs[i]).balanceOf(user);\\n            if (userVaultCount == 0) {\\n                continue;\\n            }\\n            IVaultInfo vaultInfo = IVaultInfo(vaultsInfo[i]);\\n            for (uint256 j = 0; j < userVaultCount; j++) {\\n                uint256 vaultId = IVaultNFT(vaultNFTs[i]).tokenOfOwnerByIndex(\\n                    user,\\n                    j\\n                );\\n                uint256 collateral = vaultInfo.vaultCollateral(vaultId);\\n                uint256 debt = vaultInfo.vaultDebt(vaultId);\\n                uint256 collateralPercentage = vaultInfo\\n                    .checkCollateralPercentage(vaultId);\\n                userVaults[vaultIndex++] = UserVault(\\n                    vaultsInfo[i],\\n                    vaultNFTs[i],\\n                    vaultId,\\n                    collateral,\\n                    debt,\\n                    collateralPercentage\\n                );\\n            }\\n        }\\n    }\\n\\n    function getOpeningFee(IVaultInfo vaultInfo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        try vaultInfo.openingFee() returns (uint256 fee) {\\n            return fee;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function getClosingFee(IVaultInfo vaultInfo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        try vaultInfo.closingFee() returns (uint256 fee) {\\n            return fee;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22e01360c4ddc4d4db36cbe35ab70932d5b9909888a03631e60c10bfa666120a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610f26908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081634b37d42a1461003e575063cfa75c0c1461003657600080fd5b61000e6108d3565b346105ae5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105ae5767ffffffffffffffff906004358281116105aa5761008f90369060040161069f565b916024359081116105aa576100a890369060040161069f565b916044356100b581610681565b8291825b81518410156101be5761017661017c9161010f6100f66100f66100dc8988610c6b565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87166004820152602092918390829060249082905afa9283156101b1575b8993610182575b5050610d77565b93610c31565b926100b9565b6101a2929350803d106101aa575b61019a818361060a565b810190610d68565b90898061016f565b503d610190565b6101b9610cc6565b610168565b6101ca91929350610d83565b8391845b8151811015610598576101ea6100f66100f66100dc8486610c6b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871660048201526020918290829060249082905afa90811561058b575b889161056e575b508015610563576102606100f66100dc858c610c6b565b73ffffffffffffffffffffffffffffffffffffffff16885b828110610291575050505061028c90610c31565b6101ce565b84999497846102af6100f66100f6979e969c95976100dc8d8c610c6b565b6040517f2f745c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101859052908290829060449082905afa908115610556575b8891610539575b506040517fd4a9b2c50000000000000000000000000000000000000000000000000000000081526004810182905282816024818b5afa90811561052c575b899161050f575b506040517fd310f49b000000000000000000000000000000000000000000000000000000008152600481018390529183836024818c5afa928315610502575b8a936104e3575b506040517fdf98784600000000000000000000000000000000000000000000000000000000815260048101829052938d81866024818e5afa9586156104d6575b8c966104b3575b506103f0908a610c6b565b5173ffffffffffffffffffffffffffffffffffffffff169d610412908d610c6b565b5173ffffffffffffffffffffffffffffffffffffffff169061043261064b565b73ffffffffffffffffffffffffffffffffffffffff909f168f528e73ffffffffffffffffffffffffffffffffffffffff90921691015260408d015260608c015260808b015260a08a015261048581610c31565b98610490828a610c6b565b5261049b9088610c6b565b506104a590610c31565b999290979199989398610278565b6103f09196506104cf90833d85116101aa5761019a818361060a565b95906103e5565b6104de610cc6565b6103de565b6104fb919350843d86116101aa5761019a818361060a565b913861039e565b61050a610cc6565b610397565b6105269150833d85116101aa5761019a818361060a565b8f610358565b610534610cc6565b610351565b6105509150823d84116101aa5761019a818361060a565b8e610313565b61055e610cc6565b61030c565b505061028c90610c31565b6105859150823d84116101aa5761019a818361060a565b89610249565b610593610cc6565b610242565b604051806105a68582610707565b0390f35b5080fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176105fd57604052565b6106056105b1565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105fd57604052565b60405190610658826105e1565b565b60209067ffffffffffffffff8111610674575b60051b0190565b61067c6105b1565b61066d565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b81601f8201121561000e578035916106b68361065a565b926106c4604051948561060a565b808452602092838086019260051b82010192831161000e578301905b8282106106ee575050505090565b83809183356106fc81610681565b8152019101906106e0565b60208082019080835283518092528060408094019401926000905b83821061073157505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015116878501528082015187830152606080820151908801526080808201519088015260a0908101519087015260c09095019493820193600190910190610722565b918091926000905b8282106107b35750116107ac575050565b6000910152565b9150806020918301518186015201829161079b565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106107fd575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187528a519073ffffffffffffffffffffffffffffffffffffffff8083511682528383015116838201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f888401519360c090818b860152855180928601526108a08260e097898989019101610793565b606080820151908601526080808201519086015260a08091015190850152011601019901940194019295949391906107ec565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600490813567ffffffffffffffff811161000e57610925903690840161069f565b906109308251610b6a565b9260005b8351811015610b5c57806109516100f66100dc610abb9488610c6b565b838673ffffffffffffffffffffffffffffffffffffffff83169260408051907fd8dfeb4500000000000000000000000000000000000000000000000000000000825289828681895afa918215610b4f575b600092610b20575b508051917f06fdde0300000000000000000000000000000000000000000000000000000000835260008387818a5afa928315610b13575b600093610af0575b508a610a0a6100dc8a610a046109fe89610e1b565b98610e96565b98610c6b565b978351978880927fe5f4dc920000000000000000000000000000000000000000000000000000000082525afa958615610ae3575b600096610ac0575b50610a8e90610a72610a5661064b565b73ffffffffffffffffffffffffffffffffffffffff9099168952565b73ffffffffffffffffffffffffffffffffffffffff16878c0152565b8501526060840152608083015260a0820152610aaa8288610c6b565b52610ab58187610c6b565b50610c31565b610934565b610a8e919650610adc908c8d3d106101aa5761019a818361060a565b9590610a46565b610aeb610cc6565b610a3e565b610b0c91933d8091833e610b04818361060a565b810190610cd3565b91386109e9565b610b1b610cc6565b6109e1565b610b419192508a3d8c11610b48575b610b39818361060a565b810190610cae565b90386109aa565b503d610b2f565b610b57610cc6565b6109a2565b604051806105a687826107c8565b90610b748261065a565b604090610b838251918261060a565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610bb1829561065a565b019160005b838110610bc35750505050565b6020908251610bd1816105e1565b600081528260008183015260006060808785015283015260006080830152600060a0830152828601015201610bb6565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c5f570190565b610c67610c01565b0190565b8051821015610c7f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e5751610cc381610681565b90565b506040513d6000823e3d90fd5b60208183031261000e57805167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111610d5b575b60405192610d3d60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018561060a565b8184526020828401011161000e57610cc39160208085019101610793565b610d636105b1565b610d07565b9081602091031261000e575190565b81198111610c5f570190565b90610d8d8261065a565b604090610d9c8251918261060a565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610dca829561065a565b019160005b838110610ddc5750505050565b6020908251610dea816105e1565b60008152826000818301526000858301526000606083015260006080830152600060a0830152828601015201610dcf565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937f728bbbb5000000000000000000000000000000000000000000000000000000008352165afa60009181610e76575b50610cc35750600090565b610e8f91925060203d81116101aa5761019a818361060a565b9038610e6b565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937f1c883e7b000000000000000000000000000000000000000000000000000000008352165afa60009181610e765750610cc3575060009056fea2646970667358221220deaf7782c59f42ff0094ed9e520f8906e068cc0e2a3f58158608e1c19dc6ab1264736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081634b37d42a1461003e575063cfa75c0c1461003657600080fd5b61000e6108d3565b346105ae5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105ae5767ffffffffffffffff906004358281116105aa5761008f90369060040161069f565b916024359081116105aa576100a890369060040161069f565b916044356100b581610681565b8291825b81518410156101be5761017661017c9161010f6100f66100f66100dc8988610c6b565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87166004820152602092918390829060249082905afa9283156101b1575b8993610182575b5050610d77565b93610c31565b926100b9565b6101a2929350803d106101aa575b61019a818361060a565b810190610d68565b90898061016f565b503d610190565b6101b9610cc6565b610168565b6101ca91929350610d83565b8391845b8151811015610598576101ea6100f66100f66100dc8486610c6b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871660048201526020918290829060249082905afa90811561058b575b889161056e575b508015610563576102606100f66100dc858c610c6b565b73ffffffffffffffffffffffffffffffffffffffff16885b828110610291575050505061028c90610c31565b6101ce565b84999497846102af6100f66100f6979e969c95976100dc8d8c610c6b565b6040517f2f745c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101859052908290829060449082905afa908115610556575b8891610539575b506040517fd4a9b2c50000000000000000000000000000000000000000000000000000000081526004810182905282816024818b5afa90811561052c575b899161050f575b506040517fd310f49b000000000000000000000000000000000000000000000000000000008152600481018390529183836024818c5afa928315610502575b8a936104e3575b506040517fdf98784600000000000000000000000000000000000000000000000000000000815260048101829052938d81866024818e5afa9586156104d6575b8c966104b3575b506103f0908a610c6b565b5173ffffffffffffffffffffffffffffffffffffffff169d610412908d610c6b565b5173ffffffffffffffffffffffffffffffffffffffff169061043261064b565b73ffffffffffffffffffffffffffffffffffffffff909f168f528e73ffffffffffffffffffffffffffffffffffffffff90921691015260408d015260608c015260808b015260a08a015261048581610c31565b98610490828a610c6b565b5261049b9088610c6b565b506104a590610c31565b999290979199989398610278565b6103f09196506104cf90833d85116101aa5761019a818361060a565b95906103e5565b6104de610cc6565b6103de565b6104fb919350843d86116101aa5761019a818361060a565b913861039e565b61050a610cc6565b610397565b6105269150833d85116101aa5761019a818361060a565b8f610358565b610534610cc6565b610351565b6105509150823d84116101aa5761019a818361060a565b8e610313565b61055e610cc6565b61030c565b505061028c90610c31565b6105859150823d84116101aa5761019a818361060a565b89610249565b610593610cc6565b610242565b604051806105a68582610707565b0390f35b5080fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176105fd57604052565b6106056105b1565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105fd57604052565b60405190610658826105e1565b565b60209067ffffffffffffffff8111610674575b60051b0190565b61067c6105b1565b61066d565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b81601f8201121561000e578035916106b68361065a565b926106c4604051948561060a565b808452602092838086019260051b82010192831161000e578301905b8282106106ee575050505090565b83809183356106fc81610681565b8152019101906106e0565b60208082019080835283518092528060408094019401926000905b83821061073157505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015116878501528082015187830152606080820151908801526080808201519088015260a0908101519087015260c09095019493820193600190910190610722565b918091926000905b8282106107b35750116107ac575050565b6000910152565b9150806020918301518186015201829161079b565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106107fd575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187528a519073ffffffffffffffffffffffffffffffffffffffff8083511682528383015116838201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f888401519360c090818b860152855180928601526108a08260e097898989019101610793565b606080820151908601526080808201519086015260a08091015190850152011601019901940194019295949391906107ec565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600490813567ffffffffffffffff811161000e57610925903690840161069f565b906109308251610b6a565b9260005b8351811015610b5c57806109516100f66100dc610abb9488610c6b565b838673ffffffffffffffffffffffffffffffffffffffff83169260408051907fd8dfeb4500000000000000000000000000000000000000000000000000000000825289828681895afa918215610b4f575b600092610b20575b508051917f06fdde0300000000000000000000000000000000000000000000000000000000835260008387818a5afa928315610b13575b600093610af0575b508a610a0a6100dc8a610a046109fe89610e1b565b98610e96565b98610c6b565b978351978880927fe5f4dc920000000000000000000000000000000000000000000000000000000082525afa958615610ae3575b600096610ac0575b50610a8e90610a72610a5661064b565b73ffffffffffffffffffffffffffffffffffffffff9099168952565b73ffffffffffffffffffffffffffffffffffffffff16878c0152565b8501526060840152608083015260a0820152610aaa8288610c6b565b52610ab58187610c6b565b50610c31565b610934565b610a8e919650610adc908c8d3d106101aa5761019a818361060a565b9590610a46565b610aeb610cc6565b610a3e565b610b0c91933d8091833e610b04818361060a565b810190610cd3565b91386109e9565b610b1b610cc6565b6109e1565b610b419192508a3d8c11610b48575b610b39818361060a565b810190610cae565b90386109aa565b503d610b2f565b610b57610cc6565b6109a2565b604051806105a687826107c8565b90610b748261065a565b604090610b838251918261060a565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610bb1829561065a565b019160005b838110610bc35750505050565b6020908251610bd1816105e1565b600081528260008183015260006060808785015283015260006080830152600060a0830152828601015201610bb6565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c5f570190565b610c67610c01565b0190565b8051821015610c7f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e5751610cc381610681565b90565b506040513d6000823e3d90fd5b60208183031261000e57805167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111610d5b575b60405192610d3d60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018561060a565b8184526020828401011161000e57610cc39160208085019101610793565b610d636105b1565b610d07565b9081602091031261000e575190565b81198111610c5f570190565b90610d8d8261065a565b604090610d9c8251918261060a565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610dca829561065a565b019160005b838110610ddc5750505050565b6020908251610dea816105e1565b60008152826000818301526000858301526000606083015260006080830152600060a0830152828601015201610dcf565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937f728bbbb5000000000000000000000000000000000000000000000000000000008352165afa60009181610e76575b50610cc35750600090565b610e8f91925060203d81116101aa5761019a818361060a565b9038610e6b565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937f1c883e7b000000000000000000000000000000000000000000000000000000008352165afa60009181610e765750610cc3575060009056fea2646970667358221220deaf7782c59f42ff0094ed9e520f8906e068cc0e2a3f58158608e1c19dc6ab1264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}