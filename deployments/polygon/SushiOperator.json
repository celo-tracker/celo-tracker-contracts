{
  "address": "0xDDdF7fC64b1ABC55fdEC219D1b20411ce9776479",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_miniChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniChef",
      "outputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "swapAndZapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d981dd60582db0a92f38880c4a91be6c34d61b61494dafdf3a4e071cc964429",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0xDDdF7fC64b1ABC55fdEC219D1b20411ce9776479",
    "transactionIndex": 33,
    "gasUsed": "1577294",
    "logsBloom": "0x00000002000000000000000000000000000000000000000000800000000000000000100000000000020000000000000000008000000000000000000000000000000001000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000800000000000000008000000000000000000000000000200000000000000000000000000000000008000000040000000000000000004000000000000000000081000000000000000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x3f275e84e060f3169ce80d032bddae4b15c0982e911d229fb1812f3ed1f5b20b",
    "transactionHash": "0x6d981dd60582db0a92f38880c4a91be6c34d61b61494dafdf3a4e071cc964429",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 31661945,
        "transactionHash": "0x6d981dd60582db0a92f38880c4a91be6c34d61b61494dafdf3a4e071cc964429",
        "address": "0xDDdF7fC64b1ABC55fdEC219D1b20411ce9776479",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x3f275e84e060f3169ce80d032bddae4b15c0982e911d229fb1812f3ed1f5b20b"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 31661945,
        "transactionHash": "0x6d981dd60582db0a92f38880c4a91be6c34d61b61494dafdf3a4e071cc964429",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e02593371c24ee00000000000000000000000000000000000000000000000043f8454f0a32b275000000000000000000000000000000000000000000003ba44a53c056063aeab800000000000000000000000000000000000000000000000043181fbbd3168d87000000000000000000000000000000000000000000003ba44b33e5e93d570fa6",
        "logIndex": 137,
        "blockHash": "0x3f275e84e060f3169ce80d032bddae4b15c0982e911d229fb1812f3ed1f5b20b"
      }
    ],
    "blockNumber": 31661945,
    "cumulativeGasUsed": "4736498",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F",
    "0xdd21a7428e6da8a10f4A23142CE81EC21aCCE449"
  ],
  "numDeployments": 1,
  "solcInputHash": "21657234f86fbee9b879a47e3da3e51c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_miniChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniChef\",\"outputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"swapAndZapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/defi/SushiOperator.sol\":\"SushiOperator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/defi/SushiOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\nimport \\\"./UniswapOperator.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\ncontract SushiOperator is UniswapOperator, Ownable {\\n  using SafeMath for uint256;\\n\\n  IMiniChefV2 public immutable miniChef;\\n  IRewarder private rewarder;\\n\\n  constructor(\\n    address _router,\\n    address _factory,\\n    address _miniChef,\\n    address _rewarder\\n  ) UniswapOperator(_router, _factory) {\\n    miniChef = IMiniChefV2(_miniChef);\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  receive() external payable {}\\n\\n  function setRewarder(address _rewarder) public onlyOwner {\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  function swapAndZapIn(\\n    address from,\\n    address to,\\n    uint256 fromAmount,\\n    uint256 minAmountOut,\\n    uint256 percentMin,\\n    uint256 pid,\\n    address user\\n  ) external {\\n    require(\\n      IERC20(from).transferFrom(msg.sender, address(this), fromAmount),\\n      \\\"SushiOperator: Failed to transferFrom from amount\\\"\\n    );\\n    uint256 halfFromAmount = fromAmount / 2;\\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\\n\\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, pid, user);\\n  }\\n\\n  function zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    uint256 pid,\\n    address user\\n  ) external {\\n    require(\\n      IERC20(token0).transferFrom(msg.sender, address(this), token0Amount),\\n      \\\"SushiOperator: Failed to transferFrom token0\\\"\\n    );\\n    require(\\n      IERC20(token1).transferFrom(msg.sender, address(this), token1Amount),\\n      \\\"SushiOperator: Failed to transferFrom token1\\\"\\n    );\\n\\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, pid, user);\\n  }\\n\\n  function _zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    uint256 pid,\\n    address user\\n  ) internal {\\n    _addLiquidityAndDepositInFarm(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin,\\n      pid,\\n      user\\n    );\\n\\n    rewarder.onReward(\\n      user,\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin\\n    );\\n\\n    // Return leftovers\\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\\n  }\\n\\n  function _addLiquidityAndDepositInFarm(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    uint256 pid,\\n    address user\\n  ) internal {\\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\\n\\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\\n    IERC20(lpToken).approve(address(miniChef), lpBalance);\\n    miniChef.deposit(pid, lpBalance, user);\\n  }\\n}\\n\",\"keccak256\":\"0x8d762497fa4dac2b53b3ef2f66923c436588f0c700f76fec709cb43eefea2901\",\"license\":\"MIT\"},\"contracts/defi/UniswapOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\n\\ncontract UniswapOperator {\\n  using SafeMath for uint256;\\n\\n  address public immutable router;\\n  address public immutable factory;\\n\\n  constructor(address _router, address _factory) {\\n    router = _router;\\n    factory = _factory;\\n  }\\n\\n  function _swapUsingPool(\\n    address from,\\n    address to,\\n    uint256 inputAmount,\\n    uint256 minAmountOut\\n  ) internal returns (uint256 outAmount) {\\n    address pairAddress = UniswapV2Library.pairFor(factory, from, to);\\n    address[] memory path = new address[](2);\\n    path[0] = from;\\n    path[1] = to;\\n\\n    require(\\n      IERC20(from).transfer(pairAddress, inputAmount),\\n      \\\"UniswapOperator: Transfer failed\\\"\\n    );\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n    if (pair.token0() == from) {\\n      outAmount = getAmountOut(inputAmount, reserve0, reserve1);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(0, outAmount, address(this), new bytes(0));\\n    } else {\\n      outAmount = getAmountOut(inputAmount, reserve1, reserve0);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(outAmount, 0, address(this), new bytes(0));\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) internal {\\n    IERC20(token0).approve(router, token0Amount);\\n    IERC20(token1).approve(router, token1Amount);\\n    IUniswapV2Router02(router).addLiquidity(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      (token0Amount * percentMin) / 100,\\n      (token1Amount * percentMin) / 100,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n}\\n\",\"keccak256\":\"0xc55dfdf9830f4fce7a96ef153366280102127eaa40b81b82bd35562f09bd76f3\",\"license\":\"MIT\"},\"contracts/defi/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  function onReward(\\n    address user,\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7b6e3e4ec270b17e4ee80ba24054eef5b0e599c9d88a3b402b50a5ae5e717127\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function updatePool(uint256 pid)\\n    external\\n    returns (IMiniChefV2.PoolInfo memory);\\n\\n  function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function harvest(uint256 pid, address to) external;\\n\\n  function withdrawAndHarvest(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function emergencyWithdraw(uint256 pid, address to) external;\\n\\n  function sushiPerSecond() external view returns (uint256);\\n\\n  function totalAllocPoint() external view returns (uint256);\\n\\n  function lpToken(uint256 index) external view returns (address);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n  \\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x9618f4d5a58c018f6f3661111aea4e22c49e31d50c394c43767b9142d968ff03\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\",\"keccak256\":\"0x3922110d266eb2283dcd89a633ff54e48d95e5739e7ac10b5ac78604bd6ea19b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external returns (address);\\n\\n  function WETH() external returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x28dd31008745b25e75c3b9f1826db8f9fc6d4990266b60999423cd69a733a311\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0197ba652269a2a07a102680f714d6a348643ad62a9b16e2122bec834c0d542f\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary UniswapSafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0x1ea866557685098ca7d44d43aea18634d5ae315ee58a3725f725a0084a71682c\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IUniswapV2Pair.sol\\\";\\nimport \\\"../IUniswapV2Factory.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  using UniswapSafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = IUniswapV2Factory(factory).getPair(token0, token1);\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    ).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4528f7edccd012c764889218b9a23f0ac71520aca7484d8d44d74f40ee2bd6f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e034620000cb57601f62001c4238819003918201601f19168301916001600160401b03831184841017620000d057808492608094604052833981010312620000cb5780620000526200008492620000e6565b906200006160208201620000e6565b6200007d60606200007560408501620000e6565b9301620000e6565b92620000fb565b604051611ade908162000164823960805181818161065901526115ec015260a05181818161034f01528181610dc901526112ae015260c0518181816101e40152610e730152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000cb57565b60805260a052600080546001600160a01b031980821633908117845560405191956001600160a01b0395909486949193918516917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a31660c0521690600154161760015556fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80633a6462e4146100cf5780634005760a146100c6578063715018a6146100bd5780638da5cb5b146100b4578063c45a0155146100ab578063d2434d45146100a2578063f2fde38b14610099578063f887ea40146100905763fec4af600361000e5761008b61067d565b61000e565b5061008b61060d565b5061008b610519565b5061008b6103d6565b5061008b610303565b5061008b6102b0565b5061008b610208565b5061008b610198565b5061008b6100fb565b73ffffffffffffffffffffffffffffffffffffffff8116036100f657565b600080fd5b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657600435610137816100d8565b73ffffffffffffffffffffffffffffffffffffffff9061015c826000541633146107d1565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001556000604051f35b60009103126100f657565b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f6576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ad5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161027f3384146107d1565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60e09101126100f6576004356103a9816100d8565b906024356103b6816100d8565b9060443590606435906084359060a4359060c4356103d3816100d8565b90565b50346100f6576100196103e836610373565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000808252336004830152306024830152604482018790529197929693959392916104b09160209173ffffffffffffffffffffffffffffffffffffffff918391906104719083816064816000898d165af190811561050c575b6000916104ef575b5061098c565b6040519081523360048201523060248201526044810189905291829060649082906000908a165af19182156104e2575b6000926104b5575b5050610a17565b610ab1565b6104d49250803d106104db575b6104cc81836108f6565b810190610937565b38806104a9565b503d6104c2565b6104ea61094f565b6104a1565b6105069150843d86116104db576104cc81836108f6565b3861046b565b61051461094f565b610463565b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657600435610555816100d8565b73ffffffffffffffffffffffffffffffffffffffff610579816000541633146107d1565b8116156105895761001990610836565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f65761068c36610373565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905294969095919492939092909190602081606481600073ffffffffffffffffffffffffffffffffffffffff89165af19081156107c4575b6000916107a6575b50156107225761071c6100199760011c928383866112a0565b92610ab1565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d2066726f6d20616d6f756e740000000000000000000000000000006064820152fd5b6107be915060203d81116104db576104cc81836108f6565b38610703565b6107cc61094f565b6106fb565b156107d857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116108e957604052565b6108f16108a5565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108e957604052565b908160209103126100f6575180151581036100f65790565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b1561099357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d20746f6b656e3000000000000000000000000000000000000000006064820152fd5b15610a1e57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d20746f6b656e3100000000000000000000000000000000000000006064820152fd5b908160209103126100f6575190565b929095939484610ac5918784868b89610db1565b610b00610ae760015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b156100f6576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a4810194909452610cc0936000918290829060c490829084905af18015610da4575b610d8b575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa958615610d7e575b8496610d5f575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af18015610d52575b610d35575b5060405195865230600487015216928585602481875afa948515610d28575b8295610cf9575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610cec575b610cd3575050565b81610ce992903d106104db576104cc81836108f6565b50565b610cf461094f565b610ccb565b610d1a919550863d8811610d21575b610d1281836108f6565b810190610aa2565b9338610c87565b503d610d08565b610d3061094f565b610c80565b610d4b90883d8a116104db576104cc81836108f6565b5038610c61565b610d5a61094f565b610c5c565b610d77919650883d8a11610d2157610d1281836108f6565b9438610bfb565b610d8661094f565b610bf4565b80610d98610d9e926108d5565b8061018d565b38610b92565b610dac61094f565b610b8d565b610dc7610ded95610ae795610ae79585856115de565b7f00000000000000000000000000000000000000000000000000000000000000006118e0565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929060208085602481855afa948515610f9c575b600095610f7d575b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820181905260248201879052928290829060449082906000905af18015610f70575b610f52575b5050803b156100f6576040517f8dbdbe6d0000000000000000000000000000000000000000000000000000000081526004810193909352602483019390935273ffffffffffffffffffffffffffffffffffffffff166044820152906000908290818381606481015b03925af18015610f45575b610f365750565b80610d98610f43926108d5565b565b610f4d61094f565b610f2f565b81610f6892903d106104db576104cc81836108f6565b503880610ebc565b610f7861094f565b610eb7565b81610f959296503d8711610d2157610d1281836108f6565b9338610e35565b610fa461094f565b610e2d565b604051906060820182811067ffffffffffffffff821117610fd7575b60405260028252604082602036910137565b610fdf6108a5565b610fc5565b805115610ff15760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015610ff15760400190565b1561103757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff821682036100f657565b908160609103126100f6576110c481611095565b9160406110d360208401611095565b92015163ffffffff811681036100f65790565b908160209103126100f657516103d3816100d8565b1561110257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176111b2575b8360405281815292369037565b6111ba6108a5565b6111a5565b91908251928382526000905b8482106112165750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611209575b0116010190565b6000858286010152611202565b906020908180828501015190828601015201906111cb565b73ffffffffffffffffffffffffffffffffffffffff6103d3949360809383526000602084015216604082015281606082015201906111bf565b73ffffffffffffffffffffffffffffffffffffffff6103d3949360809360008452602084015216604082015281606082015201906111bf565b9193929361130b6112d283857f00000000000000000000000000000000000000000000000000000000000000006118e0565b926112eb6112de610fa9565b611306876112eb83610fe4565b9073ffffffffffffffffffffffffffffffffffffffff169052565b611020565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390526000948116936020928291906113839085816044818c8c5af1908115611579575b899161155c575b50611030565b1693604051917f0902f1ac000000000000000000000000000000000000000000000000000000008352606083600481895afa92831561154f575b8790889461151b575b506dffffffffffffffffffffffffffff8091169316936040517f0dfe168100000000000000000000000000000000000000000000000000000000815281816004818b5afa91821561150e575b89926114e1575b50501603611488579061142f9161143893611820565b948510156110fb565b611440611186565b813b15611484578291610f24916040519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308b60048501611267565b8280fd5b61142f9161149593611820565b61149d611186565b813b15611484578291610f24916040519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308b6004850161122e565b6115009250803d10611507575b6114f881836108f6565b8101906110e6565b3880611419565b503d6114ee565b61151661094f565b611412565b905061153f91935060603d8111611548575b61153781836108f6565b8101906110b0565b509290386113c6565b503d61152d565b61155761094f565b6113bd565b6115739150863d88116104db576104cc81836108f6565b3861137d565b61158161094f565b611376565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166115b7570290565b6115bf61095c565b0290565b908160609103126100f6578051916040602083015192015190565b93919260008560609561177f7f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b3000000000000000000000000000000000000000000000000000000009081815289818061166c6020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af18015611813575b6117f6575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af180156117e9575b6117cb575b50506116f96116eb6116f26116eb8b87611586565b6064900490565b9988611586565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af180156117be575b6117925750565b6117b29060603d81116117b7575b6117aa81836108f6565b8101906115c3565b505050565b503d6117a0565b6117c661094f565b61178b565b816117e192903d106104db576104cc81836108f6565b5038806116d6565b6117f161094f565b6116d1565b61180c90833d85116104db576104cc81836108f6565b5038611695565b61181b61094f565b611690565b9190916118627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e5908084048211811515166118d3575b029283611586565b92806103e892048211811515166118c6575b02811981116118b9575b0190811561188a570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6118c161095c565b61187e565b6118ce61095c565b611874565b6118db61095c565b61185a565b73ffffffffffffffffffffffffffffffffffffffff9081841693828416938585146119bf5761197c9560209510156119b95790925b6119228183161515611a43565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa9081156119ac575b600091611994575090565b6103d3915060203d8111611507576114f881836108f6565b6119b461094f565b611989565b92611915565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b15611a4a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea264697066735822122023c66a57f4898c701ebb0e16f23508b3a5451408a2cf5633c2e71e90a653a05564736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80633a6462e4146100cf5780634005760a146100c6578063715018a6146100bd5780638da5cb5b146100b4578063c45a0155146100ab578063d2434d45146100a2578063f2fde38b14610099578063f887ea40146100905763fec4af600361000e5761008b61067d565b61000e565b5061008b61060d565b5061008b610519565b5061008b6103d6565b5061008b610303565b5061008b6102b0565b5061008b610208565b5061008b610198565b5061008b6100fb565b73ffffffffffffffffffffffffffffffffffffffff8116036100f657565b600080fd5b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657600435610137816100d8565b73ffffffffffffffffffffffffffffffffffffffff9061015c826000541633146107d1565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001556000604051f35b60009103126100f657565b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f6576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ad5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161027f3384146107d1565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60e09101126100f6576004356103a9816100d8565b906024356103b6816100d8565b9060443590606435906084359060a4359060c4356103d3816100d8565b90565b50346100f6576100196103e836610373565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000808252336004830152306024830152604482018790529197929693959392916104b09160209173ffffffffffffffffffffffffffffffffffffffff918391906104719083816064816000898d165af190811561050c575b6000916104ef575b5061098c565b6040519081523360048201523060248201526044810189905291829060649082906000908a165af19182156104e2575b6000926104b5575b5050610a17565b610ab1565b6104d49250803d106104db575b6104cc81836108f6565b810190610937565b38806104a9565b503d6104c2565b6104ea61094f565b6104a1565b6105069150843d86116104db576104cc81836108f6565b3861046b565b61051461094f565b610463565b50346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657600435610555816100d8565b73ffffffffffffffffffffffffffffffffffffffff610579816000541633146107d1565b8116156105895761001990610836565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346100f65760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f65761068c36610373565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905294969095919492939092909190602081606481600073ffffffffffffffffffffffffffffffffffffffff89165af19081156107c4575b6000916107a6575b50156107225761071c6100199760011c928383866112a0565b92610ab1565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d2066726f6d20616d6f756e740000000000000000000000000000006064820152fd5b6107be915060203d81116104db576104cc81836108f6565b38610703565b6107cc61094f565b6106fb565b156107d857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116108e957604052565b6108f16108a5565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108e957604052565b908160209103126100f6575180151581036100f65790565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b1561099357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d20746f6b656e3000000000000000000000000000000000000000006064820152fd5b15610a1e57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f53757368694f70657261746f723a204661696c656420746f207472616e73666560448201527f7246726f6d20746f6b656e3100000000000000000000000000000000000000006064820152fd5b908160209103126100f6575190565b929095939484610ac5918784868b89610db1565b610b00610ae760015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b156100f6576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a4810194909452610cc0936000918290829060c490829084905af18015610da4575b610d8b575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa958615610d7e575b8496610d5f575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af18015610d52575b610d35575b5060405195865230600487015216928585602481875afa948515610d28575b8295610cf9575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610cec575b610cd3575050565b81610ce992903d106104db576104cc81836108f6565b50565b610cf461094f565b610ccb565b610d1a919550863d8811610d21575b610d1281836108f6565b810190610aa2565b9338610c87565b503d610d08565b610d3061094f565b610c80565b610d4b90883d8a116104db576104cc81836108f6565b5038610c61565b610d5a61094f565b610c5c565b610d77919650883d8a11610d2157610d1281836108f6565b9438610bfb565b610d8661094f565b610bf4565b80610d98610d9e926108d5565b8061018d565b38610b92565b610dac61094f565b610b8d565b610dc7610ded95610ae795610ae79585856115de565b7f00000000000000000000000000000000000000000000000000000000000000006118e0565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929060208085602481855afa948515610f9c575b600095610f7d575b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820181905260248201879052928290829060449082906000905af18015610f70575b610f52575b5050803b156100f6576040517f8dbdbe6d0000000000000000000000000000000000000000000000000000000081526004810193909352602483019390935273ffffffffffffffffffffffffffffffffffffffff166044820152906000908290818381606481015b03925af18015610f45575b610f365750565b80610d98610f43926108d5565b565b610f4d61094f565b610f2f565b81610f6892903d106104db576104cc81836108f6565b503880610ebc565b610f7861094f565b610eb7565b81610f959296503d8711610d2157610d1281836108f6565b9338610e35565b610fa461094f565b610e2d565b604051906060820182811067ffffffffffffffff821117610fd7575b60405260028252604082602036910137565b610fdf6108a5565b610fc5565b805115610ff15760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015610ff15760400190565b1561103757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff821682036100f657565b908160609103126100f6576110c481611095565b9160406110d360208401611095565b92015163ffffffff811681036100f65790565b908160209103126100f657516103d3816100d8565b1561110257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176111b2575b8360405281815292369037565b6111ba6108a5565b6111a5565b91908251928382526000905b8482106112165750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611209575b0116010190565b6000858286010152611202565b906020908180828501015190828601015201906111cb565b73ffffffffffffffffffffffffffffffffffffffff6103d3949360809383526000602084015216604082015281606082015201906111bf565b73ffffffffffffffffffffffffffffffffffffffff6103d3949360809360008452602084015216604082015281606082015201906111bf565b9193929361130b6112d283857f00000000000000000000000000000000000000000000000000000000000000006118e0565b926112eb6112de610fa9565b611306876112eb83610fe4565b9073ffffffffffffffffffffffffffffffffffffffff169052565b611020565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390526000948116936020928291906113839085816044818c8c5af1908115611579575b899161155c575b50611030565b1693604051917f0902f1ac000000000000000000000000000000000000000000000000000000008352606083600481895afa92831561154f575b8790889461151b575b506dffffffffffffffffffffffffffff8091169316936040517f0dfe168100000000000000000000000000000000000000000000000000000000815281816004818b5afa91821561150e575b89926114e1575b50501603611488579061142f9161143893611820565b948510156110fb565b611440611186565b813b15611484578291610f24916040519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308b60048501611267565b8280fd5b61142f9161149593611820565b61149d611186565b813b15611484578291610f24916040519485809481937f022c0d9f000000000000000000000000000000000000000000000000000000008352308b6004850161122e565b6115009250803d10611507575b6114f881836108f6565b8101906110e6565b3880611419565b503d6114ee565b61151661094f565b611412565b905061153f91935060603d8111611548575b61153781836108f6565b8101906110b0565b509290386113c6565b503d61152d565b61155761094f565b6113bd565b6115739150863d88116104db576104cc81836108f6565b3861137d565b61158161094f565b611376565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166115b7570290565b6115bf61095c565b0290565b908160609103126100f6578051916040602083015192015190565b93919260008560609561177f7f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b3000000000000000000000000000000000000000000000000000000009081815289818061166c6020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af18015611813575b6117f6575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af180156117e9575b6117cb575b50506116f96116eb6116f26116eb8b87611586565b6064900490565b9988611586565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af180156117be575b6117925750565b6117b29060603d81116117b7575b6117aa81836108f6565b8101906115c3565b505050565b503d6117a0565b6117c661094f565b61178b565b816117e192903d106104db576104cc81836108f6565b5038806116d6565b6117f161094f565b6116d1565b61180c90833d85116104db576104cc81836108f6565b5038611695565b61181b61094f565b611690565b9190916118627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e5908084048211811515166118d3575b029283611586565b92806103e892048211811515166118c6575b02811981116118b9575b0190811561188a570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6118c161095c565b61187e565b6118ce61095c565b611874565b6118db61095c565b61185a565b73ffffffffffffffffffffffffffffffffffffffff9081841693828416938585146119bf5761197c9560209510156119b95790925b6119228183161515611a43565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa9081156119ac575b600091611994575090565b6103d3915060203d8111611507576114f881836108f6565b6119b461094f565b611989565b92611915565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b15611a4a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea264697066735822122023c66a57f4898c701ebb0e16f23508b3a5451408a2cf5633c2e71e90a653a05564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/defi/SushiOperator.sol:SushiOperator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4268,
        "contract": "contracts/defi/SushiOperator.sol:SushiOperator",
        "label": "rewarder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRewarder)5162"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)5162": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      }
    }
  }
}