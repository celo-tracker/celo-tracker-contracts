{
  "address": "0xD52796DAFE825EdD4389E3D86E5984C5667508Ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "rewardTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "pendingSushi",
              "type": "uint256"
            }
          ],
          "internalType": "struct SushiUserPositionsMulticall.SushiPosition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f9d764240ccc9be0dfa3d5f1d0188bdb4ab6b4bf570605e020048884065ffe5",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0xD52796DAFE825EdD4389E3D86E5984C5667508Ed",
    "transactionIndex": 56,
    "gasUsed": "615299",
    "logsBloom": "0x
    "blockHash": "0x41f5504eb5a13af8edce866b5b671d74a27a11619fc5e6eb4dbf44d12792c25f",
    "transactionHash": "0x6f9d764240ccc9be0dfa3d5f1d0188bdb4ab6b4bf570605e020048884065ffe5",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 31514341,
        "transactionHash": "0x6f9d764240ccc9be0dfa3d5f1d0188bdb4ab6b4bf570605e020048884065ffe5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636",
          "0x000000000000000000000000c6869257205e20c2a43cb31345db534aecb49f6e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000066bdb9869f0cce000000000000000000000000000000000000000000000000446b1c49198b4a2e0000000000000000000000000000000000000000000017687b6cc558ecacb1af00000000000000000000000000000000000000000000000044045e8f92ec3d600000000000000000000000000000000000000000000017687bd38312734bbe7d",
        "logIndex": 174,
        "blockHash": "0x41f5504eb5a13af8edce866b5b671d74a27a11619fc5e6eb4dbf44d12792c25f"
      }
    ],
    "blockNumber": 31514341,
    "cumulativeGasUsed": "8880783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "21657234f86fbee9b879a47e3da3e51c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"}],\"internalType\":\"struct SushiUserPositionsMulticall.SushiPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/SushiUserPositionsMulticall.sol\":\"SushiUserPositionsMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function updatePool(uint256 pid)\\n    external\\n    returns (IMiniChefV2.PoolInfo memory);\\n\\n  function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function harvest(uint256 pid, address to) external;\\n\\n  function withdrawAndHarvest(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function emergencyWithdraw(uint256 pid, address to) external;\\n\\n  function sushiPerSecond() external view returns (uint256);\\n\\n  function totalAllocPoint() external view returns (uint256);\\n\\n  function lpToken(uint256 index) external view returns (address);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n  \\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x9618f4d5a58c018f6f3661111aea4e22c49e31d50c394c43767b9142d968ff03\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function onSushiReward(\\n    uint256 pid,\\n    address user,\\n    address recipient,\\n    uint256 sushiAmount,\\n    uint256 newLpAmount\\n  ) external;\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256 sushiAmount\\n  ) external view returns (IERC20[] memory, uint256[] memory);\\n\\n  function rewardPerSecond() external view returns (uint256);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n}\\n\",\"keccak256\":\"0xdaed1cfcb7040df5753aef290201d3c765b971c7db6683fe658391f6327361b9\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/SushiUserPositionsMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/sushiswap/IRewarder.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract SushiUserPositionsMulticall {\\n  struct SushiPosition {\\n    address poolAddress;\\n    uint256 share;\\n    IERC20[] rewardTokens;\\n    uint256[] rewardAmounts;\\n    uint256 pendingSushi;\\n  }\\n\\n  function getPositions(\\n    IMiniChefV2 miniChef,\\n    IRewarder rewarder,\\n    address owner\\n  ) external view returns (SushiPosition[] memory) {\\n    uint256 poolCount = miniChef.poolLength();\\n\\n    SushiPosition[] memory positions = new SushiPosition[](poolCount);\\n    for (uint256 index = 0; index < poolCount; index++) {\\n      (uint256 amount, ) = miniChef.userInfo(index, owner);\\n      if (amount == 0) {\\n        continue;\\n      }\\n      address lpToken = miniChef.lpToken(index);\\n      IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\\n      uint256 totalSupply = pair.totalSupply();\\n      uint256 share = (amount * 10**18) / totalSupply;\\n\\n      uint256 pendingSushi = miniChef.pendingSushi(index, owner);\\n      (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) = rewarder\\n        .pendingTokens(index, owner, pendingSushi);\\n\\n      positions[index] = (SushiPosition(\\n        lpToken,\\n        share,\\n        rewardTokens,\\n        rewardAmounts,\\n        pendingSushi\\n      ));\\n    }\\n\\n    return positions;\\n  }\\n}\\n\",\"keccak256\":\"0x20913cfc6754a7249687440a390e7bc3d09bbb97e803abdcbaf6e6786fed7489\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610a38908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600090813560e01c632090f4671461002c5750600080fd5b346104b55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104b55760043592610068846104b9565b602435610074816104b9565b604435610080816104b9565b73ffffffffffffffffffffffffffffffffffffffff809616957f081e3eda00000000000000000000000000000000000000000000000000000000845260209182856004818b5afa9485156104a8575b8795610489575b506100e0856106fc565b96805b8681106100fb578751806100f78b82610510565b0390f35b87517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8416602482015261033f9190868c858a888a8f8088604481895afa97881561047c575b859861044c575b50871561043f5780517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018a90529787896024818a5afa988915610432575b86996103f3575b50878461020a8561026394848e60048951809581937f18160ddd000000000000000000000000000000000000000000000000000000008352165afa9182156103e6575b8b926103c3575b5061020590610841565b610888565b988c85518095819482937f195426ec0000000000000000000000000000000000000000000000000000000084526004840190929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b03915afa9788156103b6575b8698610377575b5050517fd63b3c490000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff9092166024830152604482018690529092918391829081606481015b0392165afa91821561036a575b87918893610344575b506103126102f66106b5565b73ffffffffffffffffffffffffffffffffffffffff9096168652565b8a8501528c8401526060830152608082015261032e828c6109bf565b52610339818b6109bf565b506107d9565b6100e3565b90925061036391503d8089833e61035b818361064b565b81019061091f565b91386102ea565b6103726106a8565b6102e1565b6102d4969593985090816103a292959395903d106103af575b61039a818361064b565b810190610699565b969193948e939193610276565b503d610390565b6103be6106a8565b61026f565b6102059192506103df90863d88116103af5761039a818361064b565b91906101fb565b6103ee6106a8565b6101f4565b8899508461020a856102639461041f8d95863d881161042b575b610417818361064b565b810190610829565b9d5094505050506101b1565b503d61040d565b61043a6106a8565b6101aa565b50505050505050506107d9565b8161046d9299503d8a11610475575b610465818361064b565b810190610813565b509638610166565b503d61045b565b6104846106a8565b61015f565b6104a1919550833d85116103af5761039a818361064b565b93386100d6565b6104b06106a8565b6100cf565b5080fd5b73ffffffffffffffffffffffffffffffffffffffff8116036104d757565b600080fd5b90815180825260208080930193019160005b8281106104fc575050505090565b8351855293810193928101926001016104ee565b602080820190808352835180925260409283810182858560051b84010196019460009081935b86851061054857505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08282030185528689519160a080820173ffffffffffffffffffffffffffffffffffffffff808651168452848601518585015287860151928885015282518092528460c0850193019189915b8183106105ff57505050509282916105e360019560608085015190848303908501526104dc565b916080809101519101529a019501950193969594929190610536565b8351811685528d969485019493909301926001909201916105bc565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761068c57604052565b61069461061b565b604052565b908160209103126104d7575190565b506040513d6000823e3d90fd5b6040519060a0820182811067ffffffffffffffff82111761068c57604052565b60209067ffffffffffffffff81116106ef575b60051b0190565b6106f761061b565b6106e8565b90610706826106d5565b6040906107158251918261064b565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061074382956106d5565b0191600091825b848110610758575050505050565b602090835160a0810181811067ffffffffffffffff82111761079c575b8552858152828681830152606080878401528083015286608083015282850101520161074a565b6107a461061b565b610775565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610807570190565b61080f6107a9565b0190565b91908260409103126104d7576020825192015190565b908160209103126104d7575161083e816104b9565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482118115151661087c570290565b6108846107a9565b0290565b8115610892570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81601f820112156104d7578051916108d8836106d5565b926108e6604051948561064b565b808452602092838086019260051b8201019283116104d7578301905b828210610910575050505090565b81518152908301908301610902565b9190916040818403126104d75780519267ffffffffffffffff938481116104d75782019381601f860112156104d7578451610959816106d5565b90610967604051928361064b565b808252602096878084019260051b820101918583116104d75788809201905b8382106109a65750505050948301519081116104d75761083e92016108c1565b82809183516109b4816104b9565b815201910190610986565b80518210156109d35760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f247c4a0c0e7c85f36fc9f433f532c8f0f6a103fa536a6ea31da33bd0689b26264736f6c634300080d0033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600090813560e01c632090f4671461002c5750600080fd5b346104b55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104b55760043592610068846104b9565b602435610074816104b9565b604435610080816104b9565b73ffffffffffffffffffffffffffffffffffffffff809616957f081e3eda00000000000000000000000000000000000000000000000000000000845260209182856004818b5afa9485156104a8575b8795610489575b506100e0856106fc565b96805b8681106100fb578751806100f78b82610510565b0390f35b87517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8416602482015261033f9190868c858a888a8f8088604481895afa97881561047c575b859861044c575b50871561043f5780517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018a90529787896024818a5afa988915610432575b86996103f3575b50878461020a8561026394848e60048951809581937f18160ddd000000000000000000000000000000000000000000000000000000008352165afa9182156103e6575b8b926103c3575b5061020590610841565b610888565b988c85518095819482937f195426ec0000000000000000000000000000000000000000000000000000000084526004840190929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b03915afa9788156103b6575b8698610377575b5050517fd63b3c490000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff9092166024830152604482018690529092918391829081606481015b0392165afa91821561036a575b87918893610344575b506103126102f66106b5565b73ffffffffffffffffffffffffffffffffffffffff9096168652565b8a8501528c8401526060830152608082015261032e828c6109bf565b52610339818b6109bf565b506107d9565b6100e3565b90925061036391503d8089833e61035b818361064b565b81019061091f565b91386102ea565b6103726106a8565b6102e1565b6102d4969593985090816103a292959395903d106103af575b61039a818361064b565b810190610699565b969193948e939193610276565b503d610390565b6103be6106a8565b61026f565b6102059192506103df90863d88116103af5761039a818361064b565b91906101fb565b6103ee6106a8565b6101f4565b8899508461020a856102639461041f8d95863d881161042b575b610417818361064b565b810190610829565b9d5094505050506101b1565b503d61040d565b61043a6106a8565b6101aa565b50505050505050506107d9565b8161046d9299503d8a11610475575b610465818361064b565b810190610813565b509638610166565b503d61045b565b6104846106a8565b61015f565b6104a1919550833d85116103af5761039a818361064b565b93386100d6565b6104b06106a8565b6100cf565b5080fd5b73ffffffffffffffffffffffffffffffffffffffff8116036104d757565b600080fd5b90815180825260208080930193019160005b8281106104fc575050505090565b8351855293810193928101926001016104ee565b602080820190808352835180925260409283810182858560051b84010196019460009081935b86851061054857505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08282030185528689519160a080820173ffffffffffffffffffffffffffffffffffffffff808651168452848601518585015287860151928885015282518092528460c0850193019189915b8183106105ff57505050509282916105e360019560608085015190848303908501526104dc565b916080809101519101529a019501950193969594929190610536565b8351811685528d969485019493909301926001909201916105bc565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761068c57604052565b61069461061b565b604052565b908160209103126104d7575190565b506040513d6000823e3d90fd5b6040519060a0820182811067ffffffffffffffff82111761068c57604052565b60209067ffffffffffffffff81116106ef575b60051b0190565b6106f761061b565b6106e8565b90610706826106d5565b6040906107158251918261064b565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061074382956106d5565b0191600091825b848110610758575050505050565b602090835160a0810181811067ffffffffffffffff82111761079c575b8552858152828681830152606080878401528083015286608083015282850101520161074a565b6107a461061b565b610775565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610807570190565b61080f6107a9565b0190565b91908260409103126104d7576020825192015190565b908160209103126104d7575161083e816104b9565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482118115151661087c570290565b6108846107a9565b0290565b8115610892570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81601f820112156104d7578051916108d8836106d5565b926108e6604051948561064b565b808452602092838086019260051b8201019283116104d7578301905b828210610910575050505090565b81518152908301908301610902565b9190916040818403126104d75780519267ffffffffffffffff938481116104d75782019381601f860112156104d7578451610959816106d5565b90610967604051928361064b565b808252602096878084019260051b820101918583116104d75788809201905b8382106109a65750505050948301519081116104d75761083e92016108c1565b82809183516109b4816104b9565b815201910190610986565b80518210156109d35760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f247c4a0c0e7c85f36fc9f433f532c8f0f6a103fa536a6ea31da33bd0689b26264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}