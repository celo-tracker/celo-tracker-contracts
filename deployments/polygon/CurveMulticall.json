{
  "address": "0x93aBda97Ff6473F09BfC8423F01444ac9333C0cB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            },
            {
              "internalType": "address",
              "name": "zap",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getFactoryCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address[2]",
              "name": "tokens",
              "type": "address[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "balances",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoFactoryPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MetapoolFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getMetaPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "basePool",
              "type": "address"
            },
            {
              "internalType": "address[4]",
              "name": "tokens",
              "type": "address[4]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[4]",
              "name": "balances",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveMetapool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256[8]",
              "name": "rates",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            }
          ],
          "internalType": "struct CurveMulticall.CurvePoolInfo[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7518f716b763c896762b73dfa98c53cb96c52de233ccdc764618536c7de5d903",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x93aBda97Ff6473F09BfC8423F01444ac9333C0cB",
    "transactionIndex": 48,
    "gasUsed": "2779862",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000008000000000000000000000008000000000000000000000000000000080000000000000000000900000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000200000000000000000000000000000000000080000200000000000000000000000000000000000000000000000000000000000004002000000000000000001000400000000000000000000000000100000000020000000000000000000000000000000000000000000400000000000000000100000",
    "blockHash": "0xadf2588cda90c163da4647ba9752f55589fa432fc7cb5fc16fcce731893db74f",
    "transactionHash": "0x7518f716b763c896762b73dfa98c53cb96c52de233ccdc764618536c7de5d903",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 31540118,
        "transactionHash": "0x7518f716b763c896762b73dfa98c53cb96c52de233ccdc764618536c7de5d903",
        "address": "0x93aBda97Ff6473F09BfC8423F01444ac9333C0cB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0xadf2588cda90c163da4647ba9752f55589fa432fc7cb5fc16fcce731893db74f"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 31540118,
        "transactionHash": "0x7518f716b763c896762b73dfa98c53cb96c52de233ccdc764618536c7de5d903",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001529b88def2b9f4000000000000000000000000000000000000000000000000744ed5e19d5c468a0000000000000000000000000000000000000000000000f10bf77f5dd460e8f800000000000000000000000000000000000000000000000072fc3a58be698c960000000000000000000000000000000000000000000000f10d4a1ae6b353a2ec",
        "logIndex": 184,
        "blockHash": "0xadf2588cda90c163da4647ba9752f55589fa432fc7cb5fc16fcce731893db74f"
      }
    ],
    "blockNumber": 31540118,
    "cumulativeGasUsed": "9540779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "ebcd4bbe8810a2bc8c0fee20600ebd11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract CryptoRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"},{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CryptoFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getFactoryCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"balances\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoFactoryPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MetapoolFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getMetaPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"tokens\",\"type\":\"address[4]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[4]\",\"name\":\"balances\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveMetapool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"rates\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"}],\"internalType\":\"struct CurveMulticall.CurvePoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/CurveMulticall.sol\":\"CurveMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/CryptoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoFactory {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4412331482cd192c7ab98b3bf0c3440dec5ec0fd7d34a70140f1d20030f94a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CryptoFactoryPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CryptoFactoryPool is IERC20 {\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfa2bca19303de6303d1836ace81ee3dce5a0e90b8e3b0ed4c9ec7e42c1185ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CryptoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoRegistry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_zap(address pool) external view returns (address);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x340c7afdf64ec0ce95ed89bcc0c7d571ff6ab85cb95cdc42a2880548ae8412d0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CurvePool {\\n    function fee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54fdea71eca2741c93d73638c0aa803d75688137db386d1280edd66507bd5231\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/MetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface MetapoolFactory {\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 index) external view returns (address);\\n\\n    function get_base_pool(address pool) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_metapool_rates(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_implementation_address(address pool)\\n        external\\n        view\\n        returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function metapool_implementations(address basePool)\\n        external\\n        view\\n        returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x4221dfb61d7e1fc0218c70823e978720843bc373df229f8d10ac8510f7fc213d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface PoolInfo {\\n    struct Params {\\n        uint256 A;\\n        uint256 futureA;\\n        uint256 fee;\\n        uint256 adminFee;\\n        uint256 futureFee;\\n        uint256 futureAdminFee;\\n        address futureOwner;\\n        uint256 initialA;\\n        uint256 initialAtime;\\n        uint256 futureAtime;\\n    }\\n\\n    function get_pool_coins(address pool)\\n        external\\n        view\\n        returns (\\n            address[8] memory,\\n            address[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory\\n        );\\n\\n    function get_pool_info(address pool)\\n        external\\n        view\\n        returns (\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            address,\\n            Params memory,\\n            bool,\\n            string memory\\n        );\\n}\\n\",\"keccak256\":\"0x329dd6119275d43b75560b44fa4fcfad9ca09a0a9c68f9350a7700a47941e877\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface Registry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_rates(address pool) external view returns (uint256[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x3be4641f50fee1db775e270f9d1288b354c0fff12a7e6cf1b83b748db91524e0\",\"license\":\"GPL-3.0\"},\"contracts/multicall/CurveMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/curve/Registry.sol\\\";\\nimport \\\"../interfaces/curve/PoolInfo.sol\\\";\\nimport \\\"../interfaces/curve/MetapoolFactory.sol\\\";\\nimport \\\"../interfaces/curve/CryptoRegistry.sol\\\";\\nimport \\\"../interfaces/curve/CryptoFactory.sol\\\";\\nimport \\\"../interfaces/curve/CryptoFactoryPool.sol\\\";\\nimport \\\"../interfaces/curve/CurvePool.sol\\\";\\n\\ncontract CurveMulticall is Ownable {\\n    struct BasePool {\\n        address poolAddress;\\n    }\\n\\n    struct CurvePoolInfo {\\n        address poolAddress;\\n        address[8] tokens;\\n        address[8] underlyingTokens;\\n        uint256[8] balances;\\n        uint256[8] underlyingBalances;\\n        uint256 fee;\\n        uint256[8] rates;\\n        address lpToken;\\n        bool isMeta;\\n        string name;\\n        uint256 assetType;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n    }\\n\\n    struct CurveMetapool {\\n        address poolAddress;\\n        string name;\\n        address basePool;\\n        address[4] tokens;\\n        address[8] underlyingTokens;\\n        uint256[4] balances;\\n        uint256[8] underlyingBalances;\\n        uint256 fee;\\n        bool isMeta;\\n        uint256 assetType;\\n        address gauge;\\n    }\\n\\n    struct CurveCryptoPool {\\n        address poolAddress;\\n        address[8] tokens;\\n        uint256[8] balances;\\n        uint256 fee;\\n        address lpToken;\\n        string name;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n        address zap;\\n    }\\n\\n    struct CurveCryptoFactoryPool {\\n        address poolAddress;\\n        address lpToken;\\n        address[2] tokens;\\n        uint256[2] balances;\\n        uint256 fee;\\n        address gauge;\\n    }\\n\\n    function getPools(\\n        Registry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurvePoolInfo[] memory pools) {\\n        pools = new CurvePoolInfo[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            address[8] memory underlyingTokens = registry.get_underlying_coins(\\n                pool\\n            );\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            uint256[8] memory underlyingBalances = registry\\n                .get_underlying_balances(pool);\\n            uint256[8] memory rates = registry.get_rates(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            bool isMeta = registry.is_meta(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256 assetType = registry.get_pool_asset_type(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n\\n            pools[index - from] = CurvePoolInfo(\\n                pool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                getPoolFee(pool),\\n                rates,\\n                lpToken,\\n                isMeta,\\n                name,\\n                assetType,\\n                gauges,\\n                gaugeTypes\\n            );\\n        }\\n    }\\n\\n    function getMetaPools(\\n        MetapoolFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveMetapool[] memory pools) {\\n        pools = new CurveMetapool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address basePool = factory.get_base_pool(pool);\\n            address[4] memory tokens = factory.get_coins(pool);\\n            bool isMeta = factory.is_meta(pool);\\n            address[8] memory underlyingTokens;\\n            if (isMeta) {\\n                underlyingTokens = factory.get_underlying_coins(pool);\\n            }\\n            uint256[4] memory balances = factory.get_balances(pool);\\n            uint256[8] memory underlyingBalances;\\n            if (isMeta) {\\n                underlyingBalances = factory.get_underlying_balances(pool);\\n            }\\n            uint256 assetType = factory.get_pool_asset_type(pool);\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveMetapool(\\n                pool,\\n                ERC20(pool).name(),\\n                basePool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                getPoolFee(pool),\\n                isMeta,\\n                assetType,\\n                gauge\\n            );\\n        }\\n    }\\n\\n    function getCryptoPools(\\n        CryptoRegistry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoPool[] memory pools) {\\n        pools = new CurveCryptoPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n            address zap = registry.get_zap(pool);\\n\\n            pools[index - from] = CurveCryptoPool(\\n                pool,\\n                tokens,\\n                balances,\\n                getPoolFee(pool),\\n                lpToken,\\n                name,\\n                gauges,\\n                gaugeTypes,\\n                zap\\n            );\\n        }\\n    }\\n\\n    function getFactoryCryptoPools(\\n        CryptoFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoFactoryPool[] memory pools) {\\n        pools = new CurveCryptoFactoryPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address[2] memory tokens = factory.get_coins(pool);\\n            uint256[2] memory balances = factory.get_balances(pool);\\n            address lpToken = CryptoFactoryPool(pool).token();\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveCryptoFactoryPool(\\n                pool,\\n                lpToken,\\n                tokens,\\n                balances,\\n                getPoolFee(pool),\\n                gauge\\n            );\\n        }\\n    }\\n\\n    function getPoolFee(address pool) public view returns (uint256) {\\n        try CurvePool(pool).fee() returns (uint256 fee) {\\n            return fee;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    // Shouldn't hold funds, just in case.\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x346245afb807b7dd94a8b161a313ed9ab275ceac5888f34bbb663be97d54c1e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361312090816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063030e3b08146100c75780631d8b12fe146100be57806322471113146100b557806324ae6a27146100ac57806342fcc6fb146100a3578063715018a61461009a5780638da5cb5b14610091578063bea72365146100885763f2fde38b1461008057600080fd5b61000e612498565b5061000e61204f565b5061000e611ef6565b5061000e611e4e565b5061000e611e00565b5061000e611c70565b5061000e6116f6565b5061000e610d64565b3461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561010281610891565b61010a6108af565b6101126108c0565b9161012061ffff8416612c57565b91805b610137610130868461299a565b61ffff1690565b61ffff8216101561087f576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff88165afa908115610872575b600091610853575b506040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526020818060248101038173ffffffffffffffffffffffffffffffffffffffff89165afa908115610846575b600091610827575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529081906080816024818b86165afa90811561081a575b6000916107eb575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152906020826024818c87165afa9182156107de575b6000926107ad575b50828280926102e5612817565b91610703575b6040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529260809084908e90829081602481010392165afa9283156106f6575b6000936106c5575b5061035a612817565b9361061b575b6040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529560209087908e90829081602481010392165afa95861561060e575b6000966105dd575b506040517fdaf297b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529660209088908e90829081602481010392165afa9687156105d0575b600097610587575b5073ffffffffffffffffffffffffffffffffffffffff9495969760008a6004604051809981937f06fdde03000000000000000000000000000000000000000000000000000000008352165afa95861561057a575b600096610555575b506104938a61300a565b9561049c6127a6565b73ffffffffffffffffffffffffffffffffffffffff909b168b5260208b015273ffffffffffffffffffffffffffffffffffffffff1660408a01526060890152608088015260a087015260c086015260e0850152151561010084015261012083015273ffffffffffffffffffffffffffffffffffffffff166101408201526105238383612bf5565b61ffff16906105328287612c14565b5261053d9085612c14565b5061013061054d6101379261297a565b915050610123565b6105739196503d806000833e61056b8183612765565b810190612adb565b948f610489565b6105826129c9565b610481565b73ffffffffffffffffffffffffffffffffffffffff959697506105c19060203d6020116105c9575b6105b98183612765565b8101906129b1565b96959461042d565b503d6105af565b6105d86129c9565b610425565b61060091965060203d602011610607575b6105f88183612765565b810190612b70565b948e6103c6565b503d6105ee565b6106166129c9565b6103be565b6040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529093506101009081818e818a81602481010392165afa9182156106b8575b60009261068b575b505092610360565b6106aa9250803d106106b1575b6106a28183612765565b810190612a74565b8e80610683565b503d610698565b6106c06129c9565b61067b565b6106e891935060803d6080116106ef575b6106e08183612765565b810190612d8f565b918e610351565b503d6106d6565b6106fe6129c9565b610349565b6040517fa77576ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529091506101009081818e818781602481010392165afa9182156107a0575b600092610773575b5050906102eb565b6107929250803d10610799575b61078a8183612765565b810190612a1b565b8e8061076b565b503d610780565b6107a86129c9565b610763565b8392506107d19060203d6020116107d7575b6107c98183612765565b810190612ac3565b916102d8565b503d6107bf565b6107e66129c9565b6102d0565b61080d915060803d608011610813575b6108058183612765565b810190612d36565b8a610279565b503d6107fb565b6108226129c9565b610271565b610840915060203d6020116105c9576105b98183612765565b87610217565b61084e6129c9565b61020f565b61086c915060203d6020116105c9576105b98183612765565b866101a1565b61087a6129c9565b610199565b6040518061088d8682610a15565b0390f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6024359061ffff8216820361000e57565b6044359061ffff8216820361000e57565b918091926000905b8282106108f15750116108ea575050565b6000910152565b915080602091830151818601520182916108d9565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610942815180928187528780880191016108d1565b0116010190565b6000915b6004831061095a57505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061094d565b6000915b6008831061099857505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061098b565b6000915b600483106109d657505050565b6001908251815260208091019201920191906109c9565b6000915b600883106109fe57505050565b6001908251815260208091019201920191906109f1565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a4a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610b6b8b5191610aa381845173ffffffffffffffffffffffffffffffffffffffff169052565b6103c0610140610ac0868601516103e08089870152850190610906565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610af160608083015190860190610949565b6080810151610b0560e09182870190610987565b610b1860a08301516101e08701906109c5565b610b2b60c08301516102608701906109ed565b81015161036085015261010081015115156103808501526101208101516103a0850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a39565b6000915b600a8310610b8d57505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610b80565b6000915b600a8310610bcb57505050565b6001908251600f0b81526020809101920192019190610bbe565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c1a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d538b5191610c7381845173ffffffffffffffffffffffffffffffffffffffff169052565b610c838484015185830190610987565b610700610180610d288a860151610ca06101209182870190610987565b610cb360608801516102208701906109ed565b610cc660808801516103208701906109ed565b60a0870151610420860152610ce460c08801516104408701906109ed565b60e087015173ffffffffffffffffffffffffffffffffffffffff16610540860152610100870151151561056086015286015161084080610580870152850190610906565b946101408101516105a0850152610d496101608201516105c0860190610b7c565b0151910190610bba565b990194019401929594939190610c09565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610da081610891565b610da86108af565b610db06108c0565b9161ffff91610dc0838516612855565b92815b610dd0610130878561299a565b8282161015611597576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff89165afa90811561158a575b60009161156b575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152610100818060248101038173ffffffffffffffffffffffffffffffffffffffff8a165afa90811561155e575b60009161153d575b506040517fa77576ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201529086610100838060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa928315611530575b6000936114d9575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152926112079261119e92611135926110cc9261106392610ff9916101008280602481015b03818d85165afa9182156114cc575b6000926114a9575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa92831561149c575b600093611479575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa94851561146c575b600095611449575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa95861561143c575b60009661141b575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa96871561140e575b6000976113ed575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa9788156113e0575b6000986113c5575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113b8575b60009961138f575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a15611382575b6000998a9b611349575b506112918c61300a565b9361129a6127b5565b73ffffffffffffffffffffffffffffffffffffffff909d168d5260208d015260408c015260608b015260808a015260a089015260c088015273ffffffffffffffffffffffffffffffffffffffff1660e087015215156101008601526101208501526101408401526101608301526101808201526113178483612bf5565b61ffff16906113268288612c14565b526113319086612c14565b50610130611341610dd09261297a565b915050610dc3565b909a506113719199506102803d6102801161137b575b6113698183612765565b810190612b7f565b9890989938611287565b503d61135f565b61138a6129c9565b61127d565b6102809199506113b06112709160203d602011610607576105f88183612765565b99915061121e565b6113c06129c9565b611216565b6113d991983d8091833e61056b8183612765565b96386111b5565b6113e86129c9565b6111ad565b61140791975060203d6020116107d7576107c98183612765565b953861114c565b6114166129c9565b611144565b61143591965060203d6020116105c9576105b98183612765565b94386110e3565b6114446129c9565b6110db565b6114659195506101003d610100116106b1576106a28183612765565b933861107a565b6114746129c9565b611072565b6114959193506101003d610100116106b1576106a28183612765565b9138611010565b6114a46129c9565b611008565b6114c59192506101003d610100116106b1576106a28183612765565b9038610fa6565b6114d46129c9565b610f9e565b6112079193506111356110cc61106373ffffffffffffffffffffffffffffffffffffffff95610ff9610f8f61152161119e976101003d610100116107995761078a8183612765565b99975050509550505050610f28565b6115386129c9565b610f20565b61155891506101003d610100116107995761078a8183612765565b38610eaf565b6115666129c9565b610ea7565b611584915060203d6020116105c9576105b98183612765565b38610e38565b6115926129c9565b610e30565b6040518061088d8782610be5565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106115da575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187526116e58b519161163381845173ffffffffffffffffffffffffffffffffffffffff169052565b6116438484015185830190610987565b611655888401516101208301906109ed565b6060830151610220820152608083015173ffffffffffffffffffffffffffffffffffffffff166102408201526105006101006116a160a086015161052080610260870152850190610906565b946116b560c0820151610280860190610b7c565b6116c860e08201516103c0860190610bba565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b9901940194019295949391906115c9565b503461000e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600490813561173581610891565b61173d6108af565b6117456108c0565b9361ffff93611755858716612dde565b9473ffffffffffffffffffffffffffffffffffffffff849516945b61177d610130898761299a565b8282161015611c6257604080517f3a1d5d8e000000000000000000000000000000000000000000000000000000008152602088878284806117cb8985830191909161ffff6020820193169052565b0381855afa938415611c55575b600094611c34575b5084611a53949551907f9ac90d3d0000000000000000000000000000000000000000000000000000000082526101009485838061183c8b88830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381885afa928315611c27575b600093611c08575b508151917f5c911741000000000000000000000000000000000000000000000000000000008352600083806118a58c89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611bfb575b600093611bd8575b508061197a9394888b6119149451809581927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa928315611bcb575b600093611bac575b50838b8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611b9f575b600095611b80575b508a8251987f56059ffb000000000000000000000000000000000000000000000000000000008a5261028098898b806119e78685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9a8b15611b73575b60009a8b9c611b4c575b5050908692918551809e819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa998a15611b3f575b60009a611b20575b50611a718b61300a565b93611a7a6127d6565b73ffffffffffffffffffffffffffffffffffffffff909c168c528b01528901528a88015273ffffffffffffffffffffffffffffffffffffffff16608087015260a086015260c085015260e084015273ffffffffffffffffffffffffffffffffffffffff90911690820152611aee8683612bf5565b61ffff1690611afd828a612c14565b52611b089088612c14565b50610130611b1861177d9261297a565b915050611770565b611b38919a50843d86116105c9576105b98183612765565b9838611a67565b611b476129c9565b611a5f565b611b68929c508894939b50803d1061137b576113698183612765565b9a90999192386119fe565b611b7b6129c9565b6119f4565b611b98919550843d86116105c9576105b98183612765565b933861198f565b611ba76129c9565b611987565b611bc4919350893d8b116106b1576106a28183612765565b9138611929565b611bd36129c9565b611921565b90611bf36119149261197a953d8091833e61056b8183612765565b9350906118ba565b611c036129c9565b6118b2565b611c20919350863d88116107995761078a8183612765565b9138611851565b611c2f6129c9565b611849565b611a539450611c4f90843d86116105c9576105b98183612765565b936117e0565b611c5d6129c9565b6117d8565b6040518061088d89826115a5565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57611da8600435611caf81610891565b611d8d602435611cbe81610891565b73ffffffffffffffffffffffffffffffffffffffff90611ce38260005416331461258c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611df3575b600093611dd4575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611dc7575b600092611daa575b5050613085565b005b611dc09250803d106107d7576107c98183612765565b3880611da1565b611dcf6129c9565b611d99565b611dec919350843d8611610607576105f88183612765565b9138611d32565b611dfb6129c9565b611d2a565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020611e46600435611e4181610891565b61300a565b604051908152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ef35780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611ec533841461258c565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6000915b60028310611f5a57505050565b600190825181526020809101920192019190611f4d565b6020808201908083528351809252806040809401940192600080915b848310611f9d5750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff808251168452808383015116838501528482015185850187905b60028210612036575050505060019261202860a083606061010095015161200160809182870190611f49565b81015160c0850152015173ffffffffffffffffffffffffffffffffffffffff1660e0830152565b019701959493019190611f8d565b8251841681528a95928301926001929092019101611fd5565b503461000e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600480359061208e82610891565b6120966108af565b9261209f6108c0565b9361ffff916120af838716612eb0565b9473ffffffffffffffffffffffffffffffffffffffff90811693835b6120d86101308a8761299a565b828216101561248a5761013061236e6120d8926123688b60408c898d8351937f3a1d5d8e0000000000000000000000000000000000000000000000000000000085526020938486806121378c85830191909161ffff6020820193169052565b0381865afa95861561247d575b60009661244e575b509181859361234a96886122ba979551947f9ac90d3d0000000000000000000000000000000000000000000000000000000086528486806121ac8588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615612441575b600096612412575b508451967f92e3cc2d0000000000000000000000000000000000000000000000000000000088528588806122148689830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa978815612405575b6000986123d2575b508385918751968780927ffc0c546a00000000000000000000000000000000000000000000000000000000825287165afa9485156123c5575b6000956123a6575b508551809a819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615612399575b600096612376575b50612321906122dc8961300a565b956123046122e86127e3565b73ffffffffffffffffffffffffffffffffffffffff909b168b52565b89019073ffffffffffffffffffffffffffffffffffffffff169052565b8601528d850152608084015273ffffffffffffffffffffffffffffffffffffffff1660a0830152565b61236161235a6101308d87612bf5565b8093612c14565b528c612c14565b5061297a565b9150506120cb565b61232191965061239290863d88116105c9576105b98183612765565b95906122ce565b6123a16129c9565b6122c6565b6123be919550843d86116105c9576105b98183612765565b933861226a565b6123cd6129c9565b612262565b859198506123f68591883d8a116123fe575b6123ee8183612765565b810190612fbb565b989150612229565b503d6123e4565b61240d6129c9565b612221565b612433919650853d871161243a575b61242b8183612765565b810190612f62565b94386121c1565b503d612421565b6124496129c9565b6121b9565b8593919650916124716122ba959361234a973d87116105c9576105b98183612765565b9691939550919361214c565b6124856129c9565b612144565b6040518061088d8a82611f71565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356124d481610891565b73ffffffffffffffffffffffffffffffffffffffff6124f88160005416331461258c565b81161561250857611da8906125f1565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561259357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610160810190811067ffffffffffffffff8211176126ad57604052565b6126b5612660565b604052565b610120810190811067ffffffffffffffff8211176126ad57604052565b60c0810190811067ffffffffffffffff8211176126ad57604052565b610100810190811067ffffffffffffffff8211176126ad57604052565b610140810190811067ffffffffffffffff8211176126ad57604052565b6080810190811067ffffffffffffffff8211176126ad57604052565b6040810190811067ffffffffffffffff8211176126ad57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176126ad57604052565b604051906127b382612690565b565b604051906101a0820182811067ffffffffffffffff8211176126ad57604052565b604051906127b3826126ba565b604051906127b3826126d7565b60209067ffffffffffffffff811161280a575b60051b0190565b612812612660565b612803565b60405190612824826126f3565b610100368337565b6040519061283982612710565b610140368337565b6040519061284e8261272d565b6080368337565b9061285f826127f0565b60409061286e82519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061289c82956127f0565b019160005b8381106128ae5750505050565b6020906128b96127b5565b600081526128c5612817565b81840152826128d2612817565b858301526128de612817565b606090818401526128ed612817565b6080840152600060a0840152612901612817565b60c0840152600060e08401526000610100840152610120830152600061014083015261292b61282c565b61016083015261293961282c565b6101808301528286010152016128a1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff80911690811461298e570190565b61299661294a565b0190565b9061ffff808093169116809203811161298e570190565b9081602091031261000e57516129c681610891565b90565b506040513d6000823e3d90fd5b9190604051926129e584612710565b8390610140810192831161000e57905b828210612a0157505050565b602080918351612a1081610891565b8152019101906129f5565b90610100808383031261000e5781601f8401121561000e5760405192612a40846126f3565b8391810192831161000e57905b828210612a5a5750505090565b602080918351612a6981610891565b815201910190612a4d565b90610100808383031261000e5781601f8401121561000e5760405192612a99846126f3565b8391810192831161000e57905b828210612ab35750505090565b8151815260209182019101612aa6565b9081602091031261000e5751801515810361000e5790565b60208183031261000e57805167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111612b63575b60405192612b4560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185612765565b8184526020828401011161000e576129c691602080850191016108d1565b612b6b612660565b612b0f565b9081602091031261000e575190565b919091610280808285031261000e5783601f8301121561000e57612ba384836129d6565b938061015f8401121561000e5760405192612bbd84612710565b8392810191821161000e5761014001915b818310612bdb5750505090565b825180600f0b810361000e57815260209283019201612bce565b61ffff9182169116818110612c08570390565b612c1061294a565b0390565b8051821015612c285760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612c61826127f0565b604090612c7082519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612c9e82956127f0565b019160005b838110612cb05750505050565b6020908251612cbe81612690565b600081526060839080828401526000868401528551612cdc8161272d565b60809182368337840152612cee612817565b90830152612cfa612841565b60a0830152612d07612817565b60c0830152600060e0830152600061010083015260006101208301526000610140830152828601015201612ca3565b9060808282031261000e5780601f8301121561000e5760405191612d598361272d565b82906080810192831161000e57905b828210612d755750505090565b602080918351612d8481610891565b815201910190612d68565b9060808282031261000e5780601f8301121561000e5760405191612db28361272d565b82906080810192831161000e57905b828210612dce5750505090565b8151815260209182019101612dc1565b90612de8826127f0565b604090612df782519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612e2582956127f0565b019160005b838110612e375750505050565b6020908251612e45816126ba565b600081528351612e54816126f3565b6000610100803684378592838501528651612e6e816126f3565b81368237878501526060828186015282608086015260a0850152612e9061282c565b60c0850152612e9d61282c565b60e0850152830152828601015201612e2a565b90612eba826127f0565b604090612ec982519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612ef782956127f0565b019160005b838110612f095750505050565b6020908251612f17816126d7565b60008152826000818301528451612f2d81612749565b85368237858301528451612f4081612749565b85368237606083015260006080830152600060a0830152828601015201612efc565b9060408282031261000e5780601f8301121561000e5760405191612f8583612749565b82906040810192831161000e57905b828210612fa15750505090565b602080918351612fb081610891565b815201910190612f94565b9060408282031261000e5780601f8301121561000e5760405191612fde83612749565b82906040810192831161000e57905b828210612ffa5750505090565b8151815260209182019101612fed565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937fddca3f43000000000000000000000000000000000000000000000000000000008352165afa60009181613065575b506129c65750600090565b61307e91925060203d8111610607576105f88183612765565b903861305a565b1561308c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f84f0ad929f9eee5cdb2ed9cd5a31e7c51fa62f91231e557b42a9d1594376baa64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063030e3b08146100c75780631d8b12fe146100be57806322471113146100b557806324ae6a27146100ac57806342fcc6fb146100a3578063715018a61461009a5780638da5cb5b14610091578063bea72365146100885763f2fde38b1461008057600080fd5b61000e612498565b5061000e61204f565b5061000e611ef6565b5061000e611e4e565b5061000e611e00565b5061000e611c70565b5061000e6116f6565b5061000e610d64565b3461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561010281610891565b61010a6108af565b6101126108c0565b9161012061ffff8416612c57565b91805b610137610130868461299a565b61ffff1690565b61ffff8216101561087f576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff88165afa908115610872575b600091610853575b506040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526020818060248101038173ffffffffffffffffffffffffffffffffffffffff89165afa908115610846575b600091610827575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529081906080816024818b86165afa90811561081a575b6000916107eb575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152906020826024818c87165afa9182156107de575b6000926107ad575b50828280926102e5612817565b91610703575b6040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529260809084908e90829081602481010392165afa9283156106f6575b6000936106c5575b5061035a612817565b9361061b575b6040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529560209087908e90829081602481010392165afa95861561060e575b6000966105dd575b506040517fdaf297b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529660209088908e90829081602481010392165afa9687156105d0575b600097610587575b5073ffffffffffffffffffffffffffffffffffffffff9495969760008a6004604051809981937f06fdde03000000000000000000000000000000000000000000000000000000008352165afa95861561057a575b600096610555575b506104938a61300a565b9561049c6127a6565b73ffffffffffffffffffffffffffffffffffffffff909b168b5260208b015273ffffffffffffffffffffffffffffffffffffffff1660408a01526060890152608088015260a087015260c086015260e0850152151561010084015261012083015273ffffffffffffffffffffffffffffffffffffffff166101408201526105238383612bf5565b61ffff16906105328287612c14565b5261053d9085612c14565b5061013061054d6101379261297a565b915050610123565b6105739196503d806000833e61056b8183612765565b810190612adb565b948f610489565b6105826129c9565b610481565b73ffffffffffffffffffffffffffffffffffffffff959697506105c19060203d6020116105c9575b6105b98183612765565b8101906129b1565b96959461042d565b503d6105af565b6105d86129c9565b610425565b61060091965060203d602011610607575b6105f88183612765565b810190612b70565b948e6103c6565b503d6105ee565b6106166129c9565b6103be565b6040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529093506101009081818e818a81602481010392165afa9182156106b8575b60009261068b575b505092610360565b6106aa9250803d106106b1575b6106a28183612765565b810190612a74565b8e80610683565b503d610698565b6106c06129c9565b61067b565b6106e891935060803d6080116106ef575b6106e08183612765565b810190612d8f565b918e610351565b503d6106d6565b6106fe6129c9565b610349565b6040517fa77576ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201529091506101009081818e818781602481010392165afa9182156107a0575b600092610773575b5050906102eb565b6107929250803d10610799575b61078a8183612765565b810190612a1b565b8e8061076b565b503d610780565b6107a86129c9565b610763565b8392506107d19060203d6020116107d7575b6107c98183612765565b810190612ac3565b916102d8565b503d6107bf565b6107e66129c9565b6102d0565b61080d915060803d608011610813575b6108058183612765565b810190612d36565b8a610279565b503d6107fb565b6108226129c9565b610271565b610840915060203d6020116105c9576105b98183612765565b87610217565b61084e6129c9565b61020f565b61086c915060203d6020116105c9576105b98183612765565b866101a1565b61087a6129c9565b610199565b6040518061088d8682610a15565b0390f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6024359061ffff8216820361000e57565b6044359061ffff8216820361000e57565b918091926000905b8282106108f15750116108ea575050565b6000910152565b915080602091830151818601520182916108d9565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610942815180928187528780880191016108d1565b0116010190565b6000915b6004831061095a57505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061094d565b6000915b6008831061099857505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061098b565b6000915b600483106109d657505050565b6001908251815260208091019201920191906109c9565b6000915b600883106109fe57505050565b6001908251815260208091019201920191906109f1565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a4a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610b6b8b5191610aa381845173ffffffffffffffffffffffffffffffffffffffff169052565b6103c0610140610ac0868601516103e08089870152850190610906565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610af160608083015190860190610949565b6080810151610b0560e09182870190610987565b610b1860a08301516101e08701906109c5565b610b2b60c08301516102608701906109ed565b81015161036085015261010081015115156103808501526101208101516103a0850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a39565b6000915b600a8310610b8d57505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610b80565b6000915b600a8310610bcb57505050565b6001908251600f0b81526020809101920192019190610bbe565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c1a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d538b5191610c7381845173ffffffffffffffffffffffffffffffffffffffff169052565b610c838484015185830190610987565b610700610180610d288a860151610ca06101209182870190610987565b610cb360608801516102208701906109ed565b610cc660808801516103208701906109ed565b60a0870151610420860152610ce460c08801516104408701906109ed565b60e087015173ffffffffffffffffffffffffffffffffffffffff16610540860152610100870151151561056086015286015161084080610580870152850190610906565b946101408101516105a0850152610d496101608201516105c0860190610b7c565b0151910190610bba565b990194019401929594939190610c09565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610da081610891565b610da86108af565b610db06108c0565b9161ffff91610dc0838516612855565b92815b610dd0610130878561299a565b8282161015611597576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff89165afa90811561158a575b60009161156b575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152610100818060248101038173ffffffffffffffffffffffffffffffffffffffff8a165afa90811561155e575b60009161153d575b506040517fa77576ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201529086610100838060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa928315611530575b6000936114d9575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152926112079261119e92611135926110cc9261106392610ff9916101008280602481015b03818d85165afa9182156114cc575b6000926114a9575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa92831561149c575b600093611479575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa94851561146c575b600095611449575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa95861561143c575b60009661141b575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa96871561140e575b6000976113ed575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa9788156113e0575b6000986113c5575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113b8575b60009961138f575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a15611382575b6000998a9b611349575b506112918c61300a565b9361129a6127b5565b73ffffffffffffffffffffffffffffffffffffffff909d168d5260208d015260408c015260608b015260808a015260a089015260c088015273ffffffffffffffffffffffffffffffffffffffff1660e087015215156101008601526101208501526101408401526101608301526101808201526113178483612bf5565b61ffff16906113268288612c14565b526113319086612c14565b50610130611341610dd09261297a565b915050610dc3565b909a506113719199506102803d6102801161137b575b6113698183612765565b810190612b7f565b9890989938611287565b503d61135f565b61138a6129c9565b61127d565b6102809199506113b06112709160203d602011610607576105f88183612765565b99915061121e565b6113c06129c9565b611216565b6113d991983d8091833e61056b8183612765565b96386111b5565b6113e86129c9565b6111ad565b61140791975060203d6020116107d7576107c98183612765565b953861114c565b6114166129c9565b611144565b61143591965060203d6020116105c9576105b98183612765565b94386110e3565b6114446129c9565b6110db565b6114659195506101003d610100116106b1576106a28183612765565b933861107a565b6114746129c9565b611072565b6114959193506101003d610100116106b1576106a28183612765565b9138611010565b6114a46129c9565b611008565b6114c59192506101003d610100116106b1576106a28183612765565b9038610fa6565b6114d46129c9565b610f9e565b6112079193506111356110cc61106373ffffffffffffffffffffffffffffffffffffffff95610ff9610f8f61152161119e976101003d610100116107995761078a8183612765565b99975050509550505050610f28565b6115386129c9565b610f20565b61155891506101003d610100116107995761078a8183612765565b38610eaf565b6115666129c9565b610ea7565b611584915060203d6020116105c9576105b98183612765565b38610e38565b6115926129c9565b610e30565b6040518061088d8782610be5565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106115da575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187526116e58b519161163381845173ffffffffffffffffffffffffffffffffffffffff169052565b6116438484015185830190610987565b611655888401516101208301906109ed565b6060830151610220820152608083015173ffffffffffffffffffffffffffffffffffffffff166102408201526105006101006116a160a086015161052080610260870152850190610906565b946116b560c0820151610280860190610b7c565b6116c860e08201516103c0860190610bba565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b9901940194019295949391906115c9565b503461000e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600490813561173581610891565b61173d6108af565b6117456108c0565b9361ffff93611755858716612dde565b9473ffffffffffffffffffffffffffffffffffffffff849516945b61177d610130898761299a565b8282161015611c6257604080517f3a1d5d8e000000000000000000000000000000000000000000000000000000008152602088878284806117cb8985830191909161ffff6020820193169052565b0381855afa938415611c55575b600094611c34575b5084611a53949551907f9ac90d3d0000000000000000000000000000000000000000000000000000000082526101009485838061183c8b88830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381885afa928315611c27575b600093611c08575b508151917f5c911741000000000000000000000000000000000000000000000000000000008352600083806118a58c89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611bfb575b600093611bd8575b508061197a9394888b6119149451809581927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa928315611bcb575b600093611bac575b50838b8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611b9f575b600095611b80575b508a8251987f56059ffb000000000000000000000000000000000000000000000000000000008a5261028098898b806119e78685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9a8b15611b73575b60009a8b9c611b4c575b5050908692918551809e819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa998a15611b3f575b60009a611b20575b50611a718b61300a565b93611a7a6127d6565b73ffffffffffffffffffffffffffffffffffffffff909c168c528b01528901528a88015273ffffffffffffffffffffffffffffffffffffffff16608087015260a086015260c085015260e084015273ffffffffffffffffffffffffffffffffffffffff90911690820152611aee8683612bf5565b61ffff1690611afd828a612c14565b52611b089088612c14565b50610130611b1861177d9261297a565b915050611770565b611b38919a50843d86116105c9576105b98183612765565b9838611a67565b611b476129c9565b611a5f565b611b68929c508894939b50803d1061137b576113698183612765565b9a90999192386119fe565b611b7b6129c9565b6119f4565b611b98919550843d86116105c9576105b98183612765565b933861198f565b611ba76129c9565b611987565b611bc4919350893d8b116106b1576106a28183612765565b9138611929565b611bd36129c9565b611921565b90611bf36119149261197a953d8091833e61056b8183612765565b9350906118ba565b611c036129c9565b6118b2565b611c20919350863d88116107995761078a8183612765565b9138611851565b611c2f6129c9565b611849565b611a539450611c4f90843d86116105c9576105b98183612765565b936117e0565b611c5d6129c9565b6117d8565b6040518061088d89826115a5565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57611da8600435611caf81610891565b611d8d602435611cbe81610891565b73ffffffffffffffffffffffffffffffffffffffff90611ce38260005416331461258c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611df3575b600093611dd4575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611dc7575b600092611daa575b5050613085565b005b611dc09250803d106107d7576107c98183612765565b3880611da1565b611dcf6129c9565b611d99565b611dec919350843d8611610607576105f88183612765565b9138611d32565b611dfb6129c9565b611d2a565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020611e46600435611e4181610891565b61300a565b604051908152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ef35780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611ec533841461258c565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6000915b60028310611f5a57505050565b600190825181526020809101920192019190611f4d565b6020808201908083528351809252806040809401940192600080915b848310611f9d5750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff808251168452808383015116838501528482015185850187905b60028210612036575050505060019261202860a083606061010095015161200160809182870190611f49565b81015160c0850152015173ffffffffffffffffffffffffffffffffffffffff1660e0830152565b019701959493019190611f8d565b8251841681528a95928301926001929092019101611fd5565b503461000e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600480359061208e82610891565b6120966108af565b9261209f6108c0565b9361ffff916120af838716612eb0565b9473ffffffffffffffffffffffffffffffffffffffff90811693835b6120d86101308a8761299a565b828216101561248a5761013061236e6120d8926123688b60408c898d8351937f3a1d5d8e0000000000000000000000000000000000000000000000000000000085526020938486806121378c85830191909161ffff6020820193169052565b0381865afa95861561247d575b60009661244e575b509181859361234a96886122ba979551947f9ac90d3d0000000000000000000000000000000000000000000000000000000086528486806121ac8588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615612441575b600096612412575b508451967f92e3cc2d0000000000000000000000000000000000000000000000000000000088528588806122148689830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa978815612405575b6000986123d2575b508385918751968780927ffc0c546a00000000000000000000000000000000000000000000000000000000825287165afa9485156123c5575b6000956123a6575b508551809a819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615612399575b600096612376575b50612321906122dc8961300a565b956123046122e86127e3565b73ffffffffffffffffffffffffffffffffffffffff909b168b52565b89019073ffffffffffffffffffffffffffffffffffffffff169052565b8601528d850152608084015273ffffffffffffffffffffffffffffffffffffffff1660a0830152565b61236161235a6101308d87612bf5565b8093612c14565b528c612c14565b5061297a565b9150506120cb565b61232191965061239290863d88116105c9576105b98183612765565b95906122ce565b6123a16129c9565b6122c6565b6123be919550843d86116105c9576105b98183612765565b933861226a565b6123cd6129c9565b612262565b859198506123f68591883d8a116123fe575b6123ee8183612765565b810190612fbb565b989150612229565b503d6123e4565b61240d6129c9565b612221565b612433919650853d871161243a575b61242b8183612765565b810190612f62565b94386121c1565b503d612421565b6124496129c9565b6121b9565b8593919650916124716122ba959361234a973d87116105c9576105b98183612765565b9691939550919361214c565b6124856129c9565b612144565b6040518061088d8a82611f71565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356124d481610891565b73ffffffffffffffffffffffffffffffffffffffff6124f88160005416331461258c565b81161561250857611da8906125f1565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561259357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610160810190811067ffffffffffffffff8211176126ad57604052565b6126b5612660565b604052565b610120810190811067ffffffffffffffff8211176126ad57604052565b60c0810190811067ffffffffffffffff8211176126ad57604052565b610100810190811067ffffffffffffffff8211176126ad57604052565b610140810190811067ffffffffffffffff8211176126ad57604052565b6080810190811067ffffffffffffffff8211176126ad57604052565b6040810190811067ffffffffffffffff8211176126ad57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176126ad57604052565b604051906127b382612690565b565b604051906101a0820182811067ffffffffffffffff8211176126ad57604052565b604051906127b3826126ba565b604051906127b3826126d7565b60209067ffffffffffffffff811161280a575b60051b0190565b612812612660565b612803565b60405190612824826126f3565b610100368337565b6040519061283982612710565b610140368337565b6040519061284e8261272d565b6080368337565b9061285f826127f0565b60409061286e82519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061289c82956127f0565b019160005b8381106128ae5750505050565b6020906128b96127b5565b600081526128c5612817565b81840152826128d2612817565b858301526128de612817565b606090818401526128ed612817565b6080840152600060a0840152612901612817565b60c0840152600060e08401526000610100840152610120830152600061014083015261292b61282c565b61016083015261293961282c565b6101808301528286010152016128a1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff80911690811461298e570190565b61299661294a565b0190565b9061ffff808093169116809203811161298e570190565b9081602091031261000e57516129c681610891565b90565b506040513d6000823e3d90fd5b9190604051926129e584612710565b8390610140810192831161000e57905b828210612a0157505050565b602080918351612a1081610891565b8152019101906129f5565b90610100808383031261000e5781601f8401121561000e5760405192612a40846126f3565b8391810192831161000e57905b828210612a5a5750505090565b602080918351612a6981610891565b815201910190612a4d565b90610100808383031261000e5781601f8401121561000e5760405192612a99846126f3565b8391810192831161000e57905b828210612ab35750505090565b8151815260209182019101612aa6565b9081602091031261000e5751801515810361000e5790565b60208183031261000e57805167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111612b63575b60405192612b4560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185612765565b8184526020828401011161000e576129c691602080850191016108d1565b612b6b612660565b612b0f565b9081602091031261000e575190565b919091610280808285031261000e5783601f8301121561000e57612ba384836129d6565b938061015f8401121561000e5760405192612bbd84612710565b8392810191821161000e5761014001915b818310612bdb5750505090565b825180600f0b810361000e57815260209283019201612bce565b61ffff9182169116818110612c08570390565b612c1061294a565b0390565b8051821015612c285760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612c61826127f0565b604090612c7082519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612c9e82956127f0565b019160005b838110612cb05750505050565b6020908251612cbe81612690565b600081526060839080828401526000868401528551612cdc8161272d565b60809182368337840152612cee612817565b90830152612cfa612841565b60a0830152612d07612817565b60c0830152600060e0830152600061010083015260006101208301526000610140830152828601015201612ca3565b9060808282031261000e5780601f8301121561000e5760405191612d598361272d565b82906080810192831161000e57905b828210612d755750505090565b602080918351612d8481610891565b815201910190612d68565b9060808282031261000e5780601f8301121561000e5760405191612db28361272d565b82906080810192831161000e57905b828210612dce5750505090565b8151815260209182019101612dc1565b90612de8826127f0565b604090612df782519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612e2582956127f0565b019160005b838110612e375750505050565b6020908251612e45816126ba565b600081528351612e54816126f3565b6000610100803684378592838501528651612e6e816126f3565b81368237878501526060828186015282608086015260a0850152612e9061282c565b60c0850152612e9d61282c565b60e0850152830152828601015201612e2a565b90612eba826127f0565b604090612ec982519182612765565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612ef782956127f0565b019160005b838110612f095750505050565b6020908251612f17816126d7565b60008152826000818301528451612f2d81612749565b85368237858301528451612f4081612749565b85368237606083015260006080830152600060a0830152828601015201612efc565b9060408282031261000e5780601f8301121561000e5760405191612f8583612749565b82906040810192831161000e57905b828210612fa15750505090565b602080918351612fb081610891565b815201910190612f94565b9060408282031261000e5780601f8301121561000e5760405191612fde83612749565b82906040810192831161000e57905b828210612ffa5750505090565b8151815260209182019101612fed565b602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937fddca3f43000000000000000000000000000000000000000000000000000000008352165afa60009181613065575b506129c65750600090565b61307e91925060203d8111610607576105f88183612765565b903861305a565b1561308c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f84f0ad929f9eee5cdb2ed9cd5a31e7c51fa62f91231e557b42a9d1594376baa64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/CurveMulticall.sol:CurveMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}