{
  "address": "0xCBeAAF40D351Ee8284c86593353b47C056C99C51",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            },
            {
              "internalType": "address",
              "name": "zap",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getFactoryCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[2]",
              "name": "tokens",
              "type": "address[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "balances",
              "type": "uint256[2]"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoFactoryPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MetapoolFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getMetaPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "basePool",
              "type": "address"
            },
            {
              "internalType": "address[4]",
              "name": "tokens",
              "type": "address[4]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[4]",
              "name": "balances",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveMetapool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "rates",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            }
          ],
          "internalType": "struct CurveMulticall.CurvePool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x255eba7bf154eefd5456825d91a1b6885a62764c03dd019d211ccbe94e62f887",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xCBeAAF40D351Ee8284c86593353b47C056C99C51",
    "transactionIndex": 69,
    "gasUsed": "2677385",
    "logsBloom": "0x
    "blockHash": "0x415760d4d11e7cf09deeb8b61ac2b74063fd5492b7b387ad2f6294d8deba4e0f",
    "transactionHash": "0x255eba7bf154eefd5456825d91a1b6885a62764c03dd019d211ccbe94e62f887",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 30884608,
        "transactionHash": "0x255eba7bf154eefd5456825d91a1b6885a62764c03dd019d211ccbe94e62f887",
        "address": "0xCBeAAF40D351Ee8284c86593353b47C056C99C51",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0x415760d4d11e7cf09deeb8b61ac2b74063fd5492b7b387ad2f6294d8deba4e0f"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 30884608,
        "transactionHash": "0x255eba7bf154eefd5456825d91a1b6885a62764c03dd019d211ccbe94e62f887",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f9a02056ad143b000000000000000000000000000000000000000000000000818b5161ee9ce4af000000000000000000000000000000000000000000004eacae0a69b8a0ab5f180000000000000000000000000000000000000000000000007f91b14197efd074000000000000000000000000000000000000000000004eacb00409d8f7587353",
        "logIndex": 256,
        "blockHash": "0x415760d4d11e7cf09deeb8b61ac2b74063fd5492b7b387ad2f6294d8deba4e0f"
      }
    ],
    "blockNumber": 30884608,
    "cumulativeGasUsed": "14300824",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "d12e8b8badbbd223dcd96726eb592fa8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract CryptoRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"},{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CryptoFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getFactoryCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"balances\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoFactoryPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MetapoolFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getMetaPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"tokens\",\"type\":\"address[4]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[4]\",\"name\":\"balances\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveMetapool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"rates\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"}],\"internalType\":\"struct CurveMulticall.CurvePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/CurveMulticall.sol\":\"CurveMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/CryptoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoFactory {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4412331482cd192c7ab98b3bf0c3440dec5ec0fd7d34a70140f1d20030f94a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CryptoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoRegistry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_zap(address pool) external view returns (address);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x340c7afdf64ec0ce95ed89bcc0c7d571ff6ab85cb95cdc42a2880548ae8412d0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/MetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface MetapoolFactory {\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 index) external view returns (address);\\n\\n    function get_base_pool(address pool) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_metapool_rates(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_implementation_address(address pool)\\n        external\\n        view\\n        returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function metapool_implementations(address basePool)\\n        external\\n        view\\n        returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x4221dfb61d7e1fc0218c70823e978720843bc373df229f8d10ac8510f7fc213d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface PoolInfo {\\n    struct Params {\\n        uint256 A;\\n        uint256 futureA;\\n        uint256 fee;\\n        uint256 adminFee;\\n        uint256 futureFee;\\n        uint256 futureAdminFee;\\n        address futureOwner;\\n        uint256 initialA;\\n        uint256 initialAtime;\\n        uint256 futureAtime;\\n    }\\n\\n    function get_pool_coins(address pool)\\n        external\\n        view\\n        returns (\\n            address[8] memory,\\n            address[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory\\n        );\\n\\n    function get_pool_info(address pool)\\n        external\\n        view\\n        returns (\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            address,\\n            Params memory,\\n            bool,\\n            string memory\\n        );\\n}\\n\",\"keccak256\":\"0x329dd6119275d43b75560b44fa4fcfad9ca09a0a9c68f9350a7700a47941e877\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface Registry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_rates(address pool) external view returns (uint256[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x3be4641f50fee1db775e270f9d1288b354c0fff12a7e6cf1b83b748db91524e0\",\"license\":\"GPL-3.0\"},\"contracts/multicall/CurveMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/curve/Registry.sol\\\";\\nimport \\\"../interfaces/curve/PoolInfo.sol\\\";\\nimport \\\"../interfaces/curve/MetapoolFactory.sol\\\";\\nimport \\\"../interfaces/curve/CryptoRegistry.sol\\\";\\nimport \\\"../interfaces/curve/CryptoFactory.sol\\\";\\n\\ncontract CurveMulticall is Ownable {\\n    struct BasePool {\\n        address poolAddress;\\n    }\\n\\n    struct CurvePool {\\n        address poolAddress;\\n        address[8] tokens;\\n        address[8] underlyingTokens;\\n        uint256[8] balances;\\n        uint256[8] underlyingBalances;\\n        uint256[8] rates;\\n        address lpToken;\\n        bool isMeta;\\n        string name;\\n        uint256 assetType;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n    }\\n\\n    struct CurveMetapool {\\n        address poolAddress;\\n        string name;\\n        address basePool;\\n        address[4] tokens;\\n        address[8] underlyingTokens;\\n        uint256[4] balances;\\n        uint256[8] underlyingBalances;\\n        bool isMeta;\\n        uint256 assetType;\\n        address gauge;\\n    }\\n\\n    struct CurveCryptoPool {\\n        address poolAddress;\\n        address[8] tokens;\\n        uint256[8] balances;\\n        address lpToken;\\n        string name;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n        address zap;\\n    }\\n\\n    struct CurveCryptoFactoryPool {\\n        address poolAddress;\\n        address[2] tokens;\\n        uint256[2] balances;\\n        address gauge;\\n    }\\n\\n    function getPools(\\n        Registry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurvePool[] memory pools) {\\n        pools = new CurvePool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            address[8] memory underlyingTokens = registry.get_underlying_coins(\\n                pool\\n            );\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            uint256[8] memory underlyingBalances = registry\\n                .get_underlying_balances(pool);\\n            uint256[8] memory rates = registry.get_rates(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            bool isMeta = registry.is_meta(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256 assetType = registry.get_pool_asset_type(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n\\n            pools[index - from] = CurvePool(\\n                pool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                rates,\\n                lpToken,\\n                isMeta,\\n                name,\\n                assetType,\\n                gauges,\\n                gaugeTypes\\n            );\\n        }\\n    }\\n\\n    function getMetaPools(\\n        MetapoolFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveMetapool[] memory pools) {\\n        pools = new CurveMetapool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address basePool = factory.get_base_pool(pool);\\n            address[4] memory tokens = factory.get_coins(pool);\\n            bool isMeta = factory.is_meta(pool);\\n            address[8] memory underlyingTokens;\\n            if (isMeta) {\\n                underlyingTokens = factory.get_underlying_coins(pool);\\n            }\\n            uint256[4] memory balances = factory.get_balances(pool);\\n            uint256[8] memory underlyingBalances;\\n            if (isMeta) {\\n                underlyingBalances = factory.get_underlying_balances(pool);\\n            }\\n            uint256 assetType = factory.get_pool_asset_type(pool);\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveMetapool(\\n                pool,\\n                ERC20(pool).name(),\\n                basePool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                isMeta,\\n                assetType,\\n                gauge\\n            );\\n        }\\n    }\\n\\n    function getCryptoPools(\\n        CryptoRegistry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoPool[] memory pools) {\\n        pools = new CurveCryptoPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n            address zap = registry.get_zap(pool);\\n\\n            pools[index - from] = CurveCryptoPool(\\n                pool,\\n                tokens,\\n                balances,\\n                lpToken,\\n                name,\\n                gauges,\\n                gaugeTypes,\\n                zap\\n            );\\n        }\\n    }\\n\\n    function getFactoryCryptoPools(\\n        CryptoFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoFactoryPool[] memory pools) {\\n        pools = new CurveCryptoFactoryPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address[2] memory tokens = factory.get_coins(pool);\\n            uint256[2] memory balances = factory.get_balances(pool);\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveCryptoFactoryPool(\\n                pool,\\n                tokens,\\n                balances,\\n                gauge\\n            );\\n        }\\n    }\\n\\n    // Shouldn't hold funds, just in case.\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x75ca7bbb292fcde05bae2516f1173d27d76554e34daa195b06068b4b1afcb595\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a3612f4290816100618239f35b600080fdfe6101206040526004361015610014575b600080fd5b60008060a052803560e01c908163030e3b08146100bb575080631d8b12fe146100b257806322471113146100a957806324ae6a27146100a0578063715018a6146100975780638da5cb5b1461008e578063bea72365146100855763f2fde38b1461007d57600080fd5b61000f612380565b5061000f611fe9565b5061000f611eba565b5061000f611e15565b5061000f611c85565b5061000f6116f9565b5061000f610d6f565b346108ab57606090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108ab5750600435906100fa826108ae565b6101026108cc565b608090815261010f6108dd565b61ffff9073ffffffffffffffffffffffffffffffffffffffff610133838316612aed565b95845160c05216610100525b61015461014d828551612830565b61ffff1690565b8260c051161015610899576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815260c05161ffff1660048201526101549161014d9160208180602481010381610100515afa801561088c575b60a05160e05261086b575b506040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015261055c9060208180602481010381610100515afa90811561085e575b60a0519161083f575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff1660048201528890888180602481010381610100515afa908115610832575b60a05191610805575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015260208180602481010381610100515afa9081156107f8575b60a051916107c9575b50806102fc6126b2565b9161071d575b6040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015281908c8180602481010381610100515afa908115610710575b60a051916106e3575b506103716126b2565b91610637575b6040517f66d3966c00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff1660048201529360208580602481010381610100515afa94851561062a575b60a051956105f9575b506040517fdaf297b900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152958e9060208880602481010381610100515afa9788156105ec575b60a051986105bb575b50604051987f06fdde03000000000000000000000000000000000000000000000000000000008a5260a0518a60048173ffffffffffffffffffffffffffffffffffffffff60e051165afa998a156105ae575b60a0519a610573575b50906105169695949392916104fd61053a9b9c60406104be612655565b60e05173ffffffffffffffffffffffffffffffffffffffff1681529e8f906020820152019073ffffffffffffffffffffffffffffffffffffffff169052565b8b015289015260a088015260c0870152151560e0860152565b61010084015273ffffffffffffffffffffffffffffffffffffffff16610120830152565b61054a61014d885160c051612a8b565b90610555828b612aaa565b5288612aaa565b5061056860c051612810565b60c05291505061013f565b906104fd61059f6105169998979695949361053a9d3d8091833e6105978183612614565b810190612971565b9b5050909192939495966104a1565b6105b661285f565b610498565b6105de91985060203d6020116105e5575b6105d68183612614565b810190612847565b9638610446565b503d6105cc565b6105f461285f565b61043d565b61061c91955060203d602011610623575b6106148183612614565b810190612a06565b93386103dd565b503d61060a565b61063261285f565b6103d4565b6040517f59f4f35100000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152909150610100818060248101038183515afa9081156106d6575b60a051916106a5575b5090610377565b6106c991506101003d610100116106cf575b6106c18183612614565b81019061290a565b8f61069e565b503d6106b7565b6106de61285f565b610695565b61070391508d803d10610709575b6106fb8183612614565b810190612c1d565b8f610368565b503d6106f1565b61071861285f565b61035f565b6040517fa77576ef00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152909150610100818060248101038183515afa9081156107bc575b60a0519161078b575b5090610302565b6107af91506101003d610100116107b5575b6107a78183612614565b8101906128b1565b8d610784565b503d61079d565b6107c461285f565b61077b565b6107eb915060203d6020116107f1575b6107e38183612614565b810190612959565b8c6102f2565b503d6107d9565b61080061285f565b6102e9565b6108259150893d8b1161082b575b61081d8183612614565b810190612bc4565b8b61028c565b503d610813565b61083a61285f565b610283565b610858915060203d6020116105e5576105d68183612614565b89610225565b61086661285f565b61021c565b6108839060203d6020116105e5576105d68183612614565b60e052876101bb565b61089461285f565b6101b0565b604051806108a78782610a32565b0390f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000f57565b6024359061ffff8216820361000f57565b6044359061ffff8216820361000f57565b918091926000905b82821061090e575011610907575050565b6000910152565b915080602091830151818601520182916108f6565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361095f815180928187528780880191016108ee565b0116010190565b6000915b6004831061097757505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061096a565b6000915b600883106109b557505050565b60019073ffffffffffffffffffffffffffffffffffffffff835116815260208091019201920191906109a8565b6000915b600483106109f357505050565b6001908251815260208091019201920191906109e6565b6000915b60088310610a1b57505050565b600190825181526020809101920192019190610a0e565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a67575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610b818b5191610ac081845173ffffffffffffffffffffffffffffffffffffffff169052565b6103a0610120610add868601516103c08089870152850190610923565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610b0e60608083015190860190610966565b610b586080820151610b2560e091828801906109a4565b610b3860a08401516101e08801906109e2565b610b4b60c0840151610260880190610a0a565b8201511515610360860152565b610100810151610380850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a56565b6000915b600a8310610ba357505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610b96565b6000915b600a8310610be157505050565b6001908251600f0b81526020809101920192019190610bd4565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c30575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d5e8b5191610c8981845173ffffffffffffffffffffffffffffffffffffffff169052565b610c9984840151858301906109a4565b6106e06101608985015194610cb461012096878601906109a4565b610cc76060820151610220860190610a0a565b610cda6080820151610320860190610a0a565b610ced60a0820151610420860190610a0a565b60c081015173ffffffffffffffffffffffffffffffffffffffff1661052085015260e08101511515610540850152610d3661010082015161082080610560880152860190610923565b95810151610580850152610d546101408201516105a0860190610b92565b0151910190610bd0565b990194019401929594939190610c1f565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f5760043590610dad826108ae565b610db56108cc565b91610dbe6108dd565b9261ffff92610dce8486166126f0565b93825b610dde61014d8886612830565b82821610156115a6576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8a165afa908115611599575b60009161157a575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015286610100828060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa91821561156d575b600092611514575b506112236111ba6111516110e861107f611015610fab610f4173ffffffffffffffffffffffffffffffffffffffff986101008c604051809481927fa77576ef0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d85165afa918215611507575b6000926114e4575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa9283156114d7575b6000936114b4575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529361010090859081906024820190565b03818d85165afa9384156114a7575b600094611484575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa948515611477575b600095611454575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa958615611447575b600096611426575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa968715611419575b6000976113f8575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa9788156113eb575b6000986113d0575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113c3575b60009961139a575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a1561138d575b6000998a9b611354575b506112ac612664565b73ffffffffffffffffffffffffffffffffffffffff909c168c5260208c015260408b01528c8a0152608089015260a088015273ffffffffffffffffffffffffffffffffffffffff1660c0870152151560e08601526101008501526101208401526101408301526101608201526113228583612a8b565b61ffff16906113318289612aaa565b5261133c9087612aaa565b5061014d61134c610dde92612810565b915050610dd1565b909a5061137c9199506102803d61028011611386575b6113748183612614565b810190612a15565b98909899386112a3565b503d61136a565b61139561285f565b611299565b6102809199506113bb61128c9160203d602011610623576106148183612614565b99915061123a565b6113cb61285f565b611232565b6113e491983d8091833e6105978183612614565b96386111d1565b6113f361285f565b6111c9565b61141291975060203d6020116107f1576107e38183612614565b9538611168565b61142161285f565b611160565b61144091965060203d6020116105e5576105d68183612614565b94386110ff565b61144f61285f565b6110f7565b6114709195506101003d610100116106cf576106c18183612614565b9338611096565b61147f61285f565b61108e565b6114a09194506101003d610100116106cf576106c18183612614565b923861102c565b6114af61285f565b611024565b6114d09193506101003d610100116106cf576106c18183612614565b9138610fc2565b6114df61285f565b610fba565b6115009192506101003d610100116107b5576107a78183612614565b9038610f58565b61150f61285f565b610f50565b73ffffffffffffffffffffffffffffffffffffffff9192506111ba6111516110e861107f611015610fab610f4161155e611223986101003d610100116107b5576107a78183612614565b99985050505050505050610ebe565b61157561285f565b610eb6565b611593915060203d6020116105e5576105d68183612614565b38610e46565b6115a161285f565b610e3e565b604051806108a78882610bfb565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106115e9575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187526116e88b519161164281845173ffffffffffffffffffffffffffffffffffffffff169052565b61165284840151858301906109a4565b61166488840151610120830190610a0a565b606083015173ffffffffffffffffffffffffffffffffffffffff166102208201526104e060e06116a4608086015161050080610240870152850190610923565b946116b860a0820151610260860190610b92565b6116cb60c08201516103a0860190610bd0565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b9901940194019295949391906115d8565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004803590611738826108ae565b6117406108cc565b926117496108dd565b9361ffff93611759858716612c6c565b9473ffffffffffffffffffffffffffffffffffffffff839216915b61178161014d8986612830565b8282161015611c775761014d611b1f61178192611b198a898b60408a8151927f3a1d5d8e0000000000000000000000000000000000000000000000000000000084526020928385806117e08c86830191909161ffff6020820193169052565b0381865afa948515611c6a575b600095611c3f575b509081611afb9596611a68949351907f9ac90d3d0000000000000000000000000000000000000000000000000000000082526101008083806118568d89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611c32575b600093611c11575b5083517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1686820190815293949093600090859081906020015b03818a5afa938415611c04575b600094611be7575b50611992939461192b838d8451809381927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818c5afa938415611bda575b600094611bbb575b5050898c8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611bae575b600095611b8f575b50898c8351997f56059ffb000000000000000000000000000000000000000000000000000000008b52610280998a8c80611a008685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9b8c15611b82575b60009b8c9d611b5b575b50508551809d819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa988915611b4e575b600099611b27575b50611acf9596979899611aac611a90612671565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c01528a015288019073ffffffffffffffffffffffffffffffffffffffff169052565b608086015260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152565b611b12611b0b61014d8c87612a8b565b8093612aaa565b528b612aaa565b50612810565b915050611774565b611acf9697989950611b45908b3d8d116105e5576105d68183612614565b98979695611a7c565b611b5661285f565b611a74565b8091929d50611b77939c50903d10611386576113748183612614565b9990999a3880611a17565b611b8a61285f565b611a0d565b611ba79195508a3d8c116105e5576105d68183612614565b93386119a7565b611bb661285f565b61199f565b611bd2929450803d106106cf576106c18183612614565b913880611940565b611be261285f565b611938565b611bfe90611992953d8091833e6105978183612614565b936118d2565b611c0c61285f565b6118ca565b6118bd9350611c2c90823d84116107b5576107a78183612614565b9261186b565b611c3a61285f565b611863565b611afb955090611c60611a68949392863d88116105e5576105d68183612614565b95509091926117f5565b611c7261285f565b6117ed565b604051806108a789826115b4565b503461000f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f57611dbd600435611cc4816108ae565b611da2602435611cd3816108ae565b73ffffffffffffffffffffffffffffffffffffffff90611cf882600054163314612474565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611e08575b600093611de9575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611ddc575b600092611dbf575b5050612ea7565b005b611dd59250803d106107f1576107e38183612614565b3880611db6565b611de461285f565b611dae565b611e01919350843d8611610623576106148183612614565b9138611d47565b611e1061285f565b611d3f565b503461000f576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108ab5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611e8c338414612474565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b60208082019080835283518092528060408094019401926000905b838210611f3757505050505090565b909192939483865173ffffffffffffffffffffffffffffffffffffffff808251168452828201518385016000905b60028210611fd0575050505080840151606091906000908584015b60028310611fba57505050015173ffffffffffffffffffffffffffffffffffffffff1660a083015260019160c00196019493920190611f28565b8151815289956001909301929182019101611f80565b8251841681528995928301926001929092019101611f65565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004908135612028816108ae565b6120306108cc565b6120386108dd565b9261ffff94612048868616612d3b565b9573ffffffffffffffffffffffffffffffffffffffff849516945b61207061014d8887612830565b82821610156123725761014d61228661207092611b198b6040888151917f3a1d5d8e0000000000000000000000000000000000000000000000000000000083528d60208085806120cd8b88830191909161ffff6020820193169052565b0381855afa948515612365575b600095612338575b509161226f939161221193868351927f9ac90d3d000000000000000000000000000000000000000000000000000000008452848480612140858a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa93841561232b575b6000946122fc575b508451957f92e3cc2d0000000000000000000000000000000000000000000000000000000087528587806121a88685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9687156122ef575b6000976122ba575b509083929186518099819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa9485156122ad575b60009561228e575b5061224d61223161267e565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86015284015273ffffffffffffffffffffffffffffffffffffffff168b830152565b61227f611b0b61014d8d87612a8b565b528c612aaa565b915050612063565b816122a69296503d87116105e5576105d68183612614565b9338612225565b6122b561285f565b61221d565b8493929197506122df90873d89116122e8575b6122d78183612614565b810190612e58565b969091926121bd565b503d6122cd565b6122f761285f565b6121b5565b61231d919450853d8711612324575b6123158183612614565b810190612dff565b9238612155565b503d61230b565b61233361285f565b61214d565b8195509161235a61226f959361221195933d89116105e5576105d68183612614565b9591935091936120e2565b61236d61285f565b6120da565b604051806108a78a82611f0d565b503461000f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004356123bc816108ae565b73ffffffffffffffffffffffffffffffffffffffff6123e081600054163314612474565b8116156123f057611dbd906124d9565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561247b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610180810190811067ffffffffffffffff82111761259557604052565b61259d612548565b604052565b610140810190811067ffffffffffffffff82111761259557604052565b610100810190811067ffffffffffffffff82111761259557604052565b6080810190811067ffffffffffffffff82111761259557604052565b6040810190811067ffffffffffffffff82111761259557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761259557604052565b60405190612662826125a2565b565b6040519061266282612578565b60405190612662826125bf565b60405190612662826125dc565b60209067ffffffffffffffff81116126a5575b60051b0190565b6126ad612548565b61269e565b604051906126bf826125bf565b610100368337565b604051906126d4826125a2565b610140368337565b604051906126e9826125dc565b6080368337565b906126fa8261268b565b60409061270982519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612737829561268b565b019160005b8381106127495750505050565b602090825161275781612578565b600081526127636126b2565b81840152826127706126b2565b8583015261277c6126b2565b6060908184015261278b6126b2565b60808401526127986126b2565b60a0840152600060c0840152600060e084015261010083015260006101208301526127c16126c7565b6101408301526127cf6126c7565b61016083015282860101520161273c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114612824570190565b61282c6127e0565b0190565b9061ffff8080931691168092038111612824570190565b9081602091031261000f575161285c816108ae565b90565b506040513d6000823e3d90fd5b91906040519261287b846125a2565b8390610140810192831161000f57905b82821061289757505050565b6020809183516128a6816108ae565b81520191019061288b565b90610100808383031261000f5781601f8401121561000f57604051926128d6846125bf565b8391810192831161000f57905b8282106128f05750505090565b6020809183516128ff816108ae565b8152019101906128e3565b90610100808383031261000f5781601f8401121561000f576040519261292f846125bf565b8391810192831161000f57905b8282106129495750505090565b815181526020918201910161293c565b9081602091031261000f5751801515810361000f5790565b60208183031261000f57805167ffffffffffffffff9182821161000f57019082601f8301121561000f5781519081116129f9575b604051926129db60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185612614565b8184526020828401011161000f5761285c91602080850191016108ee565b612a01612548565b6129a5565b9081602091031261000f575190565b919091610280808285031261000f5783601f8301121561000f57612a39848361286c565b938061015f8401121561000f5760405192612a53846125a2565b8392810191821161000f5761014001915b818310612a715750505090565b825180600f0b810361000f57815260209283019201612a64565b61ffff9182169116818110612a9e570390565b612aa66127e0565b0390565b8051821015612abe5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612af78261268b565b604090612b0682519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612b34829561268b565b019160005b838110612b465750505050565b6020908251612b54816125a2565b600081526060839080828401526000868401528551612b72816125dc565b60809182368337840152612b846126b2565b90830152612b906126dc565b60a0830152612b9d6126b2565b60c0830152600060e083015260006101008301526000610120830152828601015201612b39565b9060808282031261000f5780601f8301121561000f5760405191612be7836125dc565b82906080810192831161000f57905b828210612c035750505090565b602080918351612c12816108ae565b815201910190612bf6565b9060808282031261000f5780601f8301121561000f5760405191612c40836125dc565b82906080810192831161000f57905b828210612c5c5750505090565b8151815260209182019101612c4f565b90612c768261268b565b604090612c8582519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612cb3829561268b565b0191600091825b848110612cc8575050505050565b6020908351612cd6816125bf565b8581528451612ce4816125bf565b61010080368337849182840152865190612cfd826125bf565b36823786830152606087818401526080830152612d186126c7565b60a0830152612d256126c7565b60c08301528660e0830152828501015201612cba565b90612d458261268b565b604090612d5482519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612d82829561268b565b0191600091825b848110612d97575050505050565b60209083516080810181811067ffffffffffffffff821117612df2575b85528581528451612dc4816125f8565b853682378390818301528551612dd9816125f8565b8636823786830152866060830152828501015201612d89565b612dfa612548565b612db4565b9060408282031261000f5780601f8301121561000f5760405191612e22836125f8565b82906040810192831161000f57905b828210612e3e5750505090565b602080918351612e4d816108ae565b815201910190612e31565b9060408282031261000f5780601f8301121561000f5760405191612e7b836125f8565b82906040810192831161000f57905b828210612e975750505090565b8151815260209182019101612e8a565b15612eae57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea26469706673582212206c73613c0970d191246c8eeaa44a2366a8ee935a869ad35f528264c43179b84264736f6c634300080d0033",
  "deployedBytecode": "0x6101206040526004361015610014575b600080fd5b60008060a052803560e01c908163030e3b08146100bb575080631d8b12fe146100b257806322471113146100a957806324ae6a27146100a0578063715018a6146100975780638da5cb5b1461008e578063bea72365146100855763f2fde38b1461007d57600080fd5b61000f612380565b5061000f611fe9565b5061000f611eba565b5061000f611e15565b5061000f611c85565b5061000f6116f9565b5061000f610d6f565b346108ab57606090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108ab5750600435906100fa826108ae565b6101026108cc565b608090815261010f6108dd565b61ffff9073ffffffffffffffffffffffffffffffffffffffff610133838316612aed565b95845160c05216610100525b61015461014d828551612830565b61ffff1690565b8260c051161015610899576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815260c05161ffff1660048201526101549161014d9160208180602481010381610100515afa801561088c575b60a05160e05261086b575b506040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015261055c9060208180602481010381610100515afa90811561085e575b60a0519161083f575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff1660048201528890888180602481010381610100515afa908115610832575b60a05191610805575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015260208180602481010381610100515afa9081156107f8575b60a051916107c9575b50806102fc6126b2565b9161071d575b6040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff16600482015281908c8180602481010381610100515afa908115610710575b60a051916106e3575b506103716126b2565b91610637575b6040517f66d3966c00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff1660048201529360208580602481010381610100515afa94851561062a575b60a051956105f9575b506040517fdaf297b900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152958e9060208880602481010381610100515afa9788156105ec575b60a051986105bb575b50604051987f06fdde03000000000000000000000000000000000000000000000000000000008a5260a0518a60048173ffffffffffffffffffffffffffffffffffffffff60e051165afa998a156105ae575b60a0519a610573575b50906105169695949392916104fd61053a9b9c60406104be612655565b60e05173ffffffffffffffffffffffffffffffffffffffff1681529e8f906020820152019073ffffffffffffffffffffffffffffffffffffffff169052565b8b015289015260a088015260c0870152151560e0860152565b61010084015273ffffffffffffffffffffffffffffffffffffffff16610120830152565b61054a61014d885160c051612a8b565b90610555828b612aaa565b5288612aaa565b5061056860c051612810565b60c05291505061013f565b906104fd61059f6105169998979695949361053a9d3d8091833e6105978183612614565b810190612971565b9b5050909192939495966104a1565b6105b661285f565b610498565b6105de91985060203d6020116105e5575b6105d68183612614565b810190612847565b9638610446565b503d6105cc565b6105f461285f565b61043d565b61061c91955060203d602011610623575b6106148183612614565b810190612a06565b93386103dd565b503d61060a565b61063261285f565b6103d4565b6040517f59f4f35100000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152909150610100818060248101038183515afa9081156106d6575b60a051916106a5575b5090610377565b6106c991506101003d610100116106cf575b6106c18183612614565b81019061290a565b8f61069e565b503d6106b7565b6106de61285f565b610695565b61070391508d803d10610709575b6106fb8183612614565b810190612c1d565b8f610368565b503d6106f1565b61071861285f565b61035f565b6040517fa77576ef00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff166004820152909150610100818060248101038183515afa9081156107bc575b60a0519161078b575b5090610302565b6107af91506101003d610100116107b5575b6107a78183612614565b8101906128b1565b8d610784565b503d61079d565b6107c461285f565b61077b565b6107eb915060203d6020116107f1575b6107e38183612614565b810190612959565b8c6102f2565b503d6107d9565b61080061285f565b6102e9565b6108259150893d8b1161082b575b61081d8183612614565b810190612bc4565b8b61028c565b503d610813565b61083a61285f565b610283565b610858915060203d6020116105e5576105d68183612614565b89610225565b61086661285f565b61021c565b6108839060203d6020116105e5576105d68183612614565b60e052876101bb565b61089461285f565b6101b0565b604051806108a78782610a32565b0390f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000f57565b6024359061ffff8216820361000f57565b6044359061ffff8216820361000f57565b918091926000905b82821061090e575011610907575050565b6000910152565b915080602091830151818601520182916108f6565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361095f815180928187528780880191016108ee565b0116010190565b6000915b6004831061097757505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061096a565b6000915b600883106109b557505050565b60019073ffffffffffffffffffffffffffffffffffffffff835116815260208091019201920191906109a8565b6000915b600483106109f357505050565b6001908251815260208091019201920191906109e6565b6000915b60088310610a1b57505050565b600190825181526020809101920192019190610a0e565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a67575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610b818b5191610ac081845173ffffffffffffffffffffffffffffffffffffffff169052565b6103a0610120610add868601516103c08089870152850190610923565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610b0e60608083015190860190610966565b610b586080820151610b2560e091828801906109a4565b610b3860a08401516101e08801906109e2565b610b4b60c0840151610260880190610a0a565b8201511515610360860152565b610100810151610380850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a56565b6000915b600a8310610ba357505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610b96565b6000915b600a8310610be157505050565b6001908251600f0b81526020809101920192019190610bd4565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c30575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d5e8b5191610c8981845173ffffffffffffffffffffffffffffffffffffffff169052565b610c9984840151858301906109a4565b6106e06101608985015194610cb461012096878601906109a4565b610cc76060820151610220860190610a0a565b610cda6080820151610320860190610a0a565b610ced60a0820151610420860190610a0a565b60c081015173ffffffffffffffffffffffffffffffffffffffff1661052085015260e08101511515610540850152610d3661010082015161082080610560880152860190610923565b95810151610580850152610d546101408201516105a0860190610b92565b0151910190610bd0565b990194019401929594939190610c1f565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f5760043590610dad826108ae565b610db56108cc565b91610dbe6108dd565b9261ffff92610dce8486166126f0565b93825b610dde61014d8886612830565b82821610156115a6576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8a165afa908115611599575b60009161157a575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015286610100828060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa91821561156d575b600092611514575b506112236111ba6111516110e861107f611015610fab610f4173ffffffffffffffffffffffffffffffffffffffff986101008c604051809481927fa77576ef0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d85165afa918215611507575b6000926114e4575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa9283156114d7575b6000936114b4575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529361010090859081906024820190565b03818d85165afa9384156114a7575b600094611484575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa948515611477575b600095611454575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa958615611447575b600096611426575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa968715611419575b6000976113f8575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa9788156113eb575b6000986113d0575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113c3575b60009961139a575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a1561138d575b6000998a9b611354575b506112ac612664565b73ffffffffffffffffffffffffffffffffffffffff909c168c5260208c015260408b01528c8a0152608089015260a088015273ffffffffffffffffffffffffffffffffffffffff1660c0870152151560e08601526101008501526101208401526101408301526101608201526113228583612a8b565b61ffff16906113318289612aaa565b5261133c9087612aaa565b5061014d61134c610dde92612810565b915050610dd1565b909a5061137c9199506102803d61028011611386575b6113748183612614565b810190612a15565b98909899386112a3565b503d61136a565b61139561285f565b611299565b6102809199506113bb61128c9160203d602011610623576106148183612614565b99915061123a565b6113cb61285f565b611232565b6113e491983d8091833e6105978183612614565b96386111d1565b6113f361285f565b6111c9565b61141291975060203d6020116107f1576107e38183612614565b9538611168565b61142161285f565b611160565b61144091965060203d6020116105e5576105d68183612614565b94386110ff565b61144f61285f565b6110f7565b6114709195506101003d610100116106cf576106c18183612614565b9338611096565b61147f61285f565b61108e565b6114a09194506101003d610100116106cf576106c18183612614565b923861102c565b6114af61285f565b611024565b6114d09193506101003d610100116106cf576106c18183612614565b9138610fc2565b6114df61285f565b610fba565b6115009192506101003d610100116107b5576107a78183612614565b9038610f58565b61150f61285f565b610f50565b73ffffffffffffffffffffffffffffffffffffffff9192506111ba6111516110e861107f611015610fab610f4161155e611223986101003d610100116107b5576107a78183612614565b99985050505050505050610ebe565b61157561285f565b610eb6565b611593915060203d6020116105e5576105d68183612614565b38610e46565b6115a161285f565b610e3e565b604051806108a78882610bfb565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106115e9575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187526116e88b519161164281845173ffffffffffffffffffffffffffffffffffffffff169052565b61165284840151858301906109a4565b61166488840151610120830190610a0a565b606083015173ffffffffffffffffffffffffffffffffffffffff166102208201526104e060e06116a4608086015161050080610240870152850190610923565b946116b860a0820151610260860190610b92565b6116cb60c08201516103a0860190610bd0565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b9901940194019295949391906115d8565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004803590611738826108ae565b6117406108cc565b926117496108dd565b9361ffff93611759858716612c6c565b9473ffffffffffffffffffffffffffffffffffffffff839216915b61178161014d8986612830565b8282161015611c775761014d611b1f61178192611b198a898b60408a8151927f3a1d5d8e0000000000000000000000000000000000000000000000000000000084526020928385806117e08c86830191909161ffff6020820193169052565b0381865afa948515611c6a575b600095611c3f575b509081611afb9596611a68949351907f9ac90d3d0000000000000000000000000000000000000000000000000000000082526101008083806118568d89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611c32575b600093611c11575b5083517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1686820190815293949093600090859081906020015b03818a5afa938415611c04575b600094611be7575b50611992939461192b838d8451809381927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818c5afa938415611bda575b600094611bbb575b5050898c8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611bae575b600095611b8f575b50898c8351997f56059ffb000000000000000000000000000000000000000000000000000000008b52610280998a8c80611a008685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9b8c15611b82575b60009b8c9d611b5b575b50508551809d819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa988915611b4e575b600099611b27575b50611acf9596979899611aac611a90612671565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c01528a015288019073ffffffffffffffffffffffffffffffffffffffff169052565b608086015260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152565b611b12611b0b61014d8c87612a8b565b8093612aaa565b528b612aaa565b50612810565b915050611774565b611acf9697989950611b45908b3d8d116105e5576105d68183612614565b98979695611a7c565b611b5661285f565b611a74565b8091929d50611b77939c50903d10611386576113748183612614565b9990999a3880611a17565b611b8a61285f565b611a0d565b611ba79195508a3d8c116105e5576105d68183612614565b93386119a7565b611bb661285f565b61199f565b611bd2929450803d106106cf576106c18183612614565b913880611940565b611be261285f565b611938565b611bfe90611992953d8091833e6105978183612614565b936118d2565b611c0c61285f565b6118ca565b6118bd9350611c2c90823d84116107b5576107a78183612614565b9261186b565b611c3a61285f565b611863565b611afb955090611c60611a68949392863d88116105e5576105d68183612614565b95509091926117f5565b611c7261285f565b6117ed565b604051806108a789826115b4565b503461000f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f57611dbd600435611cc4816108ae565b611da2602435611cd3816108ae565b73ffffffffffffffffffffffffffffffffffffffff90611cf882600054163314612474565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611e08575b600093611de9575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611ddc575b600092611dbf575b5050612ea7565b005b611dd59250803d106107f1576107e38183612614565b3880611db6565b611de461285f565b611dae565b611e01919350843d8611610623576106148183612614565b9138611d47565b611e1061285f565b611d3f565b503461000f576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108ab5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611e8c338414612474565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000f5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b60208082019080835283518092528060408094019401926000905b838210611f3757505050505090565b909192939483865173ffffffffffffffffffffffffffffffffffffffff808251168452828201518385016000905b60028210611fd0575050505080840151606091906000908584015b60028310611fba57505050015173ffffffffffffffffffffffffffffffffffffffff1660a083015260019160c00196019493920190611f28565b8151815289956001909301929182019101611f80565b8251841681528995928301926001929092019101611f65565b503461000f576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004908135612028816108ae565b6120306108cc565b6120386108dd565b9261ffff94612048868616612d3b565b9573ffffffffffffffffffffffffffffffffffffffff849516945b61207061014d8887612830565b82821610156123725761014d61228661207092611b198b6040888151917f3a1d5d8e0000000000000000000000000000000000000000000000000000000083528d60208085806120cd8b88830191909161ffff6020820193169052565b0381855afa948515612365575b600095612338575b509161226f939161221193868351927f9ac90d3d000000000000000000000000000000000000000000000000000000008452848480612140858a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa93841561232b575b6000946122fc575b508451957f92e3cc2d0000000000000000000000000000000000000000000000000000000087528587806121a88685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9687156122ef575b6000976122ba575b509083929186518099819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa9485156122ad575b60009561228e575b5061224d61223161267e565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86015284015273ffffffffffffffffffffffffffffffffffffffff168b830152565b61227f611b0b61014d8d87612a8b565b528c612aaa565b915050612063565b816122a69296503d87116105e5576105d68183612614565b9338612225565b6122b561285f565b61221d565b8493929197506122df90873d89116122e8575b6122d78183612614565b810190612e58565b969091926121bd565b503d6122cd565b6122f761285f565b6121b5565b61231d919450853d8711612324575b6123158183612614565b810190612dff565b9238612155565b503d61230b565b61233361285f565b61214d565b8195509161235a61226f959361221195933d89116105e5576105d68183612614565b9591935091936120e2565b61236d61285f565b6120da565b604051806108a78a82611f0d565b503461000f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000f576004356123bc816108ae565b73ffffffffffffffffffffffffffffffffffffffff6123e081600054163314612474565b8116156123f057611dbd906124d9565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561247b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610180810190811067ffffffffffffffff82111761259557604052565b61259d612548565b604052565b610140810190811067ffffffffffffffff82111761259557604052565b610100810190811067ffffffffffffffff82111761259557604052565b6080810190811067ffffffffffffffff82111761259557604052565b6040810190811067ffffffffffffffff82111761259557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761259557604052565b60405190612662826125a2565b565b6040519061266282612578565b60405190612662826125bf565b60405190612662826125dc565b60209067ffffffffffffffff81116126a5575b60051b0190565b6126ad612548565b61269e565b604051906126bf826125bf565b610100368337565b604051906126d4826125a2565b610140368337565b604051906126e9826125dc565b6080368337565b906126fa8261268b565b60409061270982519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612737829561268b565b019160005b8381106127495750505050565b602090825161275781612578565b600081526127636126b2565b81840152826127706126b2565b8583015261277c6126b2565b6060908184015261278b6126b2565b60808401526127986126b2565b60a0840152600060c0840152600060e084015261010083015260006101208301526127c16126c7565b6101408301526127cf6126c7565b61016083015282860101520161273c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114612824570190565b61282c6127e0565b0190565b9061ffff8080931691168092038111612824570190565b9081602091031261000f575161285c816108ae565b90565b506040513d6000823e3d90fd5b91906040519261287b846125a2565b8390610140810192831161000f57905b82821061289757505050565b6020809183516128a6816108ae565b81520191019061288b565b90610100808383031261000f5781601f8401121561000f57604051926128d6846125bf565b8391810192831161000f57905b8282106128f05750505090565b6020809183516128ff816108ae565b8152019101906128e3565b90610100808383031261000f5781601f8401121561000f576040519261292f846125bf565b8391810192831161000f57905b8282106129495750505090565b815181526020918201910161293c565b9081602091031261000f5751801515810361000f5790565b60208183031261000f57805167ffffffffffffffff9182821161000f57019082601f8301121561000f5781519081116129f9575b604051926129db60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185612614565b8184526020828401011161000f5761285c91602080850191016108ee565b612a01612548565b6129a5565b9081602091031261000f575190565b919091610280808285031261000f5783601f8301121561000f57612a39848361286c565b938061015f8401121561000f5760405192612a53846125a2565b8392810191821161000f5761014001915b818310612a715750505090565b825180600f0b810361000f57815260209283019201612a64565b61ffff9182169116818110612a9e570390565b612aa66127e0565b0390565b8051821015612abe5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612af78261268b565b604090612b0682519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612b34829561268b565b019160005b838110612b465750505050565b6020908251612b54816125a2565b600081526060839080828401526000868401528551612b72816125dc565b60809182368337840152612b846126b2565b90830152612b906126dc565b60a0830152612b9d6126b2565b60c0830152600060e083015260006101008301526000610120830152828601015201612b39565b9060808282031261000f5780601f8301121561000f5760405191612be7836125dc565b82906080810192831161000f57905b828210612c035750505090565b602080918351612c12816108ae565b815201910190612bf6565b9060808282031261000f5780601f8301121561000f5760405191612c40836125dc565b82906080810192831161000f57905b828210612c5c5750505090565b8151815260209182019101612c4f565b90612c768261268b565b604090612c8582519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612cb3829561268b565b0191600091825b848110612cc8575050505050565b6020908351612cd6816125bf565b8581528451612ce4816125bf565b61010080368337849182840152865190612cfd826125bf565b36823786830152606087818401526080830152612d186126c7565b60a0830152612d256126c7565b60c08301528660e0830152828501015201612cba565b90612d458261268b565b604090612d5482519182612614565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612d82829561268b565b0191600091825b848110612d97575050505050565b60209083516080810181811067ffffffffffffffff821117612df2575b85528581528451612dc4816125f8565b853682378390818301528551612dd9816125f8565b8636823786830152866060830152828501015201612d89565b612dfa612548565b612db4565b9060408282031261000f5780601f8301121561000f5760405191612e22836125f8565b82906040810192831161000f57905b828210612e3e5750505090565b602080918351612e4d816108ae565b815201910190612e31565b9060408282031261000f5780601f8301121561000f5760405191612e7b836125f8565b82906040810192831161000f57905b828210612e975750505090565b8151815260209182019101612e8a565b15612eae57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea26469706673582212206c73613c0970d191246c8eeaa44a2366a8ee935a869ad35f528264c43179b84264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/CurveMulticall.sol:CurveMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}