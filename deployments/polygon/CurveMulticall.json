{
  "address": "0x425c9eA5aad6e8ceA1A4A9aD53731D5e124bF3A2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            },
            {
              "internalType": "address",
              "name": "zap",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CryptoFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getFactoryCryptoPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address[2]",
              "name": "tokens",
              "type": "address[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "balances",
              "type": "uint256[2]"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveCryptoFactoryPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MetapoolFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getMetaPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "basePool",
              "type": "address"
            },
            {
              "internalType": "address[4]",
              "name": "tokens",
              "type": "address[4]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[4]",
              "name": "balances",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            }
          ],
          "internalType": "struct CurveMulticall.CurveMetapool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address[8]",
              "name": "tokens",
              "type": "address[8]"
            },
            {
              "internalType": "address[8]",
              "name": "underlyingTokens",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "rates",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "assetType",
              "type": "uint256"
            },
            {
              "internalType": "address[10]",
              "name": "gauges",
              "type": "address[10]"
            },
            {
              "internalType": "int128[10]",
              "name": "gaugeTypes",
              "type": "int128[10]"
            }
          ],
          "internalType": "struct CurveMulticall.CurvePool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7af283f3f32118c9e96d255cedbbc635d729eaa7f173693135f01930ca9cb41d",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x425c9eA5aad6e8ceA1A4A9aD53731D5e124bF3A2",
    "transactionIndex": 24,
    "gasUsed": "2740513",
    "logsBloom": "0x
    "blockHash": "0xdddd7ad3951fa38cf35ddbaa09fc6f212d7373511e89a7c76edd9188880210ae",
    "transactionHash": "0x7af283f3f32118c9e96d255cedbbc635d729eaa7f173693135f01930ca9cb41d",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 30925477,
        "transactionHash": "0x7af283f3f32118c9e96d255cedbbc635d729eaa7f173693135f01930ca9cb41d",
        "address": "0x425c9eA5aad6e8ceA1A4A9aD53731D5e124bF3A2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0xdddd7ad3951fa38cf35ddbaa09fc6f212d7373511e89a7c76edd9188880210ae"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 30925477,
        "transactionHash": "0x7af283f3f32118c9e96d255cedbbc635d729eaa7f173693135f01930ca9cb41d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000024a1f6b630356440000000000000000000000000000000000000000000000007cc372aa805ff8680000000000000000000000000000000000000000000051241d073641b03a8fda0000000000000000000000000000000000000000000000007a79533f1d5ca2240000000000000000000000000000000000000000000051241f5155ad133de61e",
        "logIndex": 87,
        "blockHash": "0xdddd7ad3951fa38cf35ddbaa09fc6f212d7373511e89a7c76edd9188880210ae"
      }
    ],
    "blockNumber": 30925477,
    "cumulativeGasUsed": "6301975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "5d650b94aba909da86f57c83ec9bdcee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract CryptoRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"},{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CryptoFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getFactoryCryptoPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"balances\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveCryptoFactoryPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MetapoolFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getMetaPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"tokens\",\"type\":\"address[4]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[4]\",\"name\":\"balances\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"internalType\":\"struct CurveMulticall.CurveMetapool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"},{\"internalType\":\"address[8]\",\"name\":\"underlyingTokens\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"rates\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetType\",\"type\":\"uint256\"},{\"internalType\":\"address[10]\",\"name\":\"gauges\",\"type\":\"address[10]\"},{\"internalType\":\"int128[10]\",\"name\":\"gaugeTypes\",\"type\":\"int128[10]\"}],\"internalType\":\"struct CurveMulticall.CurvePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/CurveMulticall.sol\":\"CurveMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/CryptoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoFactory {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4412331482cd192c7ab98b3bf0c3440dec5ec0fd7d34a70140f1d20030f94a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CryptoFactoryPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CryptoFactoryPool is IERC20 {\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfa2bca19303de6303d1836ace81ee3dce5a0e90b8e3b0ed4c9ec7e42c1185ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/CryptoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface CryptoRegistry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_zap(address pool) external view returns (address);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x340c7afdf64ec0ce95ed89bcc0c7d571ff6ab85cb95cdc42a2880548ae8412d0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/MetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface MetapoolFactory {\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 index) external view returns (address);\\n\\n    function get_base_pool(address pool) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_metapool_rates(address pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[4] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_implementation_address(address pool)\\n        external\\n        view\\n        returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function metapool_implementations(address basePool)\\n        external\\n        view\\n        returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x4221dfb61d7e1fc0218c70823e978720843bc373df229f8d10ac8510f7fc213d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface PoolInfo {\\n    struct Params {\\n        uint256 A;\\n        uint256 futureA;\\n        uint256 fee;\\n        uint256 adminFee;\\n        uint256 futureFee;\\n        uint256 futureAdminFee;\\n        address futureOwner;\\n        uint256 initialA;\\n        uint256 initialAtime;\\n        uint256 futureAtime;\\n    }\\n\\n    function get_pool_coins(address pool)\\n        external\\n        view\\n        returns (\\n            address[8] memory,\\n            address[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory\\n        );\\n\\n    function get_pool_info(address pool)\\n        external\\n        view\\n        returns (\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            uint256[8] memory,\\n            address,\\n            Params memory,\\n            bool,\\n            string memory\\n        );\\n}\\n\",\"keccak256\":\"0x329dd6119275d43b75560b44fa4fcfad9ca09a0a9c68f9350a7700a47941e877\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface Registry {\\n    function pool_list(uint256 index) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_rates(address pool) external view returns (uint256[8] memory);\\n\\n    function get_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_balances(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_decimals(address pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_pool_name(address pool) external view returns (string memory);\\n\\n    function get_pool_asset_type(address pool) external view returns (uint256);\\n\\n    function get_gauges(address pool)\\n        external\\n        view\\n        returns (address[10] memory, int128[10] memory);\\n}\\n\",\"keccak256\":\"0x3be4641f50fee1db775e270f9d1288b354c0fff12a7e6cf1b83b748db91524e0\",\"license\":\"GPL-3.0\"},\"contracts/multicall/CurveMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/curve/Registry.sol\\\";\\nimport \\\"../interfaces/curve/PoolInfo.sol\\\";\\nimport \\\"../interfaces/curve/MetapoolFactory.sol\\\";\\nimport \\\"../interfaces/curve/CryptoRegistry.sol\\\";\\nimport \\\"../interfaces/curve/CryptoFactory.sol\\\";\\nimport \\\"../interfaces/curve/CryptoFactoryPool.sol\\\";\\n\\ncontract CurveMulticall is Ownable {\\n    struct BasePool {\\n        address poolAddress;\\n    }\\n\\n    struct CurvePool {\\n        address poolAddress;\\n        address[8] tokens;\\n        address[8] underlyingTokens;\\n        uint256[8] balances;\\n        uint256[8] underlyingBalances;\\n        uint256[8] rates;\\n        address lpToken;\\n        bool isMeta;\\n        string name;\\n        uint256 assetType;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n    }\\n\\n    struct CurveMetapool {\\n        address poolAddress;\\n        string name;\\n        address basePool;\\n        address[4] tokens;\\n        address[8] underlyingTokens;\\n        uint256[4] balances;\\n        uint256[8] underlyingBalances;\\n        bool isMeta;\\n        uint256 assetType;\\n        address gauge;\\n    }\\n\\n    struct CurveCryptoPool {\\n        address poolAddress;\\n        address[8] tokens;\\n        uint256[8] balances;\\n        address lpToken;\\n        string name;\\n        address[10] gauges;\\n        int128[10] gaugeTypes;\\n        address zap;\\n    }\\n\\n    struct CurveCryptoFactoryPool {\\n        address poolAddress;\\n        address lpToken;\\n        address[2] tokens;\\n        uint256[2] balances;\\n        address gauge;\\n    }\\n\\n    function getPools(\\n        Registry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurvePool[] memory pools) {\\n        pools = new CurvePool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            address[8] memory underlyingTokens = registry.get_underlying_coins(\\n                pool\\n            );\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            uint256[8] memory underlyingBalances = registry\\n                .get_underlying_balances(pool);\\n            uint256[8] memory rates = registry.get_rates(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            bool isMeta = registry.is_meta(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256 assetType = registry.get_pool_asset_type(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n\\n            pools[index - from] = CurvePool(\\n                pool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                rates,\\n                lpToken,\\n                isMeta,\\n                name,\\n                assetType,\\n                gauges,\\n                gaugeTypes\\n            );\\n        }\\n    }\\n\\n    function getMetaPools(\\n        MetapoolFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveMetapool[] memory pools) {\\n        pools = new CurveMetapool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address basePool = factory.get_base_pool(pool);\\n            address[4] memory tokens = factory.get_coins(pool);\\n            bool isMeta = factory.is_meta(pool);\\n            address[8] memory underlyingTokens;\\n            if (isMeta) {\\n                underlyingTokens = factory.get_underlying_coins(pool);\\n            }\\n            uint256[4] memory balances = factory.get_balances(pool);\\n            uint256[8] memory underlyingBalances;\\n            if (isMeta) {\\n                underlyingBalances = factory.get_underlying_balances(pool);\\n            }\\n            uint256 assetType = factory.get_pool_asset_type(pool);\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveMetapool(\\n                pool,\\n                ERC20(pool).name(),\\n                basePool,\\n                tokens,\\n                underlyingTokens,\\n                balances,\\n                underlyingBalances,\\n                isMeta,\\n                assetType,\\n                gauge\\n            );\\n        }\\n    }\\n\\n    function getCryptoPools(\\n        CryptoRegistry registry,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoPool[] memory pools) {\\n        pools = new CurveCryptoPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = registry.pool_list(index);\\n\\n            address[8] memory tokens = registry.get_coins(pool);\\n            string memory name = registry.get_pool_name(pool);\\n            uint256[8] memory balances = registry.get_balances(pool);\\n            address lpToken = registry.get_lp_token(pool);\\n            (address[10] memory gauges, int128[10] memory gaugeTypes) = registry\\n                .get_gauges(pool);\\n            address zap = registry.get_zap(pool);\\n\\n            pools[index - from] = CurveCryptoPool(\\n                pool,\\n                tokens,\\n                balances,\\n                lpToken,\\n                name,\\n                gauges,\\n                gaugeTypes,\\n                zap\\n            );\\n        }\\n    }\\n\\n    function getFactoryCryptoPools(\\n        CryptoFactory factory,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurveCryptoFactoryPool[] memory pools) {\\n        pools = new CurveCryptoFactoryPool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address pool = factory.pool_list(index);\\n\\n            address[2] memory tokens = factory.get_coins(pool);\\n            uint256[2] memory balances = factory.get_balances(pool);\\n            address lpToken = CryptoFactoryPool(pool).token();\\n            address gauge = factory.get_gauge(pool);\\n\\n            pools[index - from] = CurveCryptoFactoryPool(\\n                pool,\\n                lpToken,\\n                tokens,\\n                balances,\\n                gauge\\n            );\\n        }\\n    }\\n\\n    // Shouldn't hold funds, just in case.\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb1dd5e91f7677796fd726288dda35d58d7a84ba411da646dffb88de53085c979\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361306590816100618239f35b600080fdfe61012060405260048036101561001457600080fd5b6000908160c052813560e01c918263030e3b08146100c457505080631d8b12fe146100bb57806322471113146100b257806324ae6a27146100a9578063715018a6146100a05780638da5cb5b14610097578063bea723651461008e5763f2fde38b14610081575b38600080fd5b61008961248b565b61007b565b5061008961203d565b50610089611eee565b50610089611e49565b50610089611cb9565b5061008961172d565b50610089610da3565b346108da57606090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108da5750813591610102836108dd565b61010a610900565b60a052610115610911565b61ffff9073ffffffffffffffffffffffffffffffffffffffff610139838316612c0b565b9560a05160805216610100525b61015c6101558260a05161294e565b61ffff1690565b826080511610156108c85761015561015c916040517f3a1d5d8e000000000000000000000000000000000000000000000000000000008152602081806101b16080518a830191909161ffff6020820193169052565b0381610100515afa80156108bb575b60c05160e05261089a575b506105946020610571876040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815283818061022960e05186830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa90811561088d575b60c05191610870575b508a6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526080818061029960e05188830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa908115610863575b60c05191610834575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff168582019081528790829081906020010381610100515afa908115610827575b60c051916107fa575b50908190816103276127d0565b9061074e575b604051917f92e3cc2d0000000000000000000000000000000000000000000000000000000083526080838061038360e0518c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa928315610741575b60c05193610710575b506103a56127d0565b9361065c575b604051957f66d3966c0000000000000000000000000000000000000000000000000000000087528a878061040060e0518d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa96871561064f575b60c05197610620575b50604051977fdaf297b90000000000000000000000000000000000000000000000000000000089528b89806104708d60e05190830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa988915610613575b60c051996105d9575b506105329061054d98999a604051907f06fdde030000000000000000000000000000000000000000000000000000000082528160c051918173ffffffffffffffffffffffffffffffffffffffff60e051165afa9081156105cc575b60c051916105ab575b506104f6612760565b60e05173ffffffffffffffffffffffffffffffffffffffff1681529d8e015273ffffffffffffffffffffffffffffffffffffffff1660408d0152565b8a0152608089015260a088015260c0870152151560e0860152565b61010084015273ffffffffffffffffffffffffffffffffffffffff16610120830152565b61058261015560a051608051612ba9565b9061058d828b612bc8565b5288612bc8565b506105a060805161292e565b608052915050610146565b6105c6913d8091833e6105be818361271f565b810190612a8f565b386104ed565b6105d461297d565b6104e4565b61054d98995090610603610532928e3d60201161060c575b6105fb818361271f565b810190612965565b99985090610489565b503d6105f1565b61061b61297d565b610480565b6106419197508b3d8d11610648575b610639818361271f565b810190612b24565b9538610419565b503d61062f565b61065761297d565b610410565b92506040517f59f4f35100000000000000000000000000000000000000000000000000000000815261010081806106b460e0518c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b038183515afa908115610703575b60c051916106d2575b50926103ab565b6106f691506101003d610100116106fc575b6106ee818361271f565b810190612a28565b386106cb565b503d6106e4565b61070b61297d565b6106c2565b61073391935060803d60801161073a575b61072b818361271f565b810190612d3b565b913861039c565b503d610721565b61074961297d565b610393565b506040517fa77576ef00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff168782019081526101009082908190602001038183515afa9081156107ed575b60c051916107bc575b5061032d565b6107e091506101003d610100116107e6575b6107d8818361271f565b8101906129cf565b386107b6565b503d6107ce565b6107f561297d565b6107ad565b61081a9150873d8911610820575b610812818361271f565b810190612a77565b8f61031a565b503d610808565b61082f61297d565b610311565b610856915060803d60801161085c575b61084e818361271f565b810190612ce2565b8e6102b2565b503d610844565b61086b61297d565b6102a9565b6108879150843d861161060c576105fb818361271f565b8c610242565b61089561297d565b610239565b6108b29060203d60201161060c576105fb818361271f565b60e052876101cb565b6108c361297d565b6101c0565b604051806108d68782610a66565b0390f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036108fb57565b600080fd5b6024359061ffff821682036108fb57565b6044359061ffff821682036108fb57565b918091926000905b82821061094257501161093b575050565b6000910152565b9150806020918301518186015201829161092a565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361099381518092818752878088019101610922565b0116010190565b6000915b600483106109ab57505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061099e565b6000915b600883106109e957505050565b60019073ffffffffffffffffffffffffffffffffffffffff835116815260208091019201920191906109dc565b6000915b60048310610a2757505050565b600190825181526020809101920192019190610a1a565b6000915b60088310610a4f57505050565b600190825181526020809101920192019190610a42565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a9b575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610bb58b5191610af481845173ffffffffffffffffffffffffffffffffffffffff169052565b6103a0610120610b11868601516103c08089870152850190610957565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610b426060808301519086019061099a565b610b8c6080820151610b5960e091828801906109d8565b610b6c60a08401516101e0880190610a16565b610b7f60c0840151610260880190610a3e565b8201511515610360860152565b610100810151610380850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a8a565b6000915b600a8310610bd757505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610bca565b6000915b600a8310610c1557505050565b6001908251600f0b81526020809101920192019190610c08565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c64575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d928b5191610cbd81845173ffffffffffffffffffffffffffffffffffffffff169052565b610ccd84840151858301906109d8565b6106e06101608985015194610ce861012096878601906109d8565b610cfb6060820151610220860190610a3e565b610d0e6080820151610320860190610a3e565b610d2160a0820151610420860190610a3e565b60c081015173ffffffffffffffffffffffffffffffffffffffff1661052085015260e08101511515610540850152610d6a61010082015161082080610560880152860190610957565b95810151610580850152610d886101408201516105a0860190610bc6565b0151910190610c04565b990194019401929594939190610c53565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb5760043590610de1826108dd565b610de9610900565b91610df2610911565b9261ffff92610e0284861661280e565b93825b610e12610155888661294e565b82821610156115da576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8a165afa9081156115cd575b6000916115ae575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015286610100828060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa9182156115a1575b600092611548575b506112576111ee61118561111c6110b3611049610fdf610f7573ffffffffffffffffffffffffffffffffffffffff986101008c604051809481927fa77576ef0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d85165afa91821561153b575b600092611518575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa92831561150b575b6000936114e8575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529361010090859081906024820190565b03818d85165afa9384156114db575b6000946114b8575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa9485156114ab575b600095611488575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa95861561147b575b60009661145a575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa96871561144d575b60009761142c575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa97881561141f575b600098611404575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113f7575b6000996113ce575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a156113c1575b6000998a9b611388575b506112e061276f565b73ffffffffffffffffffffffffffffffffffffffff909c168c5260208c015260408b01528c8a0152608089015260a088015273ffffffffffffffffffffffffffffffffffffffff1660c0870152151560e08601526101008501526101208401526101408301526101608201526113568583612ba9565b61ffff16906113658289612bc8565b526113709087612bc8565b50610155611380610e129261292e565b915050610e05565b909a506113b09199506102803d610280116113ba575b6113a8818361271f565b810190612b33565b98909899386112d7565b503d61139e565b6113c961297d565b6112cd565b6102809199506113ef6112c09160203d60201161064857610639818361271f565b99915061126e565b6113ff61297d565b611266565b61141891983d8091833e6105be818361271f565b9638611205565b61142761297d565b6111fd565b61144691975060203d60201161082057610812818361271f565b953861119c565b61145561297d565b611194565b61147491965060203d60201161060c576105fb818361271f565b9438611133565b61148361297d565b61112b565b6114a49195506101003d610100116106fc576106ee818361271f565b93386110ca565b6114b361297d565b6110c2565b6114d49194506101003d610100116106fc576106ee818361271f565b9238611060565b6114e361297d565b611058565b6115049193506101003d610100116106fc576106ee818361271f565b9138610ff6565b61151361297d565b610fee565b6115349192506101003d610100116107e6576107d8818361271f565b9038610f8c565b61154361297d565b610f84565b73ffffffffffffffffffffffffffffffffffffffff9192506111ee61118561111c6110b3611049610fdf610f75611592611257986101003d610100116107e6576107d8818361271f565b99985050505050505050610ef2565b6115a961297d565b610eea565b6115c7915060203d60201161060c576105fb818361271f565b38610e7a565b6115d561297d565b610e72565b604051806108d68882610c2f565b602080820190808352835180925260409283810182858560051b8401019601946000925b85841061161d575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0856001950301875261171c8b519161167681845173ffffffffffffffffffffffffffffffffffffffff169052565b61168684840151858301906109d8565b61169888840151610120830190610a3e565b606083015173ffffffffffffffffffffffffffffffffffffffff166102208201526104e060e06116d8608086015161050080610240870152850190610957565b946116ec60a0820151610260860190610bc6565b6116ff60c08201516103a0860190610c04565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b99019401940192959493919061160c565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57600480359061176c826108dd565b611774610900565b9261177d610911565b9361ffff9361178d858716612d8a565b9473ffffffffffffffffffffffffffffffffffffffff839216915b6117b5610155898661294e565b8282161015611cab57610155611b536117b592611b4d8a898b60408a8151927f3a1d5d8e0000000000000000000000000000000000000000000000000000000084526020928385806118148c86830191909161ffff6020820193169052565b0381865afa948515611c9e575b600095611c73575b509081611b2f9596611a9c949351907f9ac90d3d00000000000000000000000000000000000000000000000000000000825261010080838061188a8d89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611c66575b600093611c45575b5083517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1686820190815293949093600090859081906020015b03818a5afa938415611c38575b600094611c1b575b506119c6939461195f838d8451809381927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818c5afa938415611c0e575b600094611bef575b5050898c8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611be2575b600095611bc3575b50898c8351997f56059ffb000000000000000000000000000000000000000000000000000000008b52610280998a8c80611a348685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9b8c15611bb6575b60009b8c9d611b8f575b50508551809d819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa988915611b82575b600099611b5b575b50611b039596979899611ae0611ac461277c565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c01528a015288019073ffffffffffffffffffffffffffffffffffffffff169052565b608086015260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152565b611b46611b3f6101558c87612ba9565b8093612bc8565b528b612bc8565b5061292e565b9150506117a8565b611b039697989950611b79908b3d8d1161060c576105fb818361271f565b98979695611ab0565b611b8a61297d565b611aa8565b8091929d50611bab939c50903d106113ba576113a8818361271f565b9990999a3880611a4b565b611bbe61297d565b611a41565b611bdb9195508a3d8c1161060c576105fb818361271f565b93386119db565b611bea61297d565b6119d3565b611c06929450803d106106fc576106ee818361271f565b913880611974565b611c1661297d565b61196c565b611c32906119c6953d8091833e6105be818361271f565b93611906565b611c4061297d565b6118fe565b6118f19350611c6090823d84116107e6576107d8818361271f565b9261189f565b611c6e61297d565b611897565b611b2f955090611c94611a9c949392863d881161060c576105fb818361271f565b9550909192611829565b611ca661297d565b611821565b604051806108d689826115e8565b50346108fb5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57611df1600435611cf8816108dd565b611dd6602435611d07816108dd565b73ffffffffffffffffffffffffffffffffffffffff90611d2c8260005416331461257f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611e3c575b600093611e1d575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611e10575b600092611df3575b5050612fca565b005b611e099250803d1061082057610812818361271f565b3880611dea565b611e1861297d565b611de2565b611e35919350843d861161064857610639818361271f565b9138611d7b565b611e4461297d565b611d73565b50346108fb576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108da5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611ec033841461257f565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346108fb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6000915b60028310611f5257505050565b600190825181526020809101920192019190611f45565b6020808201908083528351809252806040809401940192600080915b848310611f955750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff808251168452808383015116838501528482015185850187905b60028210612024575050505060019261201682606060e094015190611ff760809283860190611f41565b015173ffffffffffffffffffffffffffffffffffffffff1660c0830152565b019701959493019190611f85565b8251841681528a95928301926001929092019101611fcd565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57600480359061207c826108dd565b612084610900565b61208c610911565b9261ffff9461209c868616612e59565b9573ffffffffffffffffffffffffffffffffffffffff92831690845b6120c5610155898861294e565b828216101561247d576101556123486120c592611b4d8c8b8b8b8b8b60408051957f3a1d5d8e0000000000000000000000000000000000000000000000000000000087526121278a8880602093849386830191909161ffff6020820193169052565b0381875afa978815612470575b600098612430575b5094610155946123419794846122ba94611b3f998c61233b9851947f9ac90d3d0000000000000000000000000000000000000000000000000000000086528486806121a68588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615612423575b6000966123f4575b508451977f92e3cc2d00000000000000000000000000000000000000000000000000000000895285898061220e8689830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9889156123e7575b6000996123ae575b509083859493928751958680927ffc0c546a00000000000000000000000000000000000000000000000000000000825286165afa9384156123a1575b600094612382575b508293948651809b819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa968715612375575b600097612350575b5090612318916122fb6122df612789565b73ffffffffffffffffffffffffffffffffffffffff909f168f52565b8d019073ffffffffffffffffffffffffffffffffffffffff169052565b8a015288015273ffffffffffffffffffffffffffffffffffffffff166080870152565b87612ba9565b528d612bc8565b9150506120b8565b81975061236d9061231893923d8a1161060c576105fb818361271f565b9690916122ce565b61237d61297d565b6122c6565b83945061239b90843d861161060c576105fb818361271f565b93612267565b6123a961297d565b61225f565b849392919950936123d58695883d8a116123e0575b6123cd818361271f565b810190612f7b565b999192939450612223565b503d6123c3565b6123ef61297d565b61221b565b612415919650853d871161241c575b61240d818361271f565b810190612f22565b94386121bb565b503d612403565b61242b61297d565b6121b3565b81985094612341979461233b946122ba9461245f6101559986611b3f9c97903d1061060c576105fb818361271f565b9b949950945094509497509461213c565b61247861297d565b612134565b604051806108d68b82611f69565b50346108fb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb576004356124c7816108dd565b73ffffffffffffffffffffffffffffffffffffffff6124eb8160005416331461257f565b8116156124fb57611df1906125e4565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561258657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610180810190811067ffffffffffffffff8211176126a057604052565b6126a8612653565b604052565b610140810190811067ffffffffffffffff8211176126a057604052565b610100810190811067ffffffffffffffff8211176126a057604052565b6080810190811067ffffffffffffffff8211176126a057604052565b6040810190811067ffffffffffffffff8211176126a057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176126a057604052565b6040519061276d826126ad565b565b6040519061276d82612683565b6040519061276d826126ca565b6040519060a0820182811067ffffffffffffffff8211176126a057604052565b60209067ffffffffffffffff81116127c3575b60051b0190565b6127cb612653565b6127bc565b604051906127dd826126ca565b610100368337565b604051906127f2826126ad565b610140368337565b60405190612807826126e7565b6080368337565b90612818826127a9565b6040906128278251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061285582956127a9565b019160005b8381106128675750505050565b602090825161287581612683565b600081526128816127d0565b818401528261288e6127d0565b8583015261289a6127d0565b606090818401526128a96127d0565b60808401526128b66127d0565b60a0840152600060c0840152600060e084015261010083015260006101208301526128df6127e5565b6101408301526128ed6127e5565b61016083015282860101520161285a565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114612942570190565b61294a6128fe565b0190565b9061ffff8080931691168092038111612942570190565b908160209103126108fb575161297a816108dd565b90565b506040513d6000823e3d90fd5b919060405192612999846126ad565b839061014081019283116108fb57905b8282106129b557505050565b6020809183516129c4816108dd565b8152019101906129a9565b9061010080838303126108fb5781601f840112156108fb57604051926129f4846126ca565b839181019283116108fb57905b828210612a0e5750505090565b602080918351612a1d816108dd565b815201910190612a01565b9061010080838303126108fb5781601f840112156108fb5760405192612a4d846126ca565b839181019283116108fb57905b828210612a675750505090565b8151815260209182019101612a5a565b908160209103126108fb575180151581036108fb5790565b6020818303126108fb57805167ffffffffffffffff918282116108fb57019082601f830112156108fb578151908111612b17575b60405192612af960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018561271f565b818452602082840101116108fb5761297a9160208085019101610922565b612b1f612653565b612ac3565b908160209103126108fb575190565b91909161028080828503126108fb5783601f830112156108fb57612b57848361298a565b938061015f840112156108fb5760405192612b71846126ad565b839281019182116108fb5761014001915b818310612b8f5750505090565b825180600f0b81036108fb57815260209283019201612b82565b61ffff9182169116818110612bbc570390565b612bc46128fe565b0390565b8051821015612bdc5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612c15826127a9565b604090612c248251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612c5282956127a9565b019160005b838110612c645750505050565b6020908251612c72816126ad565b600081526060839080828401526000868401528551612c90816126e7565b60809182368337840152612ca26127d0565b90830152612cae6127fa565b60a0830152612cbb6127d0565b60c0830152600060e083015260006101008301526000610120830152828601015201612c57565b906080828203126108fb5780601f830112156108fb5760405191612d05836126e7565b8290608081019283116108fb57905b828210612d215750505090565b602080918351612d30816108dd565b815201910190612d14565b906080828203126108fb5780601f830112156108fb5760405191612d5e836126e7565b8290608081019283116108fb57905b828210612d7a5750505090565b8151815260209182019101612d6d565b90612d94826127a9565b604090612da38251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612dd182956127a9565b0191600091825b848110612de6575050505050565b6020908351612df4816126ca565b8581528451612e02816126ca565b61010080368337849182840152865190612e1b826126ca565b36823786830152606087818401526080830152612e366127e5565b60a0830152612e436127e5565b60c08301528660e0830152828501015201612dd8565b90612e63826127a9565b604090612e728251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612ea082956127a9565b0191600091825b848110612eb5575050505050565b602090835160a0810181811067ffffffffffffffff821117612f15575b85528581528286818301528551612ee881612703565b86368237868301528551612efb81612703565b863682376060830152866080830152828501015201612ea7565b612f1d612653565b612ed2565b906040828203126108fb5780601f830112156108fb5760405191612f4583612703565b8290604081019283116108fb57905b828210612f615750505090565b602080918351612f70816108dd565b815201910190612f54565b906040828203126108fb5780601f830112156108fb5760405191612f9e83612703565b8290604081019283116108fb57905b828210612fba5750505090565b8151815260209182019101612fad565b15612fd157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f68c902843a907ed9915b323391562b1a616ba3b7b6aa44007d4f061563dcdeb64736f6c634300080d0033",
  "deployedBytecode": "0x61012060405260048036101561001457600080fd5b6000908160c052813560e01c918263030e3b08146100c457505080631d8b12fe146100bb57806322471113146100b257806324ae6a27146100a9578063715018a6146100a05780638da5cb5b14610097578063bea723651461008e5763f2fde38b14610081575b38600080fd5b61008961248b565b61007b565b5061008961203d565b50610089611eee565b50610089611e49565b50610089611cb9565b5061008961172d565b50610089610da3565b346108da57606090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108da5750813591610102836108dd565b61010a610900565b60a052610115610911565b61ffff9073ffffffffffffffffffffffffffffffffffffffff610139838316612c0b565b9560a05160805216610100525b61015c6101558260a05161294e565b61ffff1690565b826080511610156108c85761015561015c916040517f3a1d5d8e000000000000000000000000000000000000000000000000000000008152602081806101b16080518a830191909161ffff6020820193169052565b0381610100515afa80156108bb575b60c05160e05261089a575b506105946020610571876040517f6f20d6dd00000000000000000000000000000000000000000000000000000000815283818061022960e05186830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa90811561088d575b60c05191610870575b508a6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526080818061029960e05188830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa908115610863575b60c05191610834575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff168582019081528790829081906020010381610100515afa908115610827575b60c051916107fa575b50908190816103276127d0565b9061074e575b604051917f92e3cc2d0000000000000000000000000000000000000000000000000000000083526080838061038360e0518c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa928315610741575b60c05193610710575b506103a56127d0565b9361065c575b604051957f66d3966c0000000000000000000000000000000000000000000000000000000087528a878061040060e0518d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa96871561064f575b60c05197610620575b50604051977fdaf297b90000000000000000000000000000000000000000000000000000000089528b89806104708d60e05190830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381610100515afa988915610613575b60c051996105d9575b506105329061054d98999a604051907f06fdde030000000000000000000000000000000000000000000000000000000082528160c051918173ffffffffffffffffffffffffffffffffffffffff60e051165afa9081156105cc575b60c051916105ab575b506104f6612760565b60e05173ffffffffffffffffffffffffffffffffffffffff1681529d8e015273ffffffffffffffffffffffffffffffffffffffff1660408d0152565b8a0152608089015260a088015260c0870152151560e0860152565b61010084015273ffffffffffffffffffffffffffffffffffffffff16610120830152565b61058261015560a051608051612ba9565b9061058d828b612bc8565b5288612bc8565b506105a060805161292e565b608052915050610146565b6105c6913d8091833e6105be818361271f565b810190612a8f565b386104ed565b6105d461297d565b6104e4565b61054d98995090610603610532928e3d60201161060c575b6105fb818361271f565b810190612965565b99985090610489565b503d6105f1565b61061b61297d565b610480565b6106419197508b3d8d11610648575b610639818361271f565b810190612b24565b9538610419565b503d61062f565b61065761297d565b610410565b92506040517f59f4f35100000000000000000000000000000000000000000000000000000000815261010081806106b460e0518c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b038183515afa908115610703575b60c051916106d2575b50926103ab565b6106f691506101003d610100116106fc575b6106ee818361271f565b810190612a28565b386106cb565b503d6106e4565b61070b61297d565b6106c2565b61073391935060803d60801161073a575b61072b818361271f565b810190612d3b565b913861039c565b503d610721565b61074961297d565b610393565b506040517fa77576ef00000000000000000000000000000000000000000000000000000000815260e05173ffffffffffffffffffffffffffffffffffffffff168782019081526101009082908190602001038183515afa9081156107ed575b60c051916107bc575b5061032d565b6107e091506101003d610100116107e6575b6107d8818361271f565b8101906129cf565b386107b6565b503d6107ce565b6107f561297d565b6107ad565b61081a9150873d8911610820575b610812818361271f565b810190612a77565b8f61031a565b503d610808565b61082f61297d565b610311565b610856915060803d60801161085c575b61084e818361271f565b810190612ce2565b8e6102b2565b503d610844565b61086b61297d565b6102a9565b6108879150843d861161060c576105fb818361271f565b8c610242565b61089561297d565b610239565b6108b29060203d60201161060c576105fb818361271f565b60e052876101cb565b6108c361297d565b6101c0565b604051806108d68782610a66565b0390f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036108fb57565b600080fd5b6024359061ffff821682036108fb57565b6044359061ffff821682036108fb57565b918091926000905b82821061094257501161093b575050565b6000910152565b9150806020918301518186015201829161092a565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361099381518092818752878088019101610922565b0116010190565b6000915b600483106109ab57505050565b60019073ffffffffffffffffffffffffffffffffffffffff8351168152602080910192019201919061099e565b6000915b600883106109e957505050565b60019073ffffffffffffffffffffffffffffffffffffffff835116815260208091019201920191906109dc565b6000915b60048310610a2757505050565b600190825181526020809101920192019190610a1a565b6000915b60088310610a4f57505050565b600190825181526020809101920192019190610a42565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610a9b575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610bb58b5191610af481845173ffffffffffffffffffffffffffffffffffffffff169052565b6103a0610120610b11868601516103c08089870152850190610957565b8a86015173ffffffffffffffffffffffffffffffffffffffff16848c015294610b426060808301519086019061099a565b610b8c6080820151610b5960e091828801906109d8565b610b6c60a08401516101e0880190610a16565b610b7f60c0840151610260880190610a3e565b8201511515610360860152565b610100810151610380850152015173ffffffffffffffffffffffffffffffffffffffff16910152565b990194019401929594939190610a8a565b6000915b600a8310610bd757505050565b60019073ffffffffffffffffffffffffffffffffffffffff83511681526020809101920192019190610bca565b6000915b600a8310610c1557505050565b6001908251600f0b81526020809101920192019190610c08565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610c64575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08560019503018752610d928b5191610cbd81845173ffffffffffffffffffffffffffffffffffffffff169052565b610ccd84840151858301906109d8565b6106e06101608985015194610ce861012096878601906109d8565b610cfb6060820151610220860190610a3e565b610d0e6080820151610320860190610a3e565b610d2160a0820151610420860190610a3e565b60c081015173ffffffffffffffffffffffffffffffffffffffff1661052085015260e08101511515610540850152610d6a61010082015161082080610560880152860190610957565b95810151610580850152610d886101408201516105a0860190610bc6565b0151910190610c04565b990194019401929594939190610c53565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb5760043590610de1826108dd565b610de9610900565b91610df2610911565b9261ffff92610e0284861661280e565b93825b610e12610155888661294e565b82821610156115da576040517f3a1d5d8e00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8a165afa9081156115cd575b6000916115ae575b506040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015286610100828060248101038173ffffffffffffffffffffffffffffffffffffffff85165afa9182156115a1575b600092611548575b506112576111ee61118561111c6110b3611049610fdf610f7573ffffffffffffffffffffffffffffffffffffffff986101008c604051809481927fa77576ef0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d85165afa91821561153b575b600092611518575b506040517f92e3cc2d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529261010090849081906024820190565b03818d85165afa92831561150b575b6000936114e8575b506040517f59f4f35100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529361010090859081906024820190565b03818d85165afa9384156114db575b6000946114b8575b506040517fce99e45a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201529461010090869081906024820190565b03818d85165afa9485156114ab575b600095611488575b506040517f3795104900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015295602090879081906024820190565b03818d85165afa95861561147b575b60009661145a575b506040517fe4d332a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015296602090889081906024820190565b03818d85165afa96871561144d575b60009761142c575b506040517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015297600090899081906024820190565b03818d85165afa97881561141f575b600098611404575b506040517f66d3966c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152986020908a9081906024820190565b03818d85165afa9889156113f7575b6000996113ce575b506040517f56059ffb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015299610280918b91829081602481015b0392165afa998a156113c1575b6000998a9b611388575b506112e061276f565b73ffffffffffffffffffffffffffffffffffffffff909c168c5260208c015260408b01528c8a0152608089015260a088015273ffffffffffffffffffffffffffffffffffffffff1660c0870152151560e08601526101008501526101208401526101408301526101608201526113568583612ba9565b61ffff16906113658289612bc8565b526113709087612bc8565b50610155611380610e129261292e565b915050610e05565b909a506113b09199506102803d610280116113ba575b6113a8818361271f565b810190612b33565b98909899386112d7565b503d61139e565b6113c961297d565b6112cd565b6102809199506113ef6112c09160203d60201161064857610639818361271f565b99915061126e565b6113ff61297d565b611266565b61141891983d8091833e6105be818361271f565b9638611205565b61142761297d565b6111fd565b61144691975060203d60201161082057610812818361271f565b953861119c565b61145561297d565b611194565b61147491965060203d60201161060c576105fb818361271f565b9438611133565b61148361297d565b61112b565b6114a49195506101003d610100116106fc576106ee818361271f565b93386110ca565b6114b361297d565b6110c2565b6114d49194506101003d610100116106fc576106ee818361271f565b9238611060565b6114e361297d565b611058565b6115049193506101003d610100116106fc576106ee818361271f565b9138610ff6565b61151361297d565b610fee565b6115349192506101003d610100116107e6576107d8818361271f565b9038610f8c565b61154361297d565b610f84565b73ffffffffffffffffffffffffffffffffffffffff9192506111ee61118561111c6110b3611049610fdf610f75611592611257986101003d610100116107e6576107d8818361271f565b99985050505050505050610ef2565b6115a961297d565b610eea565b6115c7915060203d60201161060c576105fb818361271f565b38610e7a565b6115d561297d565b610e72565b604051806108d68882610c2f565b602080820190808352835180925260409283810182858560051b8401019601946000925b85841061161d575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0856001950301875261171c8b519161167681845173ffffffffffffffffffffffffffffffffffffffff169052565b61168684840151858301906109d8565b61169888840151610120830190610a3e565b606083015173ffffffffffffffffffffffffffffffffffffffff166102208201526104e060e06116d8608086015161050080610240870152850190610957565b946116ec60a0820151610260860190610bc6565b6116ff60c08201516103a0860190610c04565b015173ffffffffffffffffffffffffffffffffffffffff16910152565b99019401940192959493919061160c565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57600480359061176c826108dd565b611774610900565b9261177d610911565b9361ffff9361178d858716612d8a565b9473ffffffffffffffffffffffffffffffffffffffff839216915b6117b5610155898661294e565b8282161015611cab57610155611b536117b592611b4d8a898b60408a8151927f3a1d5d8e0000000000000000000000000000000000000000000000000000000084526020928385806118148c86830191909161ffff6020820193169052565b0381865afa948515611c9e575b600095611c73575b509081611b2f9596611a9c949351907f9ac90d3d00000000000000000000000000000000000000000000000000000000825261010080838061188a8d89830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa928315611c66575b600093611c45575b5083517f5c91174100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1686820190815293949093600090859081906020015b03818a5afa938415611c38575b600094611c1b575b506119c6939461195f838d8451809381927f92e3cc2d0000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818c5afa938415611c0e575b600094611bef575b5050898c8351809781927f379510490000000000000000000000000000000000000000000000000000000083528b830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818b5afa948515611be2575b600095611bc3575b50898c8351997f56059ffb000000000000000000000000000000000000000000000000000000008b52610280998a8c80611a348685830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9b8c15611bb6575b60009b8c9d611b8f575b50508551809d819482937f55335d7b000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa988915611b82575b600099611b5b575b50611b039596979899611ae0611ac461277c565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c01528a015288019073ffffffffffffffffffffffffffffffffffffffff169052565b608086015260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152565b611b46611b3f6101558c87612ba9565b8093612bc8565b528b612bc8565b5061292e565b9150506117a8565b611b039697989950611b79908b3d8d1161060c576105fb818361271f565b98979695611ab0565b611b8a61297d565b611aa8565b8091929d50611bab939c50903d106113ba576113a8818361271f565b9990999a3880611a4b565b611bbe61297d565b611a41565b611bdb9195508a3d8c1161060c576105fb818361271f565b93386119db565b611bea61297d565b6119d3565b611c06929450803d106106fc576106ee818361271f565b913880611974565b611c1661297d565b61196c565b611c32906119c6953d8091833e6105be818361271f565b93611906565b611c4061297d565b6118fe565b6118f19350611c6090823d84116107e6576107d8818361271f565b9261189f565b611c6e61297d565b611897565b611b2f955090611c94611a9c949392863d881161060c576105fb818361271f565b9550909192611829565b611ca661297d565b611821565b604051806108d689826115e8565b50346108fb5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57611df1600435611cf8816108dd565b611dd6602435611d07816108dd565b73ffffffffffffffffffffffffffffffffffffffff90611d2c8260005416331461257f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315611e3c575b600093611e1d575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215611e10575b600092611df3575b5050612fca565b005b611e099250803d1061082057610812818361271f565b3880611dea565b611e1861297d565b611de2565b611e35919350843d861161064857610639818361271f565b9138611d7b565b611e4461297d565b611d73565b50346108fb576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108da5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691611ec033841461257f565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346108fb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6000915b60028310611f5257505050565b600190825181526020809101920192019190611f45565b6020808201908083528351809252806040809401940192600080915b848310611f955750505050505090565b90919293949584875173ffffffffffffffffffffffffffffffffffffffff808251168452808383015116838501528482015185850187905b60028210612024575050505060019261201682606060e094015190611ff760809283860190611f41565b015173ffffffffffffffffffffffffffffffffffffffff1660c0830152565b019701959493019190611f85565b8251841681528a95928301926001929092019101611fcd565b50346108fb576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb57600480359061207c826108dd565b612084610900565b61208c610911565b9261ffff9461209c868616612e59565b9573ffffffffffffffffffffffffffffffffffffffff92831690845b6120c5610155898861294e565b828216101561247d576101556123486120c592611b4d8c8b8b8b8b8b60408051957f3a1d5d8e0000000000000000000000000000000000000000000000000000000087526121278a8880602093849386830191909161ffff6020820193169052565b0381875afa978815612470575b600098612430575b5094610155946123419794846122ba94611b3f998c61233b9851947f9ac90d3d0000000000000000000000000000000000000000000000000000000086528486806121a68588830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa958615612423575b6000966123f4575b508451977f92e3cc2d00000000000000000000000000000000000000000000000000000000895285898061220e8689830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa9889156123e7575b6000996123ae575b509083859493928751958680927ffc0c546a00000000000000000000000000000000000000000000000000000000825286165afa9384156123a1575b600094612382575b508293948651809b819482937fdaf297b9000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa968715612375575b600097612350575b5090612318916122fb6122df612789565b73ffffffffffffffffffffffffffffffffffffffff909f168f52565b8d019073ffffffffffffffffffffffffffffffffffffffff169052565b8a015288015273ffffffffffffffffffffffffffffffffffffffff166080870152565b87612ba9565b528d612bc8565b9150506120b8565b81975061236d9061231893923d8a1161060c576105fb818361271f565b9690916122ce565b61237d61297d565b6122c6565b83945061239b90843d861161060c576105fb818361271f565b93612267565b6123a961297d565b61225f565b849392919950936123d58695883d8a116123e0575b6123cd818361271f565b810190612f7b565b999192939450612223565b503d6123c3565b6123ef61297d565b61221b565b612415919650853d871161241c575b61240d818361271f565b810190612f22565b94386121bb565b503d612403565b61242b61297d565b6121b3565b81985094612341979461233b946122ba9461245f6101559986611b3f9c97903d1061060c576105fb818361271f565b9b949950945094509497509461213c565b61247861297d565b612134565b604051806108d68b82611f69565b50346108fb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108fb576004356124c7816108dd565b73ffffffffffffffffffffffffffffffffffffffff6124eb8160005416331461257f565b8116156124fb57611df1906125e4565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561258657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610180810190811067ffffffffffffffff8211176126a057604052565b6126a8612653565b604052565b610140810190811067ffffffffffffffff8211176126a057604052565b610100810190811067ffffffffffffffff8211176126a057604052565b6080810190811067ffffffffffffffff8211176126a057604052565b6040810190811067ffffffffffffffff8211176126a057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176126a057604052565b6040519061276d826126ad565b565b6040519061276d82612683565b6040519061276d826126ca565b6040519060a0820182811067ffffffffffffffff8211176126a057604052565b60209067ffffffffffffffff81116127c3575b60051b0190565b6127cb612653565b6127bc565b604051906127dd826126ca565b610100368337565b604051906127f2826126ad565b610140368337565b60405190612807826126e7565b6080368337565b90612818826127a9565b6040906128278251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061285582956127a9565b019160005b8381106128675750505050565b602090825161287581612683565b600081526128816127d0565b818401528261288e6127d0565b8583015261289a6127d0565b606090818401526128a96127d0565b60808401526128b66127d0565b60a0840152600060c0840152600060e084015261010083015260006101208301526128df6127e5565b6101408301526128ed6127e5565b61016083015282860101520161285a565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114612942570190565b61294a6128fe565b0190565b9061ffff8080931691168092038111612942570190565b908160209103126108fb575161297a816108dd565b90565b506040513d6000823e3d90fd5b919060405192612999846126ad565b839061014081019283116108fb57905b8282106129b557505050565b6020809183516129c4816108dd565b8152019101906129a9565b9061010080838303126108fb5781601f840112156108fb57604051926129f4846126ca565b839181019283116108fb57905b828210612a0e5750505090565b602080918351612a1d816108dd565b815201910190612a01565b9061010080838303126108fb5781601f840112156108fb5760405192612a4d846126ca565b839181019283116108fb57905b828210612a675750505090565b8151815260209182019101612a5a565b908160209103126108fb575180151581036108fb5790565b6020818303126108fb57805167ffffffffffffffff918282116108fb57019082601f830112156108fb578151908111612b17575b60405192612af960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018561271f565b818452602082840101116108fb5761297a9160208085019101610922565b612b1f612653565b612ac3565b908160209103126108fb575190565b91909161028080828503126108fb5783601f830112156108fb57612b57848361298a565b938061015f840112156108fb5760405192612b71846126ad565b839281019182116108fb5761014001915b818310612b8f5750505090565b825180600f0b81036108fb57815260209283019201612b82565b61ffff9182169116818110612bbc570390565b612bc46128fe565b0390565b8051821015612bdc5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90612c15826127a9565b604090612c248251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612c5282956127a9565b019160005b838110612c645750505050565b6020908251612c72816126ad565b600081526060839080828401526000868401528551612c90816126e7565b60809182368337840152612ca26127d0565b90830152612cae6127fa565b60a0830152612cbb6127d0565b60c0830152600060e083015260006101008301526000610120830152828601015201612c57565b906080828203126108fb5780601f830112156108fb5760405191612d05836126e7565b8290608081019283116108fb57905b828210612d215750505090565b602080918351612d30816108dd565b815201910190612d14565b906080828203126108fb5780601f830112156108fb5760405191612d5e836126e7565b8290608081019283116108fb57905b828210612d7a5750505090565b8151815260209182019101612d6d565b90612d94826127a9565b604090612da38251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612dd182956127a9565b0191600091825b848110612de6575050505050565b6020908351612df4816126ca565b8581528451612e02816126ca565b61010080368337849182840152865190612e1b826126ca565b36823786830152606087818401526080830152612e366127e5565b60a0830152612e436127e5565b60c08301528660e0830152828501015201612dd8565b90612e63826127a9565b604090612e728251918261271f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612ea082956127a9565b0191600091825b848110612eb5575050505050565b602090835160a0810181811067ffffffffffffffff821117612f15575b85528581528286818301528551612ee881612703565b86368237868301528551612efb81612703565b863682376060830152866080830152828501015201612ea7565b612f1d612653565b612ed2565b906040828203126108fb5780601f830112156108fb5760405191612f4583612703565b8290604081019283116108fb57905b828210612f615750505090565b602080918351612f70816108dd565b815201910190612f54565b906040828203126108fb5780601f830112156108fb5760405191612f9e83612703565b8290604081019283116108fb57905b828210612fba5750505090565b8151815260209182019101612fad565b15612fd157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220f68c902843a907ed9915b323391562b1a616ba3b7b6aa44007d4f061563dcdeb64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/CurveMulticall.sol:CurveMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}