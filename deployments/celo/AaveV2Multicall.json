{
  "address": "0xD52796DAFE825EdD4389E3D86E5984C5667508Ed",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IDataProvider",
          "name": "dataProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getReservesWithUserData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "usageAsCollateralEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "borrowingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUsingAsCollateral",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isBorrowing",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "stableDebt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableDebtToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "stableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "userStableBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableDebt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "variableDebtToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowRate",
              "type": "uint128"
            }
          ],
          "internalType": "struct AaveV2Multicall.AaveReserve[]",
          "name": "reserves",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa57e120323a2c27fc5335166bbdb60007ea3906ee31e46ca962be890d18fcc0a",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0xD52796DAFE825EdD4389E3D86E5984C5667508Ed",
    "transactionIndex": 4,
    "gasUsed": "1089462",
    "logsBloom": "0x
    "blockHash": "0xb64ec5b6dbee132b033e3adb55573ce1c66c13c759c4e0dae3e3cd328788cc7b",
    "transactionHash": "0xa57e120323a2c27fc5335166bbdb60007ea3906ee31e46ca962be890d18fcc0a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 15929052,
        "transactionHash": "0xa57e120323a2c27fc5335166bbdb60007ea3906ee31e46ca962be890d18fcc0a",
        "address": "0xD52796DAFE825EdD4389E3D86E5984C5667508Ed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xb64ec5b6dbee132b033e3adb55573ce1c66c13c759c4e0dae3e3cd328788cc7b"
      }
    ],
    "blockNumber": 15929052,
    "cumulativeGasUsed": "1197549",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1468126a9bbd79ff72ac376dfb6bf30d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IDataProvider\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReservesWithUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsingAsCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBorrowing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stableDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"stableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"userStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowRate\",\"type\":\"uint128\"}],\"internalType\":\"struct AaveV2Multicall.AaveReserve[]\",\"name\":\"reserves\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/AaveV2Multicall.sol\":\"AaveV2Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/aaveV2/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\",\"keccak256\":\"0x3bb6aa29ab2be2f54f6ba383e9dc0ba6fbdf4b17ecc0db35ada0f0573c97297d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/aaveV2/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n    //common errors\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n    string public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n    //contract specific errors\\n    string public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n    string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n    string public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n    string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n    string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n    string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n    string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n    string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n    string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n    string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n    string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n    string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n    string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n    string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n    string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n    string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n    string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n    string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n    string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n    string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n    string public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n    string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n    string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n    string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n    string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS =\\n        \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS =\\n        \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n    string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n    string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n    string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n    string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n    string public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n    string public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n    string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n    string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n    string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n    string public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n    string public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n    string public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n    string public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n    string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n    string public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n    string public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n    string public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n    string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n    string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n    string public constant RC_INVALID_LTV = \\\"67\\\";\\n    string public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n    string public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n    string public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n    string public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n    string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n    string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n    string public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n    string public constant UL_INVALID_INDEX = \\\"77\\\";\\n    string public constant LP_NOT_CONTRACT = \\\"78\\\";\\n    string public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n    string public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n    enum CollateralManagerErrors {\\n        NO_ERROR,\\n        NO_COLLATERAL_AVAILABLE,\\n        COLLATERAL_CANNOT_BE_LIQUIDATED,\\n        CURRRENCY_NOT_BORROWED,\\n        HEALTH_FACTOR_ABOVE_THRESHOLD,\\n        NOT_ENOUGH_LIQUIDITY,\\n        NO_ACTIVE_RESERVE,\\n        HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n        INVALID_EQUAL_ASSETS_TO_SWAP,\\n        FROZEN_RESERVE\\n    }\\n}\\n\",\"keccak256\":\"0xdb13c587dcb4b808ee8c8ec754f349987eeea2fcc3f3af714b1ab9c205803a6f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/aaveV2/IDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\n\\ninterface IDataProvider {\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\",\"keccak256\":\"0x14302d49310066d1df792d773d9ffbd5cf3143950d0e71e89c820224f7b84c34\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/aaveV2/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        address reserve,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider()\\n        external\\n        view\\n        returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfeb534088650263708fa119392d525894f368f3e16b62e1e53f39af1dd1c5d8f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/aaveV2/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0xea28694aff0d82cbc4e8dd33f057c5f25ae7a17362f00f13439e0b3c03c49f92\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/aaveV2/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.2;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n    uint256 internal constant BORROWING_MASK =\\n        0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n    /**\\n     * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param borrowing True if the user is borrowing the reserve, false otherwise\\n     **/\\n    function setBorrowing(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool borrowing\\n    ) internal {\\n        require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n        self.data =\\n            (self.data & ~(1 << (reserveIndex * 2))) |\\n            (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n    }\\n\\n    /**\\n     * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n     **/\\n    function setUsingAsCollateral(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool usingAsCollateral\\n    ) internal {\\n        require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n        self.data =\\n            (self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n            (uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n    }\\n\\n    /**\\n     * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n     **/\\n    function isUsingAsCollateralOrBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n        return (self.data >> (reserveIndex * 2)) & 3 != 0;\\n    }\\n\\n    /**\\n     * @dev Used to validate if a user has been using the reserve for borrowing\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing, false otherwise\\n     **/\\n    function isBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n        return (self.data >> (reserveIndex * 2)) & 1 != 0;\\n    }\\n\\n    /**\\n     * @dev Used to validate if a user has been using the reserve as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve as collateral, false otherwise\\n     **/\\n    function isUsingAsCollateral(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n        return (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n    }\\n\\n    /**\\n     * @dev Used to validate if a user has been borrowing from any reserve\\n     * @param self The configuration object\\n     * @return True if the user has been borrowing any reserve, false otherwise\\n     **/\\n    function isBorrowingAny(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.data & BORROWING_MASK != 0;\\n    }\\n\\n    /**\\n     * @dev Used to validate if a user has not been using any reserve\\n     * @param self The configuration object\\n     * @return True if the user has been borrowing any reserve, false otherwise\\n     **/\\n    function isEmpty(DataTypes.UserConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.data == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x85ddc6afac8f7cd2aa7afe9adee5b66f515b5d8d8f325659996ad8f86ac1996d\",\"license\":\"agpl-3.0\"},\"contracts/multicall/AaveV2Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/aaveV2/ILendingPool.sol\\\";\\nimport \\\"../interfaces/aaveV2/IDataProvider.sol\\\";\\nimport \\\"../interfaces/aaveV2/UserConfiguration.sol\\\";\\n\\ncontract AaveV2Multicall is Ownable {\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n    struct AaveReserve {\\n        address token;\\n        address aToken;\\n        uint256 totalDeposited;\\n        uint256 liquidityRate;\\n        bool usageAsCollateralEnabled;\\n        bool borrowingEnabled;\\n        bool isUsingAsCollateral;\\n        bool isBorrowing;\\n        // Stable Debt\\n        uint256 stableDebt;\\n        address stableDebtToken;\\n        uint128 stableBorrowRate;\\n        uint256 userStableBorrowRate;\\n        // Variable Debt\\n        uint256 variableDebt;\\n        address variableDebtToken;\\n        uint128 variableBorrowRate;\\n    }\\n\\n    function getReservesWithUserData(\\n        ILendingPool lendingPool,\\n        IDataProvider dataProvider,\\n        address user\\n    ) external view returns (AaveReserve[] memory reserves) {\\n        address[] memory reserveList = lendingPool.getReservesList();\\n        reserves = new AaveReserve[](reserveList.length);\\n\\n        DataTypes.UserConfigurationMap memory userConfig = lendingPool\\n            .getUserConfiguration(user);\\n\\n        for (uint256 i = 0; i < reserveList.length; i++) {\\n            DataTypes.ReserveData memory reserveData = lendingPool\\n                .getReserveData(reserveList[i]);\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                bool usageAsCollateralEnabled,\\n                bool borrowingEnabled,\\n                ,\\n                ,\\n\\n            ) = dataProvider.getReserveConfigurationData(reserveList[i]);\\n            (\\n                uint256 currentATokenBalance,\\n                uint256 currentStableDebt,\\n                uint256 currentVariableDebt,\\n                ,\\n                ,\\n                uint256 userStableBorrowRate,\\n                uint256 liquidityRate,\\n                ,\\n\\n            ) = dataProvider.getUserReserveData(reserveList[i], user);\\n\\n            reserves[i] = AaveReserve(\\n                reserveList[i],\\n                reserveData.aTokenAddress,\\n                currentATokenBalance,\\n                liquidityRate,\\n                usageAsCollateralEnabled,\\n                borrowingEnabled,\\n                userConfig.isUsingAsCollateral(i),\\n                userConfig.isBorrowing(i),\\n                currentStableDebt,\\n                reserveData.stableDebtTokenAddress,\\n                reserveData.currentStableBorrowRate,\\n                userStableBorrowRate,\\n                currentVariableDebt,\\n                reserveData.variableDebtTokenAddress,\\n                reserveData.currentVariableBorrowRate\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1b41ac156a41135bb982a0c5c419ef0a76883c882cbc0ddc6a68f621c5a4289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361126590816100618239f35b600080fdfe6080806040526004908136101561001557600080fd5b6000803560e01c92836348f59e5914610072575050508063715018a6146100695780638da5cb5b146100605763f2fde38b14610053575b3880600080fd5b61005b610927565b61004c565b5061005b6108d4565b5061005b61082c565b3461069e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261069e578035906100ad826106a2565b602435936100ba856106a2565b604435936100c7856106a2565b73ffffffffffffffffffffffffffffffffffffffff809416917fd1946dbc00000000000000000000000000000000000000000000000000000000815281818581865afa908115610691575b829161066f575b506101248151610c7f565b95604051957f4417a58300000000000000000000000000000000000000000000000000000000875260208780610179858a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381885afa968715610662575b8497610631575b50839894989416935b825181101561061f5786836102996102246101808d6101d26101b88887610e1b565b5173ffffffffffffffffffffffffffffffffffffffff1690565b908c6040518095819482937f35ea6a75000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa908115610612575b88916105e1575b50876101406102496101b88887610e1b565b8c60405195869283927f3e150141000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d5afa9283156105d4575b878b8d898594869861057b575b50906102cc6101b8610120959493610326999a9b610e1b565b604080517f28dd2d0100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831693810193845291909416602083015296879384928392910190565b03915afa801561056e575b82918390898c8697879561051d575b508161034b91610e1b565b5173ffffffffffffffffffffffffffffffffffffffff169860e08901516103859073ffffffffffffffffffffffffffffffffffffffff1690565b9a6103908382611199565b9261039a9161113a565b926101008a01516103be9073ffffffffffffffffffffffffffffffffffffffff1690565b9560a08b01516103dd906fffffffffffffffffffffffffffffffff1690565b976101208c01516104019073ffffffffffffffffffffffffffffffffffffffff1690565b6080909c01516fffffffffffffffffffffffffffffffff169c610422610b8c565b73ffffffffffffffffffffffffffffffffffffffff90911681529d8e9073ffffffffffffffffffffffffffffffffffffffff1660208201526040015260608d0152151560808c0152151560a08b0152151560c08a0152151560e089015261010088015273ffffffffffffffffffffffffffffffffffffffff166101208701526fffffffffffffffffffffffffffffffff1661014086015261016085015261018084015273ffffffffffffffffffffffffffffffffffffffff166101a08301526fffffffffffffffffffffffffffffffff166101c0820152610503828a610e1b565b5261050e8189610e1b565b5061051890610de1565b610196565b919750935061054f91955061034b94508692506101203d61012011610567575b6105478183610b4b565b810190610ff2565b50949b919a9699509794969094935091506103409050565b503d61053d565b610576610c72565b610331565b6103269798506101209493929195506101b86105b36102cc926101403d610140116105cd575b6105ab8183610b4b565b810190610f89565b5050509c95509350505050979a99509293949550506102b3565b503d6105a1565b6105dc610c72565b6102a6565b61060591506101803d6101801161060b575b6105fd8183610b4b565b810190610e9b565b8d610237565b503d6105f3565b61061a610c72565b610230565b6040518061062d8a826106c5565b0390f35b61065491975060203d60201161065b575b61064c8183610b4b565b810190610d9a565b958961018d565b503d610642565b61066a610c72565b610186565b61068b91503d8084833e6106838183610b4b565b810190610bee565b87610119565b610699610c72565b610112565b5080fd5b73ffffffffffffffffffffffffffffffffffffffff8116036106c057565b600080fd5b60208082019080835283518092528060408094019401926000905b8382106106ef57505050505090565b9091929394836101e060019261081f895161072083825173ffffffffffffffffffffffffffffffffffffffff169052565b8085015173ffffffffffffffffffffffffffffffffffffffff168386015280870151838801526060808201519084015260808082015115159084015260a08181015115159084015260c08181015115159084015260e08181015115159084015261010081810151908401526101208082015173ffffffffffffffffffffffffffffffffffffffff1690840152610140818101516fffffffffffffffffffffffffffffffff1690840152610160818101519084015261018080820151908401526101a08082015173ffffffffffffffffffffffffffffffffffffffff16908401526101c0908101516fffffffffffffffffffffffffffffffff1690830152565b01960194939201906106e0565b50346106c0576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108d15780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916108a3338414610a1d565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346106c05760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c057602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346106c05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c057600435610963816106a2565b73ffffffffffffffffffffffffffffffffffffffff61098781600054163314610a1d565b8116156109995761099790610a82565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610a2457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101e0810190811067ffffffffffffffff821117610b3e57604052565b610b46610af1565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b3e57604052565b60405190610b9982610b21565b565b60405190610180820182811067ffffffffffffffff821117610b3e57604052565b60209067ffffffffffffffff8111610bd6575b60051b0190565b610bde610af1565b610bcf565b5190610b99826106a2565b60209081818403126106c05780519067ffffffffffffffff82116106c057019180601f840112156106c0578251610c2481610bbc565b93610c326040519586610b4b565b818552838086019260051b8201019283116106c0578301905b828210610c59575050505090565b8380918351610c67816106a2565b815201910190610c4b565b506040513d6000823e3d90fd5b90610c8982610bbc565b604090610c9882519182610b4b565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610cc68295610bbc565b019160005b838110610cd85750505050565b6020908251610ce681610b21565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e08301526000610100830152600061012083015260006101408301526000610160830152600061018083015260006101a083015260006101c0830152828601015201610ccb565b91908260209103126106c0576040516020810181811067ffffffffffffffff821117610d8d575b60405291518252565b610d95610af1565b610d84565b906020828203126106c057610dae91610d5d565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e0f570190565b610e17610db1565b0190565b8051821015610e2f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff821682036106c057565b519064ffffffffff821682036106c057565b519060ff821682036106c057565b610180818303126106c057610eb8610eb1610b9b565b9282610d5d565b8252610ec660208201610e5e565b6020830152610ed760408201610e5e565b6040830152610ee860608201610e5e565b6060830152610ef960808201610e5e565b6080830152610f0a60a08201610e5e565b60a0830152610f1b60c08201610e7b565b60c0830152610f2c60e08201610be3565b60e0830152610100610f3f818301610be3565b90830152610120610f51818301610be3565b90830152610140610f63818301610be3565b90830152610f75610160809201610e8d565b9082015290565b519081151582036106c057565b9190826101409103126106c057815191602081015191604082015191606081015191608082015191610fbd60a08201610f7c565b91610fca60c08301610f7c565b91610fd760e08201610f7c565b91610dae610120610feb6101008501610f7c565b9301610f7c565b90816101209103126106c05780519160208201519160408101519160608201519160808101519160a08201519160c081015191610dae610100610feb60e08501610e7b565b604051906040820182811067ffffffffffffffff821117611082575b604052600282527f37370000000000000000000000000000000000000000000000000000000000006020830152565b61108a610af1565b611053565b156110975750565b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310611121575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611114575b01168101030190fd5b600085828601015261110b565b81830181015186840160440152859350918201916110d4565b90600191611152611149611037565b6080841061108f565b5190807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046002118115151661118c575b821b1c16151590565b611194610db1565b611183565b90600180926111b26111a9611037565b6080851061108f565b5191807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0460021181151516611222575b811b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611215575b011c16151590565b61121d610db1565b61120d565b61122a610db1565b6111e356fea264697066735822122076798426853f5198407c88beda972d6bbfb9996fede26a87e7a9b32a14956b1b64736f6c634300080d0033",
  "deployedBytecode": "0x6080806040526004908136101561001557600080fd5b6000803560e01c92836348f59e5914610072575050508063715018a6146100695780638da5cb5b146100605763f2fde38b14610053575b3880600080fd5b61005b610927565b61004c565b5061005b6108d4565b5061005b61082c565b3461069e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261069e578035906100ad826106a2565b602435936100ba856106a2565b604435936100c7856106a2565b73ffffffffffffffffffffffffffffffffffffffff809416917fd1946dbc00000000000000000000000000000000000000000000000000000000815281818581865afa908115610691575b829161066f575b506101248151610c7f565b95604051957f4417a58300000000000000000000000000000000000000000000000000000000875260208780610179858a830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381885afa968715610662575b8497610631575b50839894989416935b825181101561061f5786836102996102246101808d6101d26101b88887610e1b565b5173ffffffffffffffffffffffffffffffffffffffff1690565b908c6040518095819482937f35ea6a75000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa908115610612575b88916105e1575b50876101406102496101b88887610e1b565b8c60405195869283927f3e150141000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03818d5afa9283156105d4575b878b8d898594869861057b575b50906102cc6101b8610120959493610326999a9b610e1b565b604080517f28dd2d0100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831693810193845291909416602083015296879384928392910190565b03915afa801561056e575b82918390898c8697879561051d575b508161034b91610e1b565b5173ffffffffffffffffffffffffffffffffffffffff169860e08901516103859073ffffffffffffffffffffffffffffffffffffffff1690565b9a6103908382611199565b9261039a9161113a565b926101008a01516103be9073ffffffffffffffffffffffffffffffffffffffff1690565b9560a08b01516103dd906fffffffffffffffffffffffffffffffff1690565b976101208c01516104019073ffffffffffffffffffffffffffffffffffffffff1690565b6080909c01516fffffffffffffffffffffffffffffffff169c610422610b8c565b73ffffffffffffffffffffffffffffffffffffffff90911681529d8e9073ffffffffffffffffffffffffffffffffffffffff1660208201526040015260608d0152151560808c0152151560a08b0152151560c08a0152151560e089015261010088015273ffffffffffffffffffffffffffffffffffffffff166101208701526fffffffffffffffffffffffffffffffff1661014086015261016085015261018084015273ffffffffffffffffffffffffffffffffffffffff166101a08301526fffffffffffffffffffffffffffffffff166101c0820152610503828a610e1b565b5261050e8189610e1b565b5061051890610de1565b610196565b919750935061054f91955061034b94508692506101203d61012011610567575b6105478183610b4b565b810190610ff2565b50949b919a9699509794969094935091506103409050565b503d61053d565b610576610c72565b610331565b6103269798506101209493929195506101b86105b36102cc926101403d610140116105cd575b6105ab8183610b4b565b810190610f89565b5050509c95509350505050979a99509293949550506102b3565b503d6105a1565b6105dc610c72565b6102a6565b61060591506101803d6101801161060b575b6105fd8183610b4b565b810190610e9b565b8d610237565b503d6105f3565b61061a610c72565b610230565b6040518061062d8a826106c5565b0390f35b61065491975060203d60201161065b575b61064c8183610b4b565b810190610d9a565b958961018d565b503d610642565b61066a610c72565b610186565b61068b91503d8084833e6106838183610b4b565b810190610bee565b87610119565b610699610c72565b610112565b5080fd5b73ffffffffffffffffffffffffffffffffffffffff8116036106c057565b600080fd5b60208082019080835283518092528060408094019401926000905b8382106106ef57505050505090565b9091929394836101e060019261081f895161072083825173ffffffffffffffffffffffffffffffffffffffff169052565b8085015173ffffffffffffffffffffffffffffffffffffffff168386015280870151838801526060808201519084015260808082015115159084015260a08181015115159084015260c08181015115159084015260e08181015115159084015261010081810151908401526101208082015173ffffffffffffffffffffffffffffffffffffffff1690840152610140818101516fffffffffffffffffffffffffffffffff1690840152610160818101519084015261018080820151908401526101a08082015173ffffffffffffffffffffffffffffffffffffffff16908401526101c0908101516fffffffffffffffffffffffffffffffff1690830152565b01960194939201906106e0565b50346106c0576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108d15780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916108a3338414610a1d565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346106c05760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c057602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346106c05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c057600435610963816106a2565b73ffffffffffffffffffffffffffffffffffffffff61098781600054163314610a1d565b8116156109995761099790610a82565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610a2457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101e0810190811067ffffffffffffffff821117610b3e57604052565b610b46610af1565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b3e57604052565b60405190610b9982610b21565b565b60405190610180820182811067ffffffffffffffff821117610b3e57604052565b60209067ffffffffffffffff8111610bd6575b60051b0190565b610bde610af1565b610bcf565b5190610b99826106a2565b60209081818403126106c05780519067ffffffffffffffff82116106c057019180601f840112156106c0578251610c2481610bbc565b93610c326040519586610b4b565b818552838086019260051b8201019283116106c0578301905b828210610c59575050505090565b8380918351610c67816106a2565b815201910190610c4b565b506040513d6000823e3d90fd5b90610c8982610bbc565b604090610c9882519182610b4b565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610cc68295610bbc565b019160005b838110610cd85750505050565b6020908251610ce681610b21565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e08301526000610100830152600061012083015260006101408301526000610160830152600061018083015260006101a083015260006101c0830152828601015201610ccb565b91908260209103126106c0576040516020810181811067ffffffffffffffff821117610d8d575b60405291518252565b610d95610af1565b610d84565b906020828203126106c057610dae91610d5d565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e0f570190565b610e17610db1565b0190565b8051821015610e2f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff821682036106c057565b519064ffffffffff821682036106c057565b519060ff821682036106c057565b610180818303126106c057610eb8610eb1610b9b565b9282610d5d565b8252610ec660208201610e5e565b6020830152610ed760408201610e5e565b6040830152610ee860608201610e5e565b6060830152610ef960808201610e5e565b6080830152610f0a60a08201610e5e565b60a0830152610f1b60c08201610e7b565b60c0830152610f2c60e08201610be3565b60e0830152610100610f3f818301610be3565b90830152610120610f51818301610be3565b90830152610140610f63818301610be3565b90830152610f75610160809201610e8d565b9082015290565b519081151582036106c057565b9190826101409103126106c057815191602081015191604082015191606081015191608082015191610fbd60a08201610f7c565b91610fca60c08301610f7c565b91610fd760e08201610f7c565b91610dae610120610feb6101008501610f7c565b9301610f7c565b90816101209103126106c05780519160208201519160408101519160608201519160808101519160a08201519160c081015191610dae610100610feb60e08501610e7b565b604051906040820182811067ffffffffffffffff821117611082575b604052600282527f37370000000000000000000000000000000000000000000000000000000000006020830152565b61108a610af1565b611053565b156110975750565b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310611121575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611114575b01168101030190fd5b600085828601015261110b565b81830181015186840160440152859350918201916110d4565b90600191611152611149611037565b6080841061108f565b5190807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046002118115151661118c575b821b1c16151590565b611194610db1565b611183565b90600180926111b26111a9611037565b6080851061108f565b5191807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0460021181151516611222575b811b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611215575b011c16151590565b61121d610db1565b61120d565b61122a610db1565b6111e356fea264697066735822122076798426853f5198407c88beda972d6bbfb9996fede26a87e7a9b32a14956b1b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/AaveV2Multicall.sol:AaveV2Multicall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}