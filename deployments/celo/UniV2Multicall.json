{
  "address": "0xb61c501fE89C49c069cc285db493e8f4dF5796cA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getAllPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "token0Balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct UniV2Multicall.UniV2Pool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "factory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct UniV2Multicall.PoolAddresses[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "name": "getPoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "token0Balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct UniV2Multicall.UniV2Pool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe61761203944d6da436be9b9041698256014405b6fe156eeabb9298ddcc39581",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xb61c501fE89C49c069cc285db493e8f4dF5796cA",
    "transactionIndex": 1,
    "gasUsed": "991107",
    "logsBloom": "0x
    "blockHash": "0x6870a920e4d9e3bc01f279d09d91c7e92ff336fe50c1443f0bd3f975c3a63f8e",
    "transactionHash": "0xe61761203944d6da436be9b9041698256014405b6fe156eeabb9298ddcc39581",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15406363,
        "transactionHash": "0xe61761203944d6da436be9b9041698256014405b6fe156eeabb9298ddcc39581",
        "address": "0xb61c501fE89C49c069cc285db493e8f4dF5796cA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6870a920e4d9e3bc01f279d09d91c7e92ff336fe50c1443f0bd3f975c3a63f8e"
      }
    ],
    "blockNumber": 15406363,
    "cumulativeGasUsed": "1015623",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "05cd30db9ee15a7ba46b3788b2bcc303",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"}],\"internalType\":\"struct UniV2Multicall.UniV2Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct UniV2Multicall.PoolAddresses[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"getPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"}],\"internalType\":\"struct UniV2Multicall.UniV2Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/UniV2Multicall.sol\":\"UniV2Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\",\"keccak256\":\"0x3922110d266eb2283dcd89a633ff54e48d95e5739e7ac10b5ac78604bd6ea19b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/UniV2Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract UniV2Multicall is Ownable {\\n    struct UniV2Pool {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n        uint256 token0Balance;\\n        uint256 token1Balance;\\n    }\\n\\n    function getAllPools(\\n        IUniswapV2Factory factory,\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (UniV2Pool[] memory pools) {\\n        pools = new UniV2Pool[](end - start + 1);\\n\\n        for (uint256 i = start; i <= end; i++) {\\n            IUniswapV2Pair pair = IUniswapV2Pair(factory.allPairs(i));\\n            uint256 token0Balance = balanceOf(pair.token0(), address(pair));\\n            uint256 token1Balance = balanceOf(pair.token1(), address(pair));\\n\\n            pools[i - start] = UniV2Pool(\\n                address(pair),\\n                pair.token0(),\\n                pair.token1(),\\n                token0Balance,\\n                token1Balance\\n            );\\n        }\\n    }\\n\\n    function getPools(address[] memory poolAddresses)\\n        external\\n        view\\n        returns (UniV2Pool[] memory pools)\\n    {\\n        pools = new UniV2Pool[](poolAddresses.length);\\n\\n        for (uint16 index = 0; index < poolAddresses.length; index++) {\\n            IUniswapV2Pair pair = IUniswapV2Pair(poolAddresses[index]);\\n            uint256 token0Balance = balanceOf(pair.token0(), address(pair));\\n            uint256 token1Balance = balanceOf(pair.token1(), address(pair));\\n\\n            pools[index] = UniV2Pool(\\n                address(pair),\\n                pair.token0(),\\n                pair.token1(),\\n                token0Balance,\\n                token1Balance\\n            );\\n        }\\n    }\\n\\n    function balanceOf(address token, address target)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (token.code.length == 0) {\\n            return 0;\\n        }\\n        try ERC20(token).balanceOf(target) returns (uint256 balance) {\\n            return balance;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    struct PoolAddresses {\\n        address token0;\\n        address token1;\\n    }\\n\\n    function getPoolAddresses(\\n        IUniswapV2Factory factory,\\n        PoolAddresses[] memory pools\\n    ) external view returns (address[] memory poolAddresses) {\\n        poolAddresses = new address[](pools.length);\\n\\n        for (uint16 index = 0; index < pools.length; index++) {\\n            address token0 = pools[index].token0;\\n            address token1 = pools[index].token1;\\n            (address tokenA, address tokenB) = token0 < token1\\n                ? (token0, token1)\\n                : (token1, token0);\\n            poolAddresses[index] = factory.getPair(tokenA, tokenB);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1eff22270c534466514c4414b5014a5674011ec45f4d78467b7db10b26446177\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361109e90816100618239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c928363184160011461009b57505050806355902b7c146100925780635e63547a14610089578063715018a6146100805780638da5cb5b146100775763f2fde38b1461006a575b3880600080fd5b610072610863565b610063565b50610072610810565b5061007261076b565b506100726106ac565b506100726105b6565b346103da576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d6578235926100d7846103dd565b60243591604435936100f96100f46100ef8688610a5d565b610a74565b610aae565b9573ffffffffffffffffffffffffffffffffffffffff908116855b8781111561012d578951806101298b82610400565b0390f35b6102e9906102e38a8c8961017b6102bf8a8a85517f1e3dd18b00000000000000000000000000000000000000000000000000000000815289818d81806020998a958c83019190602083019252565b03915afa9081156103c9575b83916103ac575b50169480516101d8877f0dfe1681000000000000000000000000000000000000000000000000000000009283815287818a81855afa90811561039f575b8691610388575b50610df0565b94825196610220897fd21220a700000000000000000000000000000000000000000000000000000000998a815284818581855afa90811561037b575b889161035e5750610df0565b978451938452828483818d5afa938415610351575b8694610330575b50829085519283918252818c5afa948515610323575b946102ee575b50906102a29161028561026961051e565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b88019073ffffffffffffffffffffffffffffffffffffffff169052565b85019073ffffffffffffffffffffffffffffffffffffffff169052565b8a83015260808201526102dc6102d58c86610a5d565b8093610bb0565b528b610bb0565b50610b5d565b610114565b819450610314906102a293923d871161031c575b61030c81836104dd565b810190610b8b565b939091610258565b503d610302565b61032b610ba3565b610252565b8391945061034a90823d841161031c5761030c81836104dd565b939061023c565b610359610ba3565b610235565b6103759150853d871161031c5761030c81836104dd565b386101d2565b610383610ba3565b610214565b6103759150883d8a1161031c5761030c81836104dd565b6103a7610ba3565b6101cb565b6103c39150853d871161031c5761030c81836104dd565b3861018e565b6103d1610ba3565b610187565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036103fb57565b600080fd5b60208082019080835283518092528060408094019401926000905b83821061042a57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff908116885281850151811688860152818301511687830152606080820151908801526080908101519087015260a0909501949382019360019091019061041b565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104d057604052565b6104d8610484565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104d057604052565b6040519060a0820182811067ffffffffffffffff8211176104d057604052565b60209067ffffffffffffffff8111610558575b60051b0190565b610560610484565b610551565b6020908160408183019282815285518094520193019160005b82811061058c575050505090565b835173ffffffffffffffffffffffffffffffffffffffff168552938101939281019260010161057e565b50346103fb576040807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb576004356105f3816103dd565b6024359067ffffffffffffffff82116103fb57366023830112156103fb578160040135916106208361053e565b9261062d855194856104dd565b80845260209060248286019160061b840101923684116103fb57602401905b83821061066c57610129876106618888610ee3565b905191829182610565565b86823603126103fb578287918251610683816104b4565b843561068e816103dd565b81528285013561069d816103dd565b8382015281520191019061064c565b50346103fb576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb5760043567ffffffffffffffff81116103fb57366023820112156103fb578060040135906107098261053e565b9161071760405193846104dd565b80835260248484019160051b830101913683116103fb57602401905b8282106107525761012961074685610c07565b60405191829182610400565b8480918335610760816103dd565b815201910190610733565b50346103fb576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103da5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107e2338414610959565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346103fb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346103fb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb5760043561089f816103dd565b73ffffffffffffffffffffffffffffffffffffffff6108c381600054163314610959565b8116156108d5576108d3906109be565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561096057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818110610a68570390565b610a70610a2d565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610aa2570190565b610aaa610a2d565b0190565b90610ab88261053e565b604090610ac7825191826104dd565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610af5829561053e565b019160005b838110610b075750505050565b602090825160a0810181811067ffffffffffffffff821117610b50575b845260008152826000818301526000858301526000606083015260006080830152828601015201610afa565b610b58610484565b610b24565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610aa2570190565b908160209103126103fb5751610ba0816103dd565b90565b506040513d6000823e3d90fd5b8051821015610bc45760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60019061ffff809116908114610aa2570190565b610c118151610aae565b9160005b825161ffff821690811015610dea5790610d7382610c72610c59610c59610c3f610d79978a610bb0565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b60408051610d587f0dfe16810000000000000000000000000000000000000000000000000000000091828152602093610cc48660049387818681855afa908115610ddd575b6000916103885750610df0565b93815195610d0d887fd21220a7000000000000000000000000000000000000000000000000000000009889815283818881855afa908115610dd0575b600091610db95750610df0565b968351928352818386818c5afa928315610dac575b600093610d8b575b50819084519586918252818b5afa938415610d7e575b6000946102ee5750906102a29161028561026961051e565b60608301526080820152610d6c8289610bb0565b5286610bb0565b50610bf3565b610c15565b610d86610ba3565b610d40565b82919350610da590823d841161031c5761030c81836104dd565b9290610d2a565b610db4610ba3565b610d22565b6103759150843d861161031c5761030c81836104dd565b610dd8610ba3565b610d00565b610de5610ba3565b610cb7565b50509050565b803b15610e8d576020906024604051809481937f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa60009181610e5a575b50610ba05750600090565b90916020823d8211610e85575b81610e74602093836104dd565b810103126103da5750519038610e4f565b3d9150610e67565b5050600090565b90610e9e8261053e565b610eab60405191826104dd565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ed9829461053e565b0190602036910137565b9091610eef8351610e94565b9260005b815161ffff821690811015611061579061101f82610f32610f176110249587610bb0565b515173ffffffffffffffffffffffffffffffffffffffff1690565b90610fe260208093610f6482610f48868c610bb0565b51015173ffffffffffffffffffffffffffffffffffffffff1690565b9073ffffffffffffffffffffffffffffffffffffffff90818316828216101561105b575b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152921660248301529092839190829081906044820190565b03918d165afa92831561104e575b600093611029575b50506110049089610bb0565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610bf3565b610ef3565b611004929350908161104692903d1061031c5761030c81836104dd565b919038610ff8565b611056610ba3565b610ff0565b91610f88565b505050905056fea2646970667358221220c05440e34bb6f5fdc876142ab8943ab2afc572ebe9d0dd9a02e451c0114cca5364736f6c634300080d0033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c928363184160011461009b57505050806355902b7c146100925780635e63547a14610089578063715018a6146100805780638da5cb5b146100775763f2fde38b1461006a575b3880600080fd5b610072610863565b610063565b50610072610810565b5061007261076b565b506100726106ac565b506100726105b6565b346103da576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103d6578235926100d7846103dd565b60243591604435936100f96100f46100ef8688610a5d565b610a74565b610aae565b9573ffffffffffffffffffffffffffffffffffffffff908116855b8781111561012d578951806101298b82610400565b0390f35b6102e9906102e38a8c8961017b6102bf8a8a85517f1e3dd18b00000000000000000000000000000000000000000000000000000000815289818d81806020998a958c83019190602083019252565b03915afa9081156103c9575b83916103ac575b50169480516101d8877f0dfe1681000000000000000000000000000000000000000000000000000000009283815287818a81855afa90811561039f575b8691610388575b50610df0565b94825196610220897fd21220a700000000000000000000000000000000000000000000000000000000998a815284818581855afa90811561037b575b889161035e5750610df0565b978451938452828483818d5afa938415610351575b8694610330575b50829085519283918252818c5afa948515610323575b946102ee575b50906102a29161028561026961051e565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b88019073ffffffffffffffffffffffffffffffffffffffff169052565b85019073ffffffffffffffffffffffffffffffffffffffff169052565b8a83015260808201526102dc6102d58c86610a5d565b8093610bb0565b528b610bb0565b50610b5d565b610114565b819450610314906102a293923d871161031c575b61030c81836104dd565b810190610b8b565b939091610258565b503d610302565b61032b610ba3565b610252565b8391945061034a90823d841161031c5761030c81836104dd565b939061023c565b610359610ba3565b610235565b6103759150853d871161031c5761030c81836104dd565b386101d2565b610383610ba3565b610214565b6103759150883d8a1161031c5761030c81836104dd565b6103a7610ba3565b6101cb565b6103c39150853d871161031c5761030c81836104dd565b3861018e565b6103d1610ba3565b610187565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036103fb57565b600080fd5b60208082019080835283518092528060408094019401926000905b83821061042a57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff908116885281850151811688860152818301511687830152606080820151908801526080908101519087015260a0909501949382019360019091019061041b565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104d057604052565b6104d8610484565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104d057604052565b6040519060a0820182811067ffffffffffffffff8211176104d057604052565b60209067ffffffffffffffff8111610558575b60051b0190565b610560610484565b610551565b6020908160408183019282815285518094520193019160005b82811061058c575050505090565b835173ffffffffffffffffffffffffffffffffffffffff168552938101939281019260010161057e565b50346103fb576040807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb576004356105f3816103dd565b6024359067ffffffffffffffff82116103fb57366023830112156103fb578160040135916106208361053e565b9261062d855194856104dd565b80845260209060248286019160061b840101923684116103fb57602401905b83821061066c57610129876106618888610ee3565b905191829182610565565b86823603126103fb578287918251610683816104b4565b843561068e816103dd565b81528285013561069d816103dd565b8382015281520191019061064c565b50346103fb576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb5760043567ffffffffffffffff81116103fb57366023820112156103fb578060040135906107098261053e565b9161071760405193846104dd565b80835260248484019160051b830101913683116103fb57602401905b8282106107525761012961074685610c07565b60405191829182610400565b8480918335610760816103dd565b815201910190610733565b50346103fb576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103da5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107e2338414610959565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346103fb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346103fb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103fb5760043561089f816103dd565b73ffffffffffffffffffffffffffffffffffffffff6108c381600054163314610959565b8116156108d5576108d3906109be565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561096057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818110610a68570390565b610a70610a2d565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610aa2570190565b610aaa610a2d565b0190565b90610ab88261053e565b604090610ac7825191826104dd565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610af5829561053e565b019160005b838110610b075750505050565b602090825160a0810181811067ffffffffffffffff821117610b50575b845260008152826000818301526000858301526000606083015260006080830152828601015201610afa565b610b58610484565b610b24565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610aa2570190565b908160209103126103fb5751610ba0816103dd565b90565b506040513d6000823e3d90fd5b8051821015610bc45760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60019061ffff809116908114610aa2570190565b610c118151610aae565b9160005b825161ffff821690811015610dea5790610d7382610c72610c59610c59610c3f610d79978a610bb0565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b60408051610d587f0dfe16810000000000000000000000000000000000000000000000000000000091828152602093610cc48660049387818681855afa908115610ddd575b6000916103885750610df0565b93815195610d0d887fd21220a7000000000000000000000000000000000000000000000000000000009889815283818881855afa908115610dd0575b600091610db95750610df0565b968351928352818386818c5afa928315610dac575b600093610d8b575b50819084519586918252818b5afa938415610d7e575b6000946102ee5750906102a29161028561026961051e565b60608301526080820152610d6c8289610bb0565b5286610bb0565b50610bf3565b610c15565b610d86610ba3565b610d40565b82919350610da590823d841161031c5761030c81836104dd565b9290610d2a565b610db4610ba3565b610d22565b6103759150843d861161031c5761030c81836104dd565b610dd8610ba3565b610d00565b610de5610ba3565b610cb7565b50509050565b803b15610e8d576020906024604051809481937f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa60009181610e5a575b50610ba05750600090565b90916020823d8211610e85575b81610e74602093836104dd565b810103126103da5750519038610e4f565b3d9150610e67565b5050600090565b90610e9e8261053e565b610eab60405191826104dd565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ed9829461053e565b0190602036910137565b9091610eef8351610e94565b9260005b815161ffff821690811015611061579061101f82610f32610f176110249587610bb0565b515173ffffffffffffffffffffffffffffffffffffffff1690565b90610fe260208093610f6482610f48868c610bb0565b51015173ffffffffffffffffffffffffffffffffffffffff1690565b9073ffffffffffffffffffffffffffffffffffffffff90818316828216101561105b575b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152921660248301529092839190829081906044820190565b03918d165afa92831561104e575b600093611029575b50506110049089610bb0565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610bf3565b610ef3565b611004929350908161104692903d1061031c5761030c81836104dd565b919038610ff8565b611056610ba3565b610ff0565b91610f88565b505050905056fea2646970667358221220c05440e34bb6f5fdc876142ab8943ab2afc572ebe9d0dd9a02e451c0114cca5364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/UniV2Multicall.sol:UniV2Multicall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}