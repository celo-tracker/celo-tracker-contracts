{
  "address": "0xC38e0298c9E6E1090E02e7C86F9ea9D298208B45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPairFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "contract IVoter",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getAllPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "token0Balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isStable",
              "type": "bool"
            }
          ],
          "internalType": "struct VeloPoolsMulticall.VeloPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPairFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isStable",
              "type": "bool"
            }
          ],
          "internalType": "struct VeloPoolsMulticall.PoolAddresses[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "name": "getPoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVoter",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "token0Balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isStable",
              "type": "bool"
            }
          ],
          "internalType": "struct VeloPoolsMulticall.VeloPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb25d88dddf7fc4f066db2c486654f9df80e44e5f77221eef92d7d633928d8c86",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xC38e0298c9E6E1090E02e7C86F9ea9D298208B45",
    "transactionIndex": 0,
    "gasUsed": "971578",
    "logsBloom": "0x
    "blockHash": "0xea7b9c70ccce833fb29366dd5c5a03e97c38e1ecdfce5701c6096d7968976cd2",
    "transactionHash": "0xb25d88dddf7fc4f066db2c486654f9df80e44e5f77221eef92d7d633928d8c86",
    "logs": [],
    "blockNumber": 36095660,
    "cumulativeGasUsed": "971578",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "58f73148a7dd5dedf2f6c9116d7c6598",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IVoter\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"}],\"internalType\":\"struct VeloPoolsMulticall.VeloPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"}],\"internalType\":\"struct VeloPoolsMulticall.PoolAddresses[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"getPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"}],\"internalType\":\"struct VeloPoolsMulticall.VeloPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/VeloPoolsMulticall.sol\":\"VeloPoolsMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/velodrome/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint256 dec0,\\n            uint256 dec1,\\n            uint256 r0,\\n            uint256 r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n\\n    function claimFees() external returns (uint256, uint256);\\n\\n    function tokens() external returns (address, address);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint256 _reserve0,\\n            uint256 _reserve1,\\n            uint256 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa5fcfe33e3fac74881aec41dc2e4e1e7cebb5c4185548c50ac41329cb5c76cc\",\"license\":\"MIT\"},\"contracts/interfaces/velodrome/IPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint256);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x44071aa773cc5500f8e418867818ef9de023c333cade815184f148da27b2fc5b\",\"license\":\"MIT\"},\"contracts/interfaces/velodrome/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function emergencyCouncil() external view returns (address);\\n\\n    function attachTokenToGauge(uint256 _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint256 _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint256 _tokenId,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint256 _tokenId,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function isWhitelisted(address token) external view returns (bool);\\n\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function gauges(address pool) external view returns (address);\\n\\n    function isAlive(address gauge) external view returns (bool);\\n\\n    function internal_bribes(address gauge) external view returns (address);\\n\\n    function external_bribes(address gauge) external view returns (address);\\n\\n    function weights(address gauge) external view returns (uint256);\\n\\n    function totalWeight() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf33711290c61b46b641a00560e8f24754e8a8df756e6341b3d2bc415ae6ea9f\",\"license\":\"MIT\"},\"contracts/multicall/VeloPoolsMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/velodrome/IPairFactory.sol\\\";\\nimport \\\"../interfaces/velodrome/IPair.sol\\\";\\nimport \\\"../interfaces/velodrome/IVoter.sol\\\";\\n\\ncontract VeloPoolsMulticall {\\n    struct VeloPool {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n        uint256 token0Balance;\\n        uint256 token1Balance;\\n        address gauge;\\n        bool isStable;\\n    }\\n\\n    function getAllPools(\\n        IPairFactory factory,\\n        IVoter voter,\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (VeloPool[] memory pools) {\\n        pools = new VeloPool[](end - start + 1);\\n\\n        for (uint256 i = start; i <= end; i++) {\\n            IPair pair = IPair(factory.allPairs(i));\\n            uint256 token0Balance = balanceOf(pair.token0(), address(pair));\\n            uint256 token1Balance = balanceOf(pair.token1(), address(pair));\\n\\n            pools[i - start] = VeloPool(\\n                address(pair),\\n                pair.token0(),\\n                pair.token1(),\\n                token0Balance,\\n                token1Balance,\\n                voter.gauges(address(pair)),\\n                pair.stable()\\n            );\\n        }\\n    }\\n\\n    function getPools(IVoter voter, address[] memory poolAddresses)\\n        external\\n        view\\n        returns (VeloPool[] memory pools)\\n    {\\n        pools = new VeloPool[](poolAddresses.length);\\n\\n        for (uint16 index = 0; index < poolAddresses.length; index++) {\\n            IPair pair = IPair(poolAddresses[index]);\\n            uint256 token0Balance = balanceOf(pair.token0(), address(pair));\\n            uint256 token1Balance = balanceOf(pair.token1(), address(pair));\\n\\n            pools[index] = VeloPool(\\n                address(pair),\\n                pair.token0(),\\n                pair.token1(),\\n                token0Balance,\\n                token1Balance,\\n                voter.gauges(address(pair)),\\n                pair.stable()\\n            );\\n        }\\n    }\\n\\n    function balanceOf(address token, address target)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (token.code.length == 0) {\\n            return 0;\\n        }\\n        try ERC20(token).balanceOf(target) returns (uint256 balance) {\\n            return balance;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    struct PoolAddresses {\\n        address token0;\\n        address token1;\\n        bool isStable;\\n    }\\n\\n    function getPoolAddresses(\\n        IPairFactory factory,\\n        PoolAddresses[] memory pools\\n    ) external view returns (address[] memory poolAddresses) {\\n        poolAddresses = new address[](pools.length);\\n\\n        for (uint16 index = 0; index < pools.length; index++) {\\n            address token0 = pools[index].token0;\\n            address token1 = pools[index].token1;\\n            (address tokenA, address tokenB) = token0 < token1\\n                ? (token0, token1)\\n                : (token1, token0);\\n            poolAddresses[index] = factory.getPair(\\n                tokenA,\\n                tokenB,\\n                pools[index].isStable\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3f9799bf17f61cd57f131cdeabf79d6842679d5eec137e57030e3bd7923fe38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576110b0908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816317709c431461005257508063e2be3ce7146100495763eb21c6701461004157600080fd5b61000e6107bd565b5061000e6102c8565b346101245760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101245760043561008d8161012b565b60243567ffffffffffffffff81116101275736602382011215610127578060040135926100b984610203565b936100c760405195866101a2565b80855260209260248487019260051b820101923684116101245750602401905b82821061010b576101076100fb8787610ac1565b6040519182918261022a565b0390f35b83809183356101198161012b565b8152019101906100e7565b80fd5b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761019557604052565b61019d610149565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761019557604052565b6040519060e0820182811067ffffffffffffffff82111761019557604052565b60209067ffffffffffffffff811161021d575b60051b0190565b610225610149565b610216565b60208082019080835283518092528060408094019401926000905b83821061025457505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015181168886015281830151811688840152606080830151908901526080808301519089015260a0808301519091169088015260c09081015115159087015260e09095019493820193600190910190610245565b503461000e576080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004908135916103088361012b565b602435906103158261012b565b604435906064359461033761033261032d85896108f4565b61090b565b610945565b9473ffffffffffffffffffffffffffffffffffffffff91821694821691845b8881111561036c57604051806101078a8261022a565b610605906105ff886105e36103bf896104f38a8960409689885180927f1e3dd18b000000000000000000000000000000000000000000000000000000008252818060209a8b958b83019190602083019252565b03915afa908115610755575b600091610738575b501695805161041e887f0dfe1681000000000000000000000000000000000000000000000000000000009283815288818981855afa90811561072b575b600091610714575b50610de2565b91805191878a610469817fd21220a7000000000000000000000000000000000000000000000000000000009687815284818d81855afa908115610707575b6000916106ea5750610de2565b96845193845282848b81855afa9384156106dd575b6000946106be575b50845195865282868b81855afa9586156106b1575b600096610692575b50845180809a81947fb9a09fd50000000000000000000000000000000000000000000000000000000083528d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615610685575b600096610656575b5087825180987f22be3de1000000000000000000000000000000000000000000000000000000008252818d5afa968715610649575b60009761060a575b50906105976105b493926105da989961057a61055e6101e3565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c019073ffffffffffffffffffffffffffffffffffffffff169052565b89019073ffffffffffffffffffffffffffffffffffffffff169052565b60608701528a86015273ffffffffffffffffffffffffffffffffffffffff1660a0850152565b151560c0830152565b6105ed89846108f4565b906105f8828d610a6a565b528a610a6a565b50610a02565b610356565b6105da97506105b4939291610637610597928b3d8d11610642575b61062f81836101a2565b810190610a55565b985091929350610544565b503d610625565b610651610a48565b61053c565b610677919650883d8a1161067e575b61066f81836101a2565b810190610a30565b9438610507565b503d610665565b61068d610a48565b6104ff565b6106aa919650833d851161067e5761066f81836101a2565b94386104a3565b6106b9610a48565b61049b565b6106d6919450833d851161067e5761066f81836101a2565b9238610486565b6106e5610a48565b61047e565b6107019150853d871161067e5761066f81836101a2565b38610418565b61070f610a48565b61045c565b6107019150893d8b1161067e5761066f81836101a2565b610733610a48565b610410565b61074f9150863d881161067e5761066f81836101a2565b386103d3565b61075d610a48565b6103cb565b8015150361000e57565b6020908160408183019282815285518094520193019160005b828110610793575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610785565b503461000e576040807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435906107fb8261012b565b6024359167ffffffffffffffff831161000e573660238401121561000e57826004013561082781610203565b93610834845195866101a2565b8185526020808601602460608095028401019236841161000e57602401905b83821061087357610107876108688a89610ed5565b90519182918261076c565b848236031261000e57828591885161088a81610179565b84356108958161012b565b8152828501356108a48161012b565b83820152898501356108b581610762565b8a820152815201910190610853565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181106108ff570390565b6109076108c4565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610939570190565b6109416108c4565b0190565b9061094f82610203565b60409061095e825191826101a2565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061098c8295610203565b019160005b83811061099e5750505050565b602090825160e0810181811067ffffffffffffffff8211176109f5575b845260008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152828601015201610991565b6109fd610149565b6109bb565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610939570190565b9081602091031261000e5751610a458161012b565b90565b506040513d6000823e3d90fd5b9081602091031261000e5751610a4581610762565b8051821015610a7e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60019061ffff809116908114610939570190565b91610acc8251610945565b9260005b835161ffff821690811015610ddb5790610d1082610b2d610b14610b14610afa610d16978b610a6a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b610cff60408051610c6c897f0dfe16810000000000000000000000000000000000000000000000000000000093848452602094610b828860049688818981855afa90811561072b576000916107145750610de2565b91805191878a610bcc817fd21220a7000000000000000000000000000000000000000000000000000000009687815284818d81855afa908115610707576000916106ea5750610de2565b96845193845282848b81855afa938415610dce575b600094610daf575b50845195865282868b81855afa958615610da2575b600096610d83575b508973ffffffffffffffffffffffffffffffffffffffff8651809b819582947fb9a09fd5000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa958615610d76575b600096610d57575b5087825180987f22be3de1000000000000000000000000000000000000000000000000000000008252818d5afa968715610d4a575b600097610d1b575b5090610597610cd893926105da989961057a61055e6101e3565b6060870152608086015273ffffffffffffffffffffffffffffffffffffffff1660a0850152565b610d09828a610a6a565b5287610a6a565b50610aad565b610ad0565b6105da9750610cd8939291610d3f610597928b3d8d116106425761062f81836101a2565b985091929350610cbe565b610d52610a48565b610cb6565b610d6f919650883d8a1161067e5761066f81836101a2565b9438610c81565b610d7e610a48565b610c79565b610d9b919650833d851161067e5761066f81836101a2565b9438610c06565b610daa610a48565b610bfe565b610dc7919450833d851161067e5761066f81836101a2565b9238610be9565b610dd6610a48565b610be1565b5050509050565b803b15610e7f576020906024604051809481937f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa60009181610e4c575b50610a455750600090565b90916020823d8211610e77575b81610e66602093836101a2565b810103126101245750519038610e41565b3d9150610e59565b5050600090565b90610e9082610203565b610e9d60405191826101a2565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ecb8294610203565b0190602036910137565b90610ee08151610e86565b9260005b825161ffff8216908110156110735790611031610f3b83610ff48180610f2b610f10611036998c610a6a565b515173ffffffffffffffffffffffffffffffffffffffff1690565b610f578b60209788958692610a6a565b51015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff91818316818416101561106d575b610f938d610f8b6040968792610a6a565b510151151590565b93517f6801cc3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116602482015291151560448301529092839190829081906064820190565b03918d165afa928315611060575b60009361103b575b50506110169089610a6a565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610aad565b610ee4565b611016929350908161105892903d1061067e5761066f81836101a2565b91903861100a565b611068610a48565b611002565b90610f7a565b505091505056fea2646970667358221220a621ab457fd0536e117550b142c6276d865400ac0fcc33b97370ad7193a4427464736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816317709c431461005257508063e2be3ce7146100495763eb21c6701461004157600080fd5b61000e6107bd565b5061000e6102c8565b346101245760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101245760043561008d8161012b565b60243567ffffffffffffffff81116101275736602382011215610127578060040135926100b984610203565b936100c760405195866101a2565b80855260209260248487019260051b820101923684116101245750602401905b82821061010b576101076100fb8787610ac1565b6040519182918261022a565b0390f35b83809183356101198161012b565b8152019101906100e7565b80fd5b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761019557604052565b61019d610149565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761019557604052565b6040519060e0820182811067ffffffffffffffff82111761019557604052565b60209067ffffffffffffffff811161021d575b60051b0190565b610225610149565b610216565b60208082019080835283518092528060408094019401926000905b83821061025457505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015181168886015281830151811688840152606080830151908901526080808301519089015260a0808301519091169088015260c09081015115159087015260e09095019493820193600190910190610245565b503461000e576080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004908135916103088361012b565b602435906103158261012b565b604435906064359461033761033261032d85896108f4565b61090b565b610945565b9473ffffffffffffffffffffffffffffffffffffffff91821694821691845b8881111561036c57604051806101078a8261022a565b610605906105ff886105e36103bf896104f38a8960409689885180927f1e3dd18b000000000000000000000000000000000000000000000000000000008252818060209a8b958b83019190602083019252565b03915afa908115610755575b600091610738575b501695805161041e887f0dfe1681000000000000000000000000000000000000000000000000000000009283815288818981855afa90811561072b575b600091610714575b50610de2565b91805191878a610469817fd21220a7000000000000000000000000000000000000000000000000000000009687815284818d81855afa908115610707575b6000916106ea5750610de2565b96845193845282848b81855afa9384156106dd575b6000946106be575b50845195865282868b81855afa9586156106b1575b600096610692575b50845180809a81947fb9a09fd50000000000000000000000000000000000000000000000000000000083528d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615610685575b600096610656575b5087825180987f22be3de1000000000000000000000000000000000000000000000000000000008252818d5afa968715610649575b60009761060a575b50906105976105b493926105da989961057a61055e6101e3565b73ffffffffffffffffffffffffffffffffffffffff909e168e52565b8c019073ffffffffffffffffffffffffffffffffffffffff169052565b89019073ffffffffffffffffffffffffffffffffffffffff169052565b60608701528a86015273ffffffffffffffffffffffffffffffffffffffff1660a0850152565b151560c0830152565b6105ed89846108f4565b906105f8828d610a6a565b528a610a6a565b50610a02565b610356565b6105da97506105b4939291610637610597928b3d8d11610642575b61062f81836101a2565b810190610a55565b985091929350610544565b503d610625565b610651610a48565b61053c565b610677919650883d8a1161067e575b61066f81836101a2565b810190610a30565b9438610507565b503d610665565b61068d610a48565b6104ff565b6106aa919650833d851161067e5761066f81836101a2565b94386104a3565b6106b9610a48565b61049b565b6106d6919450833d851161067e5761066f81836101a2565b9238610486565b6106e5610a48565b61047e565b6107019150853d871161067e5761066f81836101a2565b38610418565b61070f610a48565b61045c565b6107019150893d8b1161067e5761066f81836101a2565b610733610a48565b610410565b61074f9150863d881161067e5761066f81836101a2565b386103d3565b61075d610a48565b6103cb565b8015150361000e57565b6020908160408183019282815285518094520193019160005b828110610793575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610785565b503461000e576040807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435906107fb8261012b565b6024359167ffffffffffffffff831161000e573660238401121561000e57826004013561082781610203565b93610834845195866101a2565b8185526020808601602460608095028401019236841161000e57602401905b83821061087357610107876108688a89610ed5565b90519182918261076c565b848236031261000e57828591885161088a81610179565b84356108958161012b565b8152828501356108a48161012b565b83820152898501356108b581610762565b8a820152815201910190610853565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181106108ff570390565b6109076108c4565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610939570190565b6109416108c4565b0190565b9061094f82610203565b60409061095e825191826101a2565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061098c8295610203565b019160005b83811061099e5750505050565b602090825160e0810181811067ffffffffffffffff8211176109f5575b845260008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152828601015201610991565b6109fd610149565b6109bb565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610939570190565b9081602091031261000e5751610a458161012b565b90565b506040513d6000823e3d90fd5b9081602091031261000e5751610a4581610762565b8051821015610a7e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60019061ffff809116908114610939570190565b91610acc8251610945565b9260005b835161ffff821690811015610ddb5790610d1082610b2d610b14610b14610afa610d16978b610a6a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b610cff60408051610c6c897f0dfe16810000000000000000000000000000000000000000000000000000000093848452602094610b828860049688818981855afa90811561072b576000916107145750610de2565b91805191878a610bcc817fd21220a7000000000000000000000000000000000000000000000000000000009687815284818d81855afa908115610707576000916106ea5750610de2565b96845193845282848b81855afa938415610dce575b600094610daf575b50845195865282868b81855afa958615610da2575b600096610d83575b508973ffffffffffffffffffffffffffffffffffffffff8651809b819582947fb9a09fd5000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa958615610d76575b600096610d57575b5087825180987f22be3de1000000000000000000000000000000000000000000000000000000008252818d5afa968715610d4a575b600097610d1b575b5090610597610cd893926105da989961057a61055e6101e3565b6060870152608086015273ffffffffffffffffffffffffffffffffffffffff1660a0850152565b610d09828a610a6a565b5287610a6a565b50610aad565b610ad0565b6105da9750610cd8939291610d3f610597928b3d8d116106425761062f81836101a2565b985091929350610cbe565b610d52610a48565b610cb6565b610d6f919650883d8a1161067e5761066f81836101a2565b9438610c81565b610d7e610a48565b610c79565b610d9b919650833d851161067e5761066f81836101a2565b9438610c06565b610daa610a48565b610bfe565b610dc7919450833d851161067e5761066f81836101a2565b9238610be9565b610dd6610a48565b610be1565b5050509050565b803b15610e7f576020906024604051809481937f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa60009181610e4c575b50610a455750600090565b90916020823d8211610e77575b81610e66602093836101a2565b810103126101245750519038610e41565b3d9150610e59565b5050600090565b90610e9082610203565b610e9d60405191826101a2565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ecb8294610203565b0190602036910137565b90610ee08151610e86565b9260005b825161ffff8216908110156110735790611031610f3b83610ff48180610f2b610f10611036998c610a6a565b515173ffffffffffffffffffffffffffffffffffffffff1690565b610f578b60209788958692610a6a565b51015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff91818316818416101561106d575b610f938d610f8b6040968792610a6a565b510151151590565b93517f6801cc3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116602482015291151560448301529092839190829081906064820190565b03918d165afa928315611060575b60009361103b575b50506110169089610a6a565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610aad565b610ee4565b611016929350908161105892903d1061067e5761066f81836101a2565b91903861100a565b611068610a48565b611002565b90610f7a565b505091505056fea2646970667358221220a621ab457fd0536e117550b142c6276d865400ac0fcc33b97370ad7193a4427464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}