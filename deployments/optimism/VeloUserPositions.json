{
  "address": "0x1E61F5e50092a39B996488F302cCa1F40820aeB6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVoter",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VeloUserPositions.Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "userShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct VeloUserPositions.VeloPosition[]",
          "name": "positions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2f8ae0e13cedf61e63a8916cf25bf7b41514ce4c51bb8d39ae2e817703bc22c",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x1E61F5e50092a39B996488F302cCa1F40820aeB6",
    "transactionIndex": 0,
    "gasUsed": "695835",
    "logsBloom": "0x
    "blockHash": "0x20c52529e5d383e146dcb3fdbf56e7022033db28486bfdffbf42c7344962a99a",
    "transactionHash": "0xb2f8ae0e13cedf61e63a8916cf25bf7b41514ce4c51bb8d39ae2e817703bc22c",
    "logs": [],
    "blockNumber": 36051443,
    "cumulativeGasUsed": "695835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab602f11e89606b473cf684180302b0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct VeloUserPositions.Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"}],\"internalType\":\"struct VeloUserPositions.VeloPosition[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/VeloUserPositions.sol\":\"VeloUserPositions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/velodrome/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint256 amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\\n\\n    function left(address token) external view returns (uint256);\\n\\n    function isForPair() external view returns (bool);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardsListLength() external view returns (uint256);\\n\\n    function rewards(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa782c4565ad088c055c55358a66ecdc4badc6df682f4ecaa76e363fb70e6efb0\",\"license\":\"MIT\"},\"contracts/interfaces/velodrome/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function emergencyCouncil() external view returns (address);\\n\\n    function attachTokenToGauge(uint256 _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint256 _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint256 _tokenId,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint256 _tokenId,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function isWhitelisted(address token) external view returns (bool);\\n\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function gauges(address pool) external view returns (address);\\n\\n    function isAlive(address gauge) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfea56dfe4b9690319b21e2e0ceded7f2d03c820c6ee6e80dec55f75dbda26463\",\"license\":\"MIT\"},\"contracts/multicall/VeloUserPositions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/velodrome/IGauge.sol\\\";\\nimport \\\"../interfaces/velodrome/IVoter.sol\\\";\\n\\ncontract VeloUserPositions {\\n    struct VeloPosition {\\n        address pool;\\n        address gauge;\\n        Reward[] rewards;\\n        uint256 userShare;\\n    }\\n\\n    struct Reward {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function getPositions(\\n        IVoter voter,\\n        address[] memory pools,\\n        address owner\\n    ) external view returns (VeloPosition[] memory positions) {\\n        positions = new VeloPosition[](pools.length);\\n\\n        for (uint256 index = 0; index < pools.length; index++) {\\n            address pool = pools[index];\\n            address gaugeAddress = voter.gauges(pool);\\n            if (gaugeAddress == address(0)) {\\n                continue;\\n            }\\n\\n            IGauge gauge = IGauge(gaugeAddress);\\n            uint256 rewardCount = gauge.rewardsListLength();\\n            Reward[] memory rewards = new Reward[](rewardCount);\\n            for (uint256 i = 0; i < rewardCount; i++) {\\n                address rewardToken = gauge.rewards(i);\\n                uint256 amount = gauge.earned(rewardToken, owner);\\n                rewards[i] = Reward(rewardToken, amount);\\n            }\\n\\n            uint256 userGaugeBalance = IERC20(gaugeAddress).balanceOf(owner);\\n            uint256 userShare = 0;\\n            if (userGaugeBalance > 0) {\\n                uint256 gaugePoolBalance = IERC20(pool).balanceOf(gaugeAddress);\\n                uint256 poolSupply = IERC20(pool).totalSupply();\\n                uint256 gaugePoolShare = (gaugePoolBalance * 10**18) /\\n                    poolSupply;\\n\\n                uint256 gaugeSupply = IERC20(gaugeAddress).totalSupply();\\n                userShare = (gaugePoolShare * userGaugeBalance) / gaugeSupply;\\n            }\\n\\n            positions[index] = VeloPosition(\\n                pool,\\n                gaugeAddress,\\n                rewards,\\n                userShare\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe21008f9fba2b7188b3654278071d369c660008fe189290a5a6473a5104e9cc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610bad908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c634fb3907a146100295750600080fd5b346101055760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010557600435906100658261010c565b60243567ffffffffffffffff8111610108573660238201121561010857806004013591610091836101ed565b9261009f604051948561015f565b80845260209260248486019260051b820101923684116101055750602401905b8282106100ec576100e86100dc87876100d6610214565b916105f6565b60405191829182610223565b0390f35b83809183356100fa8161010c565b8152019101906100bf565b80fd5b5080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361012a57565b600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101a057604052565b6101a861012f565b604052565b604051906040820182811067ffffffffffffffff8211176101a057604052565b604051906080820182811067ffffffffffffffff8211176101a057604052565b60209067ffffffffffffffff8111610207575b60051b0190565b61020f61012f565b610200565b604435906102218261010c565b565b602080820190808352835180925260409283810182858560051b84010196019460009081935b86851061025b57505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301855286895160809081840173ffffffffffffffffffffffffffffffffffffffff8083511686528085840151168587015287830151938887015283518092528460a0870194019189915b898284106102ff5750505050509060019383926060809101519101529a019501950193969594929190610249565b8451805183168852880151878901528e9796019593909301926001909201916102d1565b9061032d826101ed565b60409061033c8251918261015f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061036a82956101ed565b0191600091825b84811061037f575050505050565b60209083516080810181811067ffffffffffffffff8211176103bd575b85528581528286818301528660608088850152830152828501015201610371565b6103c561012f565b61039c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610428570190565b6104306103ca565b0190565b80518210156104485760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261012a575161048c8161010c565b90565b506040513d6000823e3d90fd5b9081602091031261012a575190565b906104b5826101ed565b60406104c38151928361015f565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104f183956101ed565b0191600090815b848110610506575050505050565b602090845185810181811067ffffffffffffffff821117610538575b86528481528285818301528285010152016104f8565b61054061012f565b610522565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610580570290565b6105886103ca565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610580570290565b81156105c7570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9290916106038351610323565b936000935b8051851015610b705761063861061e8683610434565b5173ffffffffffffffffffffffffffffffffffffffff1690565b604080517fb9a09fd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600480840191909152602099949391929091908a816024818b88165afa908115610b63575b600091610b46575b508381169a8b15610b325783818d8551968780927fe68863960000000000000000000000000000000000000000000000000000000082525afa948515610b25575b600095610b06575b506106f7856104ab565b9460005b8181106109975750506107f298999a9b9c8451908d8483806107607f70a08231000000000000000000000000000000000000000000000000000000009485835288830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa92831561098a575b60009361096b575b506000988a846107fb575b505050505050906107cf916107b26107966101cd565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86019073ffffffffffffffffffffffffffffffffffffffff169052565b83015260608201526107e18289610434565b526107ec8188610434565b506103fa565b93929190610608565b956108c69594926108a2829c95936107cf9a9916918b519081528381806108418d8c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381865afa90811561095e575b8791610941575b508b519084828a817f18160ddd00000000000000000000000000000000000000000000000000000000978882525afa918215610934575b8892610911575b5061089d90610545565b6105bd565b958a518094819382525afa928315610904575b926108d3575b5061089d919261058c565b949091388080808a610780565b61089d92506108f7908a3d8c116108fd575b6108ef818361015f565b81019061049c565b916108bb565b503d6108e5565b61090c61048f565b6108b5565b61089d91925061092d90863d88116108fd576108ef818361015f565b9190610893565b61093c61048f565b61088c565b6109589150843d86116108fd576108ef818361015f565b38610855565b61096661048f565b61084e565b610983919350853d87116108fd576108ef818361015f565b9138610775565b61099261048f565b61076d565b610a99908f8e868951917ff301af420000000000000000000000000000000000000000000000000000000083528183806109d8888c83019190602083019252565b0381875afa928315610af9575b600093610ac8575b508a517f211dc32d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085168a83019081529216602083015292938391829081906040015b03915afa908115610abb575b600091610a9e575b50610a80610a646101ad565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b86820152610a8e828a610434565b526107ec8189610434565b6106fb565b610ab59150873d89116108fd576108ef818361015f565b38610a58565b610ac361048f565b610a50565b610a449350610aec90833d8511610af2575b610ae4818361015f565b810190610477565b926109ed565b503d610ada565b610b0161048f565b6109e5565b610b1e919550823d84116108fd576108ef818361015f565b93386106ed565b610b2d61048f565b6106e5565b5050505050506107f29192939495506103fa565b610b5d91508b3d8d11610af257610ae4818361015f565b386106a4565b610b6b61048f565b61069c565b505050905056fea2646970667358221220f30cec66f3aa263ff6ea482bd760b6700e95d5ced9debf5362d9ee20a9e7cc4664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c634fb3907a146100295750600080fd5b346101055760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010557600435906100658261010c565b60243567ffffffffffffffff8111610108573660238201121561010857806004013591610091836101ed565b9261009f604051948561015f565b80845260209260248486019260051b820101923684116101055750602401905b8282106100ec576100e86100dc87876100d6610214565b916105f6565b60405191829182610223565b0390f35b83809183356100fa8161010c565b8152019101906100bf565b80fd5b5080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361012a57565b600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101a057604052565b6101a861012f565b604052565b604051906040820182811067ffffffffffffffff8211176101a057604052565b604051906080820182811067ffffffffffffffff8211176101a057604052565b60209067ffffffffffffffff8111610207575b60051b0190565b61020f61012f565b610200565b604435906102218261010c565b565b602080820190808352835180925260409283810182858560051b84010196019460009081935b86851061025b57505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301855286895160809081840173ffffffffffffffffffffffffffffffffffffffff8083511686528085840151168587015287830151938887015283518092528460a0870194019189915b898284106102ff5750505050509060019383926060809101519101529a019501950193969594929190610249565b8451805183168852880151878901528e9796019593909301926001909201916102d1565b9061032d826101ed565b60409061033c8251918261015f565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061036a82956101ed565b0191600091825b84811061037f575050505050565b60209083516080810181811067ffffffffffffffff8211176103bd575b85528581528286818301528660608088850152830152828501015201610371565b6103c561012f565b61039c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610428570190565b6104306103ca565b0190565b80518210156104485760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261012a575161048c8161010c565b90565b506040513d6000823e3d90fd5b9081602091031261012a575190565b906104b5826101ed565b60406104c38151928361015f565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104f183956101ed565b0191600090815b848110610506575050505050565b602090845185810181811067ffffffffffffffff821117610538575b86528481528285818301528285010152016104f8565b61054061012f565b610522565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610580570290565b6105886103ca565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610580570290565b81156105c7570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9290916106038351610323565b936000935b8051851015610b705761063861061e8683610434565b5173ffffffffffffffffffffffffffffffffffffffff1690565b604080517fb9a09fd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600480840191909152602099949391929091908a816024818b88165afa908115610b63575b600091610b46575b508381169a8b15610b325783818d8551968780927fe68863960000000000000000000000000000000000000000000000000000000082525afa948515610b25575b600095610b06575b506106f7856104ab565b9460005b8181106109975750506107f298999a9b9c8451908d8483806107607f70a08231000000000000000000000000000000000000000000000000000000009485835288830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa92831561098a575b60009361096b575b506000988a846107fb575b505050505050906107cf916107b26107966101cd565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b86019073ffffffffffffffffffffffffffffffffffffffff169052565b83015260608201526107e18289610434565b526107ec8188610434565b506103fa565b93929190610608565b956108c69594926108a2829c95936107cf9a9916918b519081528381806108418d8c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381865afa90811561095e575b8791610941575b508b519084828a817f18160ddd00000000000000000000000000000000000000000000000000000000978882525afa918215610934575b8892610911575b5061089d90610545565b6105bd565b958a518094819382525afa928315610904575b926108d3575b5061089d919261058c565b949091388080808a610780565b61089d92506108f7908a3d8c116108fd575b6108ef818361015f565b81019061049c565b916108bb565b503d6108e5565b61090c61048f565b6108b5565b61089d91925061092d90863d88116108fd576108ef818361015f565b9190610893565b61093c61048f565b61088c565b6109589150843d86116108fd576108ef818361015f565b38610855565b61096661048f565b61084e565b610983919350853d87116108fd576108ef818361015f565b9138610775565b61099261048f565b61076d565b610a99908f8e868951917ff301af420000000000000000000000000000000000000000000000000000000083528183806109d8888c83019190602083019252565b0381875afa928315610af9575b600093610ac8575b508a517f211dc32d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085168a83019081529216602083015292938391829081906040015b03915afa908115610abb575b600091610a9e575b50610a80610a646101ad565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b86820152610a8e828a610434565b526107ec8189610434565b6106fb565b610ab59150873d89116108fd576108ef818361015f565b38610a58565b610ac361048f565b610a50565b610a449350610aec90833d8511610af2575b610ae4818361015f565b810190610477565b926109ed565b503d610ada565b610b0161048f565b6109e5565b610b1e919550823d84116108fd576108ef818361015f565b93386106ed565b610b2d61048f565b6106e5565b5050505050506107f29192939495506103fa565b610b5d91508b3d8d11610af257610ae4818361015f565b386106a4565b610b6b61048f565b61069c565b505050905056fea2646970667358221220f30cec66f3aa263ff6ea482bd760b6700e95d5ced9debf5362d9ee20a9e7cc4664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}