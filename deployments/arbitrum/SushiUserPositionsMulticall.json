{
  "address": "0x8F8664b53Cd6d54298a9EEd0D07Cc0dfb953A2b4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "rewardTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "pendingSushi",
              "type": "uint256"
            }
          ],
          "internalType": "struct SushiUserPositionsMulticall.SushiPosition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf795501d0c2e2f069f4a1e43ca1029a46012e03dec61ce3971f6218d6277f7f3",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x8F8664b53Cd6d54298a9EEd0D07Cc0dfb953A2b4",
    "transactionIndex": 1,
    "gasUsed": "3994014",
    "logsBloom": "0x
    "blockHash": "0xe5bbc76da768ee1c38dd913a2ce51a415e10ec0ec0fbe57c97e23fff2ea96923",
    "transactionHash": "0xf795501d0c2e2f069f4a1e43ca1029a46012e03dec61ce3971f6218d6277f7f3",
    "logs": [],
    "blockNumber": 32839062,
    "cumulativeGasUsed": "3994014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b72c8abb1a503a7b882dabdad6fa2f4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"}],\"internalType\":\"struct SushiUserPositionsMulticall.SushiPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/SushiUserPositionsMulticall.sol\":\"SushiUserPositionsMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function updatePool(uint256 pid)\\n    external\\n    returns (IMiniChefV2.PoolInfo memory);\\n\\n  function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function harvest(uint256 pid, address to) external;\\n\\n  function withdrawAndHarvest(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function emergencyWithdraw(uint256 pid, address to) external;\\n\\n  function sushiPerSecond() external view returns (uint256);\\n\\n  function totalAllocPoint() external view returns (uint256);\\n\\n  function lpToken(uint256 index) external view returns (address);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n  \\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x9618f4d5a58c018f6f3661111aea4e22c49e31d50c394c43767b9142d968ff03\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function onSushiReward(\\n    uint256 pid,\\n    address user,\\n    address recipient,\\n    uint256 sushiAmount,\\n    uint256 newLpAmount\\n  ) external;\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256 sushiAmount\\n  ) external view returns (IERC20[] memory, uint256[] memory);\\n\\n  function rewardPerSecond() external view returns (uint256);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n}\\n\",\"keccak256\":\"0xdaed1cfcb7040df5753aef290201d3c765b971c7db6683fe658391f6327361b9\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/SushiUserPositionsMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/sushiswap/IRewarder.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract SushiUserPositionsMulticall {\\n    struct SushiPosition {\\n        address poolAddress;\\n        uint256 share;\\n        IERC20[] rewardTokens;\\n        uint256[] rewardAmounts;\\n        uint256 pendingSushi;\\n    }\\n\\n    function getPositions(\\n        IMiniChefV2 miniChef,\\n        address rewarder,\\n        address owner\\n    ) external view returns (SushiPosition[] memory) {\\n        uint256 poolCount = miniChef.poolLength();\\n\\n        SushiPosition[] memory positions = new SushiPosition[](poolCount);\\n        for (uint256 index = 0; index < poolCount; index++) {\\n            (uint256 amount, ) = miniChef.userInfo(index, owner);\\n            if (amount == 0) {\\n                continue;\\n            }\\n            address lpToken = miniChef.lpToken(index);\\n            IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\\n            uint256 totalSupply = pair.totalSupply();\\n            uint256 share = (amount * 10**18) / totalSupply;\\n\\n            uint256 pendingSushi = miniChef.pendingSushi(index, owner);\\n            (\\n                IERC20[] memory rewardTokens,\\n                uint256[] memory rewardAmounts\\n            ) = rewarder != address(0)\\n                    ? IRewarder(rewarder).pendingTokens(\\n                        index,\\n                        owner,\\n                        pendingSushi\\n                    )\\n                    : (new IERC20[](0), new uint256[](0));\\n\\n            positions[index] = (\\n                SushiPosition(\\n                    lpToken,\\n                    share,\\n                    rewardTokens,\\n                    rewardAmounts,\\n                    pendingSushi\\n                )\\n            );\\n        }\\n\\n        return positions;\\n    }\\n}\\n\",\"keccak256\":\"0xc8d4c445d08f597c2bb6e8713a2bb0877b0b77d6e3adc9bf8edebc0618807ef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610ae9908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b6000803560e01c632090f4671461002e5750600080fd5b3461052e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261052a5784359461006a86610531565b6024359161007783610531565b6044359061008482610531565b73ffffffffffffffffffffffffffffffffffffffff809816947f081e3eda000000000000000000000000000000000000000000000000000000008852602092838986818a5afa98891561051d575b82996104fe575b506100e5899699610774565b988a16801515835b888110610105578a51806101018e82610588565b0390f35b8b8d9189898e8e8a8a8a8a85519a7f93f1a40b000000000000000000000000000000000000000000000000000000008c52868c808c878d83019161016b9290929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b0381895afa9b8c156104f1575b859c6104c1575b508b156104ac57899a9b886101c59b8b8a519d8e9283927f78ed5d1f00000000000000000000000000000000000000000000000000000000845283019190602083019252565b03818a5afa9a8b1561049f575b869b61044d575b509387938c8b98946103869f9b846103809f9c849f97839b8f859061029f9f9b6102469551809581937f18160ddd000000000000000000000000000000000000000000000000000000008352165afa918215610440575b8a9261041d575b50610241906108b9565b610900565b97848d8b519d8e94859384937f195426ec000000000000000000000000000000000000000000000000000000008552840190929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b03915afa988915610410575b85996103df575b5097989697899790156103c15790849392916103218851998a95869485947fd63b3c49000000000000000000000000000000000000000000000000000000008652850173ffffffffffffffffffffffffffffffffffffffff604092959493606083019683521660208201520152565b03915afa9384156103b4575b81809561038b575b505092935b61036161034561072d565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b8601528401528c830152608082015261037a8383610a70565b52610a70565b50610851565b6100ed565b9091506103ab9294503d8091833e6103a381836106c3565b8101906109d0565b92908f80610335565b6103bc610720565b61032d565b505050505091506103d0610939565b916103d9610939565b9361033a565b8861040192999a503d8b11610409575b6103f981836106c3565b810190610711565b9796386102b2565b503d6103ef565b610418610720565b6102ab565b61024191925061043990863d8811610409576103f981836106c3565b9190610237565b610448610720565b610230565b899b50938c8b989487939f9b80988c849f9b979d99833d8511610498575b61047581836106c3565b8101610480916108a1565b9f505050509498505093979195999a989c90946101d9565b503d61046b565b6104a7610720565b6101d2565b50505050505050505090506103869150610851565b6104e2919c50873d89116104ea575b6104da81836106c3565b81019061088b565b509a3861017f565b503d6104d0565b6104f9610720565b610178565b610516919950843d8611610409576103f981836106c3565b97386100d9565b610525610720565b6100d2565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361054f57565b600080fd5b90815180825260208080930193019160005b828110610574575050505090565b835185529381019392810192600101610566565b602080820190808352835180925260409283810182858560051b84010196019460009081935b8685106105c057505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08282030185528689519160a080820173ffffffffffffffffffffffffffffffffffffffff808651168452848601518585015287860151928885015282518092528460c0850193019189915b818310610677575050505092829161065b6001956060808501519084830390850152610554565b916080809101519101529a0195019501939695949291906105ae565b8351811685528d96948501949390930192600190920191610634565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761070457604052565b61070c610693565b604052565b9081602091031261054f575190565b506040513d6000823e3d90fd5b6040519060a0820182811067ffffffffffffffff82111761070457604052565b60209067ffffffffffffffff8111610767575b60051b0190565b61076f610693565b610760565b9061077e8261074d565b60409061078d825191826106c3565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107bb829561074d565b0191600091825b8481106107d0575050505050565b602090835160a0810181811067ffffffffffffffff821117610814575b855285815282868183015260608087840152808301528660808301528285010152016107c2565b61081c610693565b6107ed565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461087f570190565b610887610821565b0190565b919082604091031261054f576020825192015190565b9081602091031261054f57516108b681610531565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166108f4570290565b6108fc610821565b0290565b811561090a570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b604051906000602083019280841067ffffffffffffffff851117610965575b8360405281815292369037565b61096d610693565b610958565b81601f8201121561054f578051916109898361074d565b9261099760405194856106c3565b808452602092838086019260051b82010192831161054f578301905b8282106109c1575050505090565b815181529083019083016109b3565b91909160408184031261054f5780519267ffffffffffffffff9384811161054f5782019381601f8601121561054f578451610a0a8161074d565b90610a1860405192836106c3565b808252602096878084019260051b8201019185831161054f5788809201905b838210610a5757505050509483015190811161054f576108b69201610972565b8280918351610a6581610531565b815201910190610a37565b8051821015610a845760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122048fe36e6626ed807e898c5e0e492561e62258d40ea412e7514d38a21fed82d0b64736f6c634300080d0033",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b6000803560e01c632090f4671461002e5750600080fd5b3461052e576060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261052a5784359461006a86610531565b6024359161007783610531565b6044359061008482610531565b73ffffffffffffffffffffffffffffffffffffffff809816947f081e3eda000000000000000000000000000000000000000000000000000000008852602092838986818a5afa98891561051d575b82996104fe575b506100e5899699610774565b988a16801515835b888110610105578a51806101018e82610588565b0390f35b8b8d9189898e8e8a8a8a8a85519a7f93f1a40b000000000000000000000000000000000000000000000000000000008c52868c808c878d83019161016b9290929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b0381895afa9b8c156104f1575b859c6104c1575b508b156104ac57899a9b886101c59b8b8a519d8e9283927f78ed5d1f00000000000000000000000000000000000000000000000000000000845283019190602083019252565b03818a5afa9a8b1561049f575b869b61044d575b509387938c8b98946103869f9b846103809f9c849f97839b8f859061029f9f9b6102469551809581937f18160ddd000000000000000000000000000000000000000000000000000000008352165afa918215610440575b8a9261041d575b50610241906108b9565b610900565b97848d8b519d8e94859384937f195426ec000000000000000000000000000000000000000000000000000000008552840190929173ffffffffffffffffffffffffffffffffffffffff6020916040840195845216910152565b03915afa988915610410575b85996103df575b5097989697899790156103c15790849392916103218851998a95869485947fd63b3c49000000000000000000000000000000000000000000000000000000008652850173ffffffffffffffffffffffffffffffffffffffff604092959493606083019683521660208201520152565b03915afa9384156103b4575b81809561038b575b505092935b61036161034561072d565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b8601528401528c830152608082015261037a8383610a70565b52610a70565b50610851565b6100ed565b9091506103ab9294503d8091833e6103a381836106c3565b8101906109d0565b92908f80610335565b6103bc610720565b61032d565b505050505091506103d0610939565b916103d9610939565b9361033a565b8861040192999a503d8b11610409575b6103f981836106c3565b810190610711565b9796386102b2565b503d6103ef565b610418610720565b6102ab565b61024191925061043990863d8811610409576103f981836106c3565b9190610237565b610448610720565b610230565b899b50938c8b989487939f9b80988c849f9b979d99833d8511610498575b61047581836106c3565b8101610480916108a1565b9f505050509498505093979195999a989c90946101d9565b503d61046b565b6104a7610720565b6101d2565b50505050505050505090506103869150610851565b6104e2919c50873d89116104ea575b6104da81836106c3565b81019061088b565b509a3861017f565b503d6104d0565b6104f9610720565b610178565b610516919950843d8611610409576103f981836106c3565b97386100d9565b610525610720565b6100d2565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361054f57565b600080fd5b90815180825260208080930193019160005b828110610574575050505090565b835185529381019392810192600101610566565b602080820190808352835180925260409283810182858560051b84010196019460009081935b8685106105c057505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08282030185528689519160a080820173ffffffffffffffffffffffffffffffffffffffff808651168452848601518585015287860151928885015282518092528460c0850193019189915b818310610677575050505092829161065b6001956060808501519084830390850152610554565b916080809101519101529a0195019501939695949291906105ae565b8351811685528d96948501949390930192600190920191610634565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761070457604052565b61070c610693565b604052565b9081602091031261054f575190565b506040513d6000823e3d90fd5b6040519060a0820182811067ffffffffffffffff82111761070457604052565b60209067ffffffffffffffff8111610767575b60051b0190565b61076f610693565b610760565b9061077e8261074d565b60409061078d825191826106c3565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107bb829561074d565b0191600091825b8481106107d0575050505050565b602090835160a0810181811067ffffffffffffffff821117610814575b855285815282868183015260608087840152808301528660808301528285010152016107c2565b61081c610693565b6107ed565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461087f570190565b610887610821565b0190565b919082604091031261054f576020825192015190565b9081602091031261054f57516108b681610531565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166108f4570290565b6108fc610821565b0290565b811561090a570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b604051906000602083019280841067ffffffffffffffff851117610965575b8360405281815292369037565b61096d610693565b610958565b81601f8201121561054f578051916109898361074d565b9261099760405194856106c3565b808452602092838086019260051b82010192831161054f578301905b8282106109c1575050505090565b815181529083019083016109b3565b91909160408184031261054f5780519267ffffffffffffffff9384811161054f5782019381601f8601121561054f578451610a0a8161074d565b90610a1860405192836106c3565b808252602096878084019260051b8201019185831161054f5788809201905b838210610a5757505050509483015190811161054f576108b69201610972565b8280918351610a6581610531565b815201910190610a37565b8051821015610a845760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122048fe36e6626ed807e898c5e0e492561e62258d40ea412e7514d38a21fed82d0b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}