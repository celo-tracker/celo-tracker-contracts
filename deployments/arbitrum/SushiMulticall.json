{
  "address": "0xC38e0298c9E6E1090E02e7C86F9ea9D298208B45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "miniChefPoolShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "miniChefAllocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewarderAllocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct SushiMulticall.SushiPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6672d6f169cbe0847c9326fa095dd7888d70e98c956779fe0f50fbac0d2a9ad8",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xC38e0298c9E6E1090E02e7C86F9ea9D298208B45",
    "transactionIndex": 1,
    "gasUsed": "3704263",
    "logsBloom": "0x
    "blockHash": "0xed2ec31d8a503a473574b54bc8717bf1499e237c332962d04b7eb518282b1984",
    "transactionHash": "0x6672d6f169cbe0847c9326fa095dd7888d70e98c956779fe0f50fbac0d2a9ad8",
    "logs": [],
    "blockNumber": 32826107,
    "cumulativeGasUsed": "3704263",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "03d7455da17b8d2b4328242bd07e9302",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miniChefPoolShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miniChefAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarderAllocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct SushiMulticall.SushiPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/SushiMulticall.sol\":\"SushiMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function updatePool(uint256 pid)\\n    external\\n    returns (IMiniChefV2.PoolInfo memory);\\n\\n  function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function harvest(uint256 pid, address to) external;\\n\\n  function withdrawAndHarvest(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function emergencyWithdraw(uint256 pid, address to) external;\\n\\n  function sushiPerSecond() external view returns (uint256);\\n\\n  function totalAllocPoint() external view returns (uint256);\\n\\n  function lpToken(uint256 index) external view returns (address);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n  \\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x9618f4d5a58c018f6f3661111aea4e22c49e31d50c394c43767b9142d968ff03\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function onSushiReward(\\n    uint256 pid,\\n    address user,\\n    address recipient,\\n    uint256 sushiAmount,\\n    uint256 newLpAmount\\n  ) external;\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256 sushiAmount\\n  ) external view returns (IERC20[] memory, uint256[] memory);\\n\\n  function rewardPerSecond() external view returns (uint256);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n}\\n\",\"keccak256\":\"0xdaed1cfcb7040df5753aef290201d3c765b971c7db6683fe658391f6327361b9\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/SushiMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/sushiswap/IRewarder.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract SushiMulticall {\\n    struct SushiPool {\\n        address poolAddress;\\n        uint256 amount0;\\n        address token0;\\n        uint256 amount1;\\n        address token1;\\n        uint256 miniChefPoolShare;\\n        uint256 miniChefAllocPoint;\\n        uint256 rewarderAllocPoint;\\n    }\\n\\n    function getPools(IMiniChefV2 miniChef, address rewarder)\\n        external\\n        view\\n        returns (SushiPool[] memory pools)\\n    {\\n        uint256 poolCount = miniChef.poolLength();\\n\\n        pools = new SushiPool[](poolCount);\\n\\n        for (uint16 index = 0; index < poolCount; index++) {\\n            address lpToken = miniChef.lpToken(index);\\n\\n            (\\n                address token0,\\n                address token1,\\n                uint256 reserve0,\\n                uint256 reserve1\\n            ) = getPoolInfo(lpToken);\\n\\n            uint256 miniChefPoolShare = 0;\\n            uint256 own = IERC20(lpToken).balanceOf(address(miniChef));\\n            if (own != 0) {\\n                uint256 total = IERC20(lpToken).totalSupply();\\n                miniChefPoolShare = (own * 10**18) / total;\\n            }\\n\\n            uint256 miniChefAllocPoint = miniChef.poolInfo(index).allocPoint;\\n            uint256 rewarderAllocPoint = rewarder == address(0)\\n                ? 0\\n                : IRewarder(rewarder).poolInfo(index).allocPoint;\\n\\n            pools[index] = SushiPool(\\n                lpToken,\\n                reserve0,\\n                token0,\\n                reserve1,\\n                token1,\\n                miniChefPoolShare,\\n                miniChefAllocPoint,\\n                rewarderAllocPoint\\n            );\\n        }\\n\\n        return pools;\\n    }\\n\\n    function getPoolInfo(address lpToken)\\n        internal\\n        view\\n        returns (\\n            address token0,\\n            address token1,\\n            uint256 reserve0,\\n            uint256 reserve1\\n        )\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\\n\\n        try pair.getReserves() returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32\\n        ) {\\n            return (pair.token0(), pair.token1(), _reserve0, _reserve1);\\n        } catch {\\n            return (address(0), address(0), 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa131dce935f049b5049cd41093aac3e13fce597dbd4bf16c4e73f337b6f8e8d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610b31908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b60009260e08435811c635b1dc86f14610030575050600080fd5b346104fc57837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fc57813561006981610500565b6024359561007687610500565b7f081e3eda00000000000000000000000000000000000000000000000000000000855260209173ffffffffffffffffffffffffffffffffffffffff90811683878781845afa9687156104ef575b83976104d0575b506100d7879993996106b5565b97828a9416928315945b61ffff81168a8110156104bf57848c828f8a8a8f898f948c8051997f78ed5d1f000000000000000000000000000000000000000000000000000000008b528c888c8061013a848a830191909161ffff6020820193169052565b0381855afa9b8c156104b2575b849c610471575b509288928c9795926101bf97956101648a610966565b9a9298919b9097879d1682868c895194859283927f70a08231000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa918215610464575b8892610445575b50816103a7575b5050508351977f1526fe2700000000000000000000000000000000000000000000000000000000808a5261025c61024f878c606081819f9a818061022c8d869f8d0191909161ffff6020820193169052565b03915afa90811561039a575b8b91610383575b50015167ffffffffffffffff1690565b67ffffffffffffffff1690565b9d1561030257505050505050975b61027261067f565b73ffffffffffffffffffffffffffffffffffffffff909c168c528b015273ffffffffffffffffffffffffffffffffffffffff168d8a015288015273ffffffffffffffffffffffffffffffffffffffff16608087015260a086015260c085015267ffffffffffffffff168c8401526102e8916108d2565b526102f3908c6108d2565b506102fd9061078b565b6100e1565b855190815261ffff90931690830190815261034395939183918290819060200103915afa918215610376575b916103495750015167ffffffffffffffff1690565b9761026a565b6103699150863d881161036f575b6103618183610622565b810190610858565b3861023f565b503d610357565b61037e610672565b61032e565b6103699150893d8b1161036f576103618183610622565b6103a2610672565b610238565b6103fa939d50828b918851928380927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315610438575b8893610403575b50506103f5906107c3565b61080a565b998c38806101da565b6103f5929350908161042992903d10610431575b6104218183610622565b810190610663565b91908f6103ea565b503d610417565b610440610672565b6103e3565b61045d919250833d8511610431576104218183610622565b90386101d3565b61046c610672565b6101cc565b6101bf9694919795929c509261049d8a94853d87116104ab575b6104958183610622565b8101906107ab565b9c929597919496509261014e565b503d61048b565b6104ba610672565b610147565b8351806104cc8e82610523565b0390f35b6104e8919750843d8611610431576104218183610622565b95386100ca565b6104f7610672565b6100c3565b8480fd5b73ffffffffffffffffffffffffffffffffffffffff81160361051e57565b600080fd5b60208082019080835283518092528060408094019401926000905b83821061054d57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0808201519088015260c0808201519088015260e09081015190870152610100909501949382019360019091019061053e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761061557604052565b61061d6105c8565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761061557604052565b9081602091031261051e575190565b506040513d6000823e3d90fd5b6040519061068c826105f8565b565b60209067ffffffffffffffff81116106a8575b60051b0190565b6106b06105c8565b6106a1565b906106bf8261068e565b6040906106ce82519182610622565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106fc829561068e565b019160005b83811061070e5750505050565b602090825161071c816105f8565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201610701565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff80911690811461079f570190565b6107a761075b565b0190565b9081602091031261051e57516107c081610500565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166107fe570290565b61080661075b565b0290565b8115610814570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b519067ffffffffffffffff8216820361051e57565b9081606091031261051e57604051906060820182811067ffffffffffffffff8211176108c5575b60405280516fffffffffffffffffffffffffffffffff8116810361051e576108bd9160409184526108b260208201610843565b602085015201610843565b604082015290565b6108cd6105c8565b61087f565b80518210156108e65760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b51906dffffffffffffffffffffffffffff8216820361051e57565b9081606091031261051e5761094481610915565b91604061095360208401610915565b92015163ffffffff8116810361051e5790565b73ffffffffffffffffffffffffffffffffffffffff166040517f0902f1ac000000000000000000000000000000000000000000000000000000008152606081600481855afa806000928392610ac7575b506109cc57505050600090600090600090600090565b909192604051937f0dfe1681000000000000000000000000000000000000000000000000000000008552602094858082600481865afa918215610aba575b600092610a9a575b5060049192604051928380927fd21220a70000000000000000000000000000000000000000000000000000000082525afa958615610a8d575b600096610a6e575b505093926dffffffffffffffffffffffffffff809116921690565b610a85929650803d106104ab576104958183610622565b933880610a53565b610a95610672565b610a4b565b60049250610ab490823d84116104ab576104958183610622565b91610a12565b610ac2610672565b610a0a565b909250610aeb915060603d8111610af4575b610ae38183610622565b810190610930565b509091386109b6565b503d610ad956fea264697066735822122090782339bc4edf0f3948d71b73e4684fc63e7d1a08efff8adcd47cae2015c3a964736f6c634300080d0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b60009260e08435811c635b1dc86f14610030575050600080fd5b346104fc57837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fc57813561006981610500565b6024359561007687610500565b7f081e3eda00000000000000000000000000000000000000000000000000000000855260209173ffffffffffffffffffffffffffffffffffffffff90811683878781845afa9687156104ef575b83976104d0575b506100d7879993996106b5565b97828a9416928315945b61ffff81168a8110156104bf57848c828f8a8a8f898f948c8051997f78ed5d1f000000000000000000000000000000000000000000000000000000008b528c888c8061013a848a830191909161ffff6020820193169052565b0381855afa9b8c156104b2575b849c610471575b509288928c9795926101bf97956101648a610966565b9a9298919b9097879d1682868c895194859283927f70a08231000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa918215610464575b8892610445575b50816103a7575b5050508351977f1526fe2700000000000000000000000000000000000000000000000000000000808a5261025c61024f878c606081819f9a818061022c8d869f8d0191909161ffff6020820193169052565b03915afa90811561039a575b8b91610383575b50015167ffffffffffffffff1690565b67ffffffffffffffff1690565b9d1561030257505050505050975b61027261067f565b73ffffffffffffffffffffffffffffffffffffffff909c168c528b015273ffffffffffffffffffffffffffffffffffffffff168d8a015288015273ffffffffffffffffffffffffffffffffffffffff16608087015260a086015260c085015267ffffffffffffffff168c8401526102e8916108d2565b526102f3908c6108d2565b506102fd9061078b565b6100e1565b855190815261ffff90931690830190815261034395939183918290819060200103915afa918215610376575b916103495750015167ffffffffffffffff1690565b9761026a565b6103699150863d881161036f575b6103618183610622565b810190610858565b3861023f565b503d610357565b61037e610672565b61032e565b6103699150893d8b1161036f576103618183610622565b6103a2610672565b610238565b6103fa939d50828b918851928380927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315610438575b8893610403575b50506103f5906107c3565b61080a565b998c38806101da565b6103f5929350908161042992903d10610431575b6104218183610622565b810190610663565b91908f6103ea565b503d610417565b610440610672565b6103e3565b61045d919250833d8511610431576104218183610622565b90386101d3565b61046c610672565b6101cc565b6101bf9694919795929c509261049d8a94853d87116104ab575b6104958183610622565b8101906107ab565b9c929597919496509261014e565b503d61048b565b6104ba610672565b610147565b8351806104cc8e82610523565b0390f35b6104e8919750843d8611610431576104218183610622565b95386100ca565b6104f7610672565b6100c3565b8480fd5b73ffffffffffffffffffffffffffffffffffffffff81160361051e57565b600080fd5b60208082019080835283518092528060408094019401926000905b83821061054d57505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0808201519088015260c0808201519088015260e09081015190870152610100909501949382019360019091019061053e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761061557604052565b61061d6105c8565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761061557604052565b9081602091031261051e575190565b506040513d6000823e3d90fd5b6040519061068c826105f8565b565b60209067ffffffffffffffff81116106a8575b60051b0190565b6106b06105c8565b6106a1565b906106bf8261068e565b6040906106ce82519182610622565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106fc829561068e565b019160005b83811061070e5750505050565b602090825161071c816105f8565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201610701565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff80911690811461079f570190565b6107a761075b565b0190565b9081602091031261051e57516107c081610500565b90565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166107fe570290565b61080661075b565b0290565b8115610814570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b519067ffffffffffffffff8216820361051e57565b9081606091031261051e57604051906060820182811067ffffffffffffffff8211176108c5575b60405280516fffffffffffffffffffffffffffffffff8116810361051e576108bd9160409184526108b260208201610843565b602085015201610843565b604082015290565b6108cd6105c8565b61087f565b80518210156108e65760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b51906dffffffffffffffffffffffffffff8216820361051e57565b9081606091031261051e5761094481610915565b91604061095360208401610915565b92015163ffffffff8116810361051e5790565b73ffffffffffffffffffffffffffffffffffffffff166040517f0902f1ac000000000000000000000000000000000000000000000000000000008152606081600481855afa806000928392610ac7575b506109cc57505050600090600090600090600090565b909192604051937f0dfe1681000000000000000000000000000000000000000000000000000000008552602094858082600481865afa918215610aba575b600092610a9a575b5060049192604051928380927fd21220a70000000000000000000000000000000000000000000000000000000082525afa958615610a8d575b600096610a6e575b505093926dffffffffffffffffffffffffffff809116921690565b610a85929650803d106104ab576104958183610622565b933880610a53565b610a95610672565b610a4b565b60049250610ab490823d84116104ab576104958183610622565b91610a12565b610ac2610672565b610a0a565b909250610aeb915060603d8111610af4575b610ae38183610622565b810190610930565b509091386109b6565b503d610ad956fea264697066735822122090782339bc4edf0f3948d71b73e4684fc63e7d1a08efff8adcd47cae2015c3a964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}