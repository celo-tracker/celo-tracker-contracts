{
  "address": "0xF647cd04667320E653Ce8dF13010bD111F55fDb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_energy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "FeatureAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        }
      ],
      "name": "FeatureStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "FeatureVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_votes",
          "type": "uint256"
        }
      ],
      "name": "addFeature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "featureFinished",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "features",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "finished",
              "type": "bool"
            }
          ],
          "internalType": "struct FeatureVoting.Feature[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeaturesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votes",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8da70e76f7de241f0bce910ffcab5cb918c2930246694a9e80bcecaecac8b64d",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0xF647cd04667320E653Ce8dF13010bD111F55fDb8",
    "transactionIndex": 0,
    "gasUsed": "1131206",
    "logsBloom": "0x
    "blockHash": "0x5c43da0ee43a7f4eb08c2b3cc1962698f1cdd5a9cdc521e91311596fa4aa058c",
    "transactionHash": "0x8da70e76f7de241f0bce910ffcab5cb918c2930246694a9e80bcecaecac8b64d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12962324,
        "transactionHash": "0x8da70e76f7de241f0bce910ffcab5cb918c2930246694a9e80bcecaecac8b64d",
        "address": "0xF647cd04667320E653Ce8dF13010bD111F55fDb8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5c43da0ee43a7f4eb08c2b3cc1962698f1cdd5a9cdc521e91311596fa4aa058c"
      }
    ],
    "blockNumber": 12962324,
    "cumulativeGasUsed": "1131206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84c4e1f2965235f60073e3029788888252c4557e"
  ],
  "numDeployments": 2,
  "solcInputHash": "e5f4a56fc0d021f11bf3d7ca12a2d904",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_energy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"FeatureAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"FeatureStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"FeatureVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"addFeature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"featureFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"features\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeatures\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"internalType\":\"struct FeatureVoting.Feature[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeaturesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeatureVoting.sol\":\"FeatureVoting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/FeatureVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FeatureVoting is Ownable {\\n  using SafeMath for uint256;\\n\\n  struct Feature {\\n    address creator;\\n    uint256 votes;\\n    string title;\\n    bool active;\\n    bool finished;\\n  }\\n\\n  IERC20 energy;\\n\\n  Feature[] public features;\\n\\n  event FeatureAdded(\\n    uint256 indexed index,\\n    string title,\\n    address indexed creator\\n  );\\n  event FeatureVoted(\\n    address indexed voter,\\n    uint256 indexed index,\\n    uint256 votes\\n  );\\n  // Emitted when a feature request changes it's active status.\\n  event FeatureStatusUpdated(uint256 indexed index, bool active, bool finished);\\n\\n  constructor(address _energy) {\\n    energy = IERC20(_energy);\\n  }\\n\\n  function totalFeaturesCount() external view returns (uint256 count) {\\n    return features.length;\\n  }\\n\\n  function getFeatures() external view returns (Feature[] memory) {\\n    return features;\\n  }\\n\\n  function setActive(uint256 _index, bool _active) external onlyOwner {\\n    features[_index].active = _active;\\n    emit FeatureStatusUpdated(_index, _active, features[_index].finished);\\n  }\\n\\n  function addFeature(string memory _title, uint256 _votes) external returns (uint256 index) {\\n    Feature memory feature;\\n    feature.creator = msg.sender;\\n    feature.active = true;\\n    feature.title = _title;\\n    features.push(feature);\\n\\n    index = features.length - 1;\\n\\n    emit FeatureAdded(index, _title, msg.sender);\\n\\n    vote(index, _votes);\\n  }\\n\\n  function vote(uint256 _index, uint256 _votes) public {\\n    require(features[_index].active, \\\"Feature is not active\\\");\\n    require(energy.transferFrom(msg.sender, address(this), _votes));\\n    features[_index].votes = features[_index].votes.add(_votes);\\n\\n    emit FeatureVoted(msg.sender, _index, _votes);\\n  }\\n\\n  function featureFinished(uint256 _index) external onlyOwner {\\n    require(!features[_index].finished, \\\"Feature request already finished\\\");\\n    features[_index].finished = true;\\n    features[_index].active = false;\\n    emit FeatureStatusUpdated(_index, false, true);\\n  }\\n}\\n\",\"keccak256\":\"0x8e4bf2623eb084bc0969609f4143175e574dce0fddea1e0f0bdcb3d91325808b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461006757601f61139238819003918201601f19168301916001600160401b0383118484101761006c5780849260209460405283398101031261006757516001600160a01b03811681036100675761005890610082565b6040516112bc90816100d68239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b60005460018060a01b031991338383161760005560018060a01b0391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a31690600154161760015556fe60806040526004361015610013575b600080fd5b6000803560e01c90816329e38e5b146100de57508063368a7498146100d5578063715018a6146100cc5780637961820e146100c35780637dfcc71a146100ba5780638da5cb5b146100b15780638ede6f9f146100a8578063b384abef1461009f578063e60a955d146100965763f2fde38b1461008e57600080fd5b61000e610ae2565b5061000e6109f7565b5061000e6109ad565b5061000e6108f9565b5061000e61071a565b5061000e610601565b5061000e610489565b5061000e6103e4565b5061000e610264565b346101c75760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75760043567ffffffffffffffff8082116101c357366023830112156101c35781600401359081116101b6575b6040519161016e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160184610223565b81835236602483830101116101b2579260208261019e949360246101ae9701838601378301015260243590610d7c565b6040519081529081906020820190565b0390f35b8380fd5b6101be6101ca565b610138565b8280fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761021657604052565b61021e6101ca565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761021657604052565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356102ba73ffffffffffffffffffffffffffffffffffffffff600054163314610bd6565b60ff60036102c78361079d565b50015460081c166103865761030e60036102e08361079d565b50016101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff825416179055565b610346600361031c8361079d565b50017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b7f03ecf44541c1af4c2c08b8d9043cc8d6b6b9345fc57cc66487bbca984367c2fb604051806103818190600160206040840193600081520152565b0390a2005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f46656174757265207265717565737420616c72656164792066696e69736865646044820152fd5b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161045b338414610bd6565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020600254604051908152f35b91908251928382526000905b84821061051d5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610510575b0116010190565b6000858286010152610509565b906020908180828501015190828601015201906104d2565b602080820190808352835180925260409283810182858560051b8401019601946000925b85841061056a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187528a519073ffffffffffffffffffffffffffffffffffffffff825116815282820151838201526105d88783015160a0808a8501528301906104c6565b916060808201511515908301526080809101511515910152990194019401929594939190610559565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600280549067ffffffffffffffff821161070d575b604091825191602061065d818460051b0185610223565b8284526000828152917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908286015b8585106106a0578751806101ae8982610535565b6004846001928a516106b1816101fa565b73ffffffffffffffffffffffffffffffffffffffff875416815284870154838201526106de868801610838565b8c820152600387015460ff908181161515606084015260081c161515608082015281520193019401939161068c565b6107156101ca565b610646565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002548110156107d8575b600260005260021b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6107e061076d565b6107a8565b90600182811c9216801561082e575b60208310146107ff57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916107f4565b906040519182600082549261084c846107e5565b9081845260019485811690816000146108bb5750600114610878575b505061087692500383610223565b565b9093915060005260209081600020936000915b8183106108a357505061087693508201013880610868565b8554888401850152948501948794509183019161088b565b9450505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00915016602083015261087682604081013880610868565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560025481101561000e5761093f9061079d565b5073ffffffffffffffffffffffffffffffffffffffff81541660018201549160ff610993600361097160028501610838565b930154926040519586958652602086015260a0604086015260a08501906104c6565b918181161515606085015260081c16151560808301520390f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576109eb60243560043561112d565b005b8015150361000e57565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004357f03ecf44541c1af4c2c08b8d9043cc8d6b6b9345fc57cc66487bbca984367c2fb6040602435610a59816109ed565b610a7c73ffffffffffffffffffffffffffffffffffffffff600054163314610bd6565b610abd816003610a8b8761079d565b50019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b60ff6003610aca8661079d565b50015460081c168251911515825215156020820152a2005b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043573ffffffffffffffffffffffffffffffffffffffff8082169081830361000e57610b4490600054163314610bd6565b15610b52576109eb90610c3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610bdd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90601f8111610cb857505050565b600091825260208220906020601f850160051c83019410610cf4575b601f0160051c01915b828110610ce957505050565b818155600101610cdd565b9092508290610cd4565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110610d5c570190565b610d64610cfe565b0190565b906020610d799281815201906104c6565b90565b919060405190610d8b826101fa565b60209182810160009182825260408101606082019360808301938185523384526001908187528a8452610dd760025468010000000000000000811015611092575b83810160025561079d565b959095611066575185547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617855551818501556002840192519182519267ffffffffffffffff8411611059575b610e5284610e4c87546107e5565b87610caa565b8991601f8511600114610f96576108769a509484610ebb9481610eec97600396610ef29b96610f259e9d9b93610f6b575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b92861b1c19161790555b019451151590565b849060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b51151590565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690151560081b61ff0016179055565b610f30600254610d2e565b93847ffa5fbe72c0c4a288169c9480706f982ddc961553cee567586552fc49788644d860405180610f62339582610d68565b0390a38361112d565b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff38610e83565b929495969798997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690610fd088600052602060002090565b94905b82821061104257505095610f25989585610ebb956003956108769e9d9b95610eec99610ef29c1061100c575b505050811b019055610eb3565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f884891b161c19169055388080610fff565b808886978294978701518155019601940190610fd3565b6110616101ca565b610e3e565b6024847f4e487b7100000000000000000000000000000000000000000000000000000000815280600452fd5b61109a6101ca565b610dcc565b156110a657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f46656174757265206973206e6f742061637469766500000000000000000000006044820152fd5b9081602091031261000e5751610d79816109ed565b506040513d6000823e3d90fd5b1561000e57565b9061114d611148600361113f8561079d565b50015460ff1690565b61109f565b6111ea61118b61117260015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290602090829060649082906000905af190811561126d575b60009161123f575b50611126565b6112018160016111f98561079d565b50015461127a565b600161120c8461079d565b50015560405190815233907fc2617f46bad219e52991b2a4de30936ed663132ea903afef2ddf4428ff72733090602090a3565b611260915060203d8111611266575b6112588183610223565b810190611104565b386111e4565b503d61124e565b611275611119565b6111dc565b81198111610d5c57019056fea26469706673582212203be3c5792d9312ebe4b293d35a76b171dbbb4be73eb82d51aaec53db62d6420264736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816329e38e5b146100de57508063368a7498146100d5578063715018a6146100cc5780637961820e146100c35780637dfcc71a146100ba5780638da5cb5b146100b15780638ede6f9f146100a8578063b384abef1461009f578063e60a955d146100965763f2fde38b1461008e57600080fd5b61000e610ae2565b5061000e6109f7565b5061000e6109ad565b5061000e6108f9565b5061000e61071a565b5061000e610601565b5061000e610489565b5061000e6103e4565b5061000e610264565b346101c75760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75760043567ffffffffffffffff8082116101c357366023830112156101c35781600401359081116101b6575b6040519161016e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160184610223565b81835236602483830101116101b2579260208261019e949360246101ae9701838601378301015260243590610d7c565b6040519081529081906020820190565b0390f35b8380fd5b6101be6101ca565b610138565b8280fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761021657604052565b61021e6101ca565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761021657604052565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356102ba73ffffffffffffffffffffffffffffffffffffffff600054163314610bd6565b60ff60036102c78361079d565b50015460081c166103865761030e60036102e08361079d565b50016101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff825416179055565b610346600361031c8361079d565b50017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b7f03ecf44541c1af4c2c08b8d9043cc8d6b6b9345fc57cc66487bbca984367c2fb604051806103818190600160206040840193600081520152565b0390a2005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f46656174757265207265717565737420616c72656164792066696e69736865646044820152fd5b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161045b338414610bd6565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020600254604051908152f35b91908251928382526000905b84821061051d5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610510575b0116010190565b6000858286010152610509565b906020908180828501015190828601015201906104d2565b602080820190808352835180925260409283810182858560051b8401019601946000925b85841061056a575050505050505090565b909192939495968580827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085600195030187528a519073ffffffffffffffffffffffffffffffffffffffff825116815282820151838201526105d88783015160a0808a8501528301906104c6565b916060808201511515908301526080809101511515910152990194019401929594939190610559565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600280549067ffffffffffffffff821161070d575b604091825191602061065d818460051b0185610223565b8284526000828152917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908286015b8585106106a0578751806101ae8982610535565b6004846001928a516106b1816101fa565b73ffffffffffffffffffffffffffffffffffffffff875416815284870154838201526106de868801610838565b8c820152600387015460ff908181161515606084015260081c161515608082015281520193019401939161068c565b6107156101ca565b610646565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002548110156107d8575b600260005260021b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6107e061076d565b6107a8565b90600182811c9216801561082e575b60208310146107ff57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916107f4565b906040519182600082549261084c846107e5565b9081845260019485811690816000146108bb5750600114610878575b505061087692500383610223565b565b9093915060005260209081600020936000915b8183106108a357505061087693508201013880610868565b8554888401850152948501948794509183019161088b565b9450505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00915016602083015261087682604081013880610868565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560025481101561000e5761093f9061079d565b5073ffffffffffffffffffffffffffffffffffffffff81541660018201549160ff610993600361097160028501610838565b930154926040519586958652602086015260a0604086015260a08501906104c6565b918181161515606085015260081c16151560808301520390f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576109eb60243560043561112d565b005b8015150361000e57565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004357f03ecf44541c1af4c2c08b8d9043cc8d6b6b9345fc57cc66487bbca984367c2fb6040602435610a59816109ed565b610a7c73ffffffffffffffffffffffffffffffffffffffff600054163314610bd6565b610abd816003610a8b8761079d565b50019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b60ff6003610aca8661079d565b50015460081c168251911515825215156020820152a2005b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043573ffffffffffffffffffffffffffffffffffffffff8082169081830361000e57610b4490600054163314610bd6565b15610b52576109eb90610c3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610bdd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90601f8111610cb857505050565b600091825260208220906020601f850160051c83019410610cf4575b601f0160051c01915b828110610ce957505050565b818155600101610cdd565b9092508290610cd4565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110610d5c570190565b610d64610cfe565b0190565b906020610d799281815201906104c6565b90565b919060405190610d8b826101fa565b60209182810160009182825260408101606082019360808301938185523384526001908187528a8452610dd760025468010000000000000000811015611092575b83810160025561079d565b959095611066575185547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617855551818501556002840192519182519267ffffffffffffffff8411611059575b610e5284610e4c87546107e5565b87610caa565b8991601f8511600114610f96576108769a509484610ebb9481610eec97600396610ef29b96610f259e9d9b93610f6b575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b92861b1c19161790555b019451151590565b849060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b51151590565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690151560081b61ff0016179055565b610f30600254610d2e565b93847ffa5fbe72c0c4a288169c9480706f982ddc961553cee567586552fc49788644d860405180610f62339582610d68565b0390a38361112d565b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff38610e83565b929495969798997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0851690610fd088600052602060002090565b94905b82821061104257505095610f25989585610ebb956003956108769e9d9b95610eec99610ef29c1061100c575b505050811b019055610eb3565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f884891b161c19169055388080610fff565b808886978294978701518155019601940190610fd3565b6110616101ca565b610e3e565b6024847f4e487b7100000000000000000000000000000000000000000000000000000000815280600452fd5b61109a6101ca565b610dcc565b156110a657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f46656174757265206973206e6f742061637469766500000000000000000000006044820152fd5b9081602091031261000e5751610d79816109ed565b506040513d6000823e3d90fd5b1561000e57565b9061114d611148600361113f8561079d565b50015460ff1690565b61109f565b6111ea61118b61117260015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290602090829060649082906000905af190811561126d575b60009161123f575b50611126565b6112018160016111f98561079d565b50015461127a565b600161120c8461079d565b50015560405190815233907fc2617f46bad219e52991b2a4de30936ed663132ea903afef2ddf4428ff72733090602090a3565b611260915060203d8111611266575b6112588183610223565b810190611104565b386111e4565b503d61124e565b611275611119565b6111dc565b81198111610d5c57019056fea26469706673582212203be3c5792d9312ebe4b293d35a76b171dbbb4be73eb82d51aaec53db62d6420264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/FeatureVoting.sol:FeatureVoting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2593,
        "contract": "contracts/FeatureVoting.sol:FeatureVoting",
        "label": "energy",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1202"
      },
      {
        "astId": 2597,
        "contract": "contracts/FeatureVoting.sol:FeatureVoting",
        "label": "features",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Feature)2590_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Feature)2590_storage)dyn_storage": {
        "base": "t_struct(Feature)2590_storage",
        "encoding": "dynamic_array",
        "label": "struct FeatureVoting.Feature[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1202": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Feature)2590_storage": {
        "encoding": "inplace",
        "label": "struct FeatureVoting.Feature",
        "members": [
          {
            "astId": 2581,
            "contract": "contracts/FeatureVoting.sol:FeatureVoting",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2583,
            "contract": "contracts/FeatureVoting.sol:FeatureVoting",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2585,
            "contract": "contracts/FeatureVoting.sol:FeatureVoting",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2587,
            "contract": "contracts/FeatureVoting.sol:FeatureVoting",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2589,
            "contract": "contracts/FeatureVoting.sol:FeatureVoting",
            "label": "finished",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}