{
  "language": "Solidity",
  "sources": {
    "contracts/defi/EmptyRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./interfaces/IRewarder.sol\";\n\ncontract EmptyRewarder is IRewarder {\n\n    function onReward(\n        address user,\n        address token0,\n        address token1,\n        uint256 token0Amount,\n        uint256 token1Amount,\n        uint256 percentMin\n    ) external override {}\n}\n"
    },
    "contracts/defi/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewarder {\n  function onReward(\n    address user,\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/defi/UbeswapOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/sushiswap/IMiniChefV2.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../interfaces/uniswap/libraries/UniswapV2Library.sol\";\nimport \"./UniswapOperator.sol\";\nimport \"./interfaces/IRewarder.sol\";\n\ncontract UbeswapOperator is UniswapOperator, Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  IRewarder private rewarder;\n\n  constructor(\n    address _router,\n    address _factory,\n    address _rewarder\n  ) UniswapOperator(_router, _factory) {\n    rewarder = IRewarder(_rewarder);\n  }\n\n  receive() external payable {}\n\n  function setRewarder(address _rewarder) public onlyOwner {\n    rewarder = IRewarder(_rewarder);\n  }\n\n  function swapAndZapIn(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin,\n    address user\n  ) external {\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\n    uint256 halfFromAmount = fromAmount / 2;\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\n\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, user);\n  }\n\n  function zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) external {\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\n\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, user);\n  }\n\n  function _zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) internal {\n    _addLiquidityAndTransferLpToken(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin,\n      user\n    );\n\n    rewarder.onReward(\n      user,\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin\n    );\n\n    // Return leftovers\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\n  }\n\n  function _addLiquidityAndTransferLpToken(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) internal {\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\n\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\n    IERC20(lpToken).transfer(user, lpBalance);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/sushiswap/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IMiniChefV2 {\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardTime;\n        uint64 allocPoint;\n    }\n\n    function poolLength() external view returns (uint256);\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n    function deposit(uint256 pid, uint256 amount, address to) external;\n    function withdraw(uint256 pid, uint256 amount, address to) external;\n    function harvest(uint256 pid, address to) external;\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\n    function emergencyWithdraw(uint256 pid, address to) external;\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountETH);\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountETH);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable;\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n}\n"
    },
    "contracts/interfaces/uniswap/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../IUniswapV2Pair.sol\";\nimport \"../IUniswapV2Factory.sol\";\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n  using UniswapSafeMath for uint256;\n\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\n  function sortTokens(address tokenA, address tokenB)\n    internal\n    pure\n    returns (address token0, address token1)\n  {\n    require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  function pairFor(\n    address factory,\n    address tokenA,\n    address tokenB\n  ) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = IUniswapV2Factory(factory).getPair(token0, token1);\n  }\n\n  // fetches and sorts the reserves for a pair\n  function getReserves(\n    address factory,\n    address tokenA,\n    address tokenB\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\n    (address token0, ) = sortTokens(tokenA, tokenB);\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n      pairFor(factory, tokenA, tokenB)\n    ).getReserves();\n    (reserveA, reserveB) = tokenA == token0\n      ? (reserve0, reserve1)\n      : (reserve1, reserve0);\n  }\n\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) internal pure returns (uint256 amountB) {\n    require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n    require(\n      reserveA > 0 && reserveB > 0,\n      \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n    );\n    amountB = amountA.mul(reserveB) / reserveA;\n  }\n\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) internal pure returns (uint256 amountOut) {\n    require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n    require(\n      reserveIn > 0 && reserveOut > 0,\n      \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n    );\n    uint256 amountInWithFee = amountIn.mul(997);\n    uint256 numerator = amountInWithFee.mul(reserveOut);\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n    amountOut = numerator / denominator;\n  }\n\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) internal pure returns (uint256 amountIn) {\n    require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n    require(\n      reserveIn > 0 && reserveOut > 0,\n      \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n    );\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\n    amountIn = (numerator / denominator).add(1);\n  }\n\n  // performs chained getAmountOut calculations on any number of pairs\n  function getAmountsOut(\n    address factory,\n    uint256 amountIn,\n    address[] memory path\n  ) internal view returns (uint256[] memory amounts) {\n    require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n    amounts = new uint256[](path.length);\n    amounts[0] = amountIn;\n    for (uint256 i; i < path.length - 1; i++) {\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\n        factory,\n        path[i],\n        path[i + 1]\n      );\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n    }\n  }\n\n  // performs chained getAmountIn calculations on any number of pairs\n  function getAmountsIn(\n    address factory,\n    uint256 amountOut,\n    address[] memory path\n  ) internal view returns (uint256[] memory amounts) {\n    require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n    amounts = new uint256[](path.length);\n    amounts[amounts.length - 1] = amountOut;\n    for (uint256 i = path.length - 1; i > 0; i--) {\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\n        factory,\n        path[i - 1],\n        path[i]\n      );\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n    }\n  }\n}\n"
    },
    "contracts/defi/UniswapOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../interfaces/uniswap/libraries/UniswapV2Library.sol\";\n\ncontract UniswapOperator {\n  using SafeMath for uint256;\n\n  address public immutable router;\n  address public immutable factory;\n\n  constructor(address _router, address _factory) {\n    router = _router;\n    factory = _factory;\n  }\n\n  function _swapUsingPool(\n    address from,\n    address to,\n    uint256 inputAmount,\n    uint256 minAmountOut\n  ) internal returns (uint256 outAmount) {\n    address pairAddress = UniswapV2Library.pairFor(factory, from, to);\n    address[] memory path = new address[](2);\n    path[0] = from;\n    path[1] = to;\n\n    require(\n      IERC20(from).transfer(pairAddress, inputAmount),\n      \"UniswapOperator: Transfer failed\"\n    );\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n    if (pair.token0() == from) {\n      outAmount = getAmountOut(inputAmount, reserve0, reserve1);\n      require(\n        outAmount >= minAmountOut,\n        \"UniswapOperator: Not enough output amount\"\n      );\n      pair.swap(0, outAmount, address(this), new bytes(0));\n    } else {\n      outAmount = getAmountOut(inputAmount, reserve1, reserve0);\n      require(\n        outAmount >= minAmountOut,\n        \"UniswapOperator: Not enough output amount\"\n      );\n      pair.swap(outAmount, 0, address(this), new bytes(0));\n    }\n  }\n\n  function _addLiquidity(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin\n  ) internal {\n    IERC20(token0).approve(router, token0Amount);\n    IERC20(token1).approve(router, token1Amount);\n    IUniswapV2Router02(router).addLiquidity(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      (token0Amount * percentMin) / 100,\n      (token1Amount * percentMin) / 100,\n      address(this),\n      block.timestamp\n    );\n  }\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) internal pure returns (uint256 amountOut) {\n    uint256 amountInWithFee = amountIn.mul(997);\n    uint256 numerator = amountInWithFee.mul(reserveOut);\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n    amountOut = numerator / denominator;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Router01 {\n  function factory() external returns (address);\n\n  function WETH() external returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    returns (\n      uint256 amountToken,\n      uint256 amountETH,\n      uint256 liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETH(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function swapTokensForExactETH(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapETHForExactTokens(\n    uint256 amountOut,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure returns (uint256 amountB);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountIn);\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}"
    },
    "contracts/interfaces/uniswap/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary UniswapSafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/defi/SushiOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/sushiswap/IMiniChefV2.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../interfaces/uniswap/libraries/UniswapV2Library.sol\";\nimport \"./UniswapOperator.sol\";\nimport \"./interfaces/IRewarder.sol\";\n\ncontract SushiOperator is UniswapOperator, Ownable {\n  using SafeMath for uint256;\n\n  IMiniChefV2 public immutable miniChef;\n  IRewarder private rewarder;\n\n  constructor(\n    address _router,\n    address _factory,\n    address _miniChef,\n    address _rewarder\n  ) UniswapOperator(_router, _factory) {\n    miniChef = IMiniChefV2(_miniChef);\n    rewarder = IRewarder(_rewarder);\n  }\n\n  receive() external payable {}\n\n  function setRewarder(address _rewarder) public onlyOwner {\n    rewarder = IRewarder(_rewarder);\n  }\n\n  function swapAndZapIn(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) external {\n    require(\n      IERC20(from).transferFrom(msg.sender, address(this), fromAmount),\n      \"SushiOperator: Failed to transferFrom from amount\"\n    );\n    uint256 halfFromAmount = fromAmount / 2;\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\n\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, pid, user);\n  }\n\n  function zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) external {\n    require(\n      IERC20(token0).transferFrom(msg.sender, address(this), token0Amount),\n      \"SushiOperator: Failed to transferFrom token0\"\n    );\n    require(\n      IERC20(token1).transferFrom(msg.sender, address(this), token1Amount),\n      \"SushiOperator: Failed to transferFrom token1\"\n    );\n\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, pid, user);\n  }\n\n  function _zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) internal {\n    _addLiquidityAndDepositInFarm(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin,\n      pid,\n      user\n    );\n\n    rewarder.onReward(\n      user,\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin\n    );\n\n    // Return leftovers\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\n  }\n\n  function _addLiquidityAndDepositInFarm(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) internal {\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\n\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\n    IERC20(lpToken).approve(address(miniChef), lpBalance);\n    miniChef.deposit(pid, lpBalance, user);\n  }\n}\n"
    },
    "contracts/test/uniswap/UniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/uniswap/libraries/UniswapV2Library.sol\";\nimport \"../../interfaces/uniswap/libraries/SafeMath.sol\";\nimport \"../../interfaces/uniswap/libraries/TransferHelper.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"./IWETH.sol\";\n\ncontract UniswapV2Router02 is IUniswapV2Router02 {\n  using UniswapSafeMath for uint256;\n\n  address public immutable override factory;\n  address public immutable override WETH;\n\n  modifier ensure(uint256 deadline) {\n    require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\n    _;\n  }\n\n  constructor(address _factory, address _WETH) {\n    factory = _factory;\n    WETH = _WETH;\n  }\n\n  receive() external payable {\n    assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n  }\n\n  // **** ADD LIQUIDITY ****\n  function _addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin\n  ) internal virtual returns (uint256 amountA, uint256 amountB) {\n    // create the pair if it doesn't exist yet\n    if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\n      IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n    }\n    (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(\n      factory,\n      tokenA,\n      tokenB\n    );\n    if (reserveA == 0 && reserveB == 0) {\n      (amountA, amountB) = (amountADesired, amountBDesired);\n    } else {\n      uint256 amountBOptimal = UniswapV2Library.quote(\n        amountADesired,\n        reserveA,\n        reserveB\n      );\n      if (amountBOptimal <= amountBDesired) {\n        require(\n          amountBOptimal >= amountBMin,\n          \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\n        );\n        (amountA, amountB) = (amountADesired, amountBOptimal);\n      } else {\n        uint256 amountAOptimal = UniswapV2Library.quote(\n          amountBDesired,\n          reserveB,\n          reserveA\n        );\n        assert(amountAOptimal <= amountADesired);\n        require(\n          amountAOptimal >= amountAMin,\n          \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\n        );\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\n      }\n    }\n  }\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    ensure(deadline)\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    )\n  {\n    (amountA, amountB) = _addLiquidity(\n      tokenA,\n      tokenB,\n      amountADesired,\n      amountBDesired,\n      amountAMin,\n      amountBMin\n    );\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n    TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n    liquidity = IUniswapV2Pair(pair).mint(to);\n  }\n\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    virtual\n    override\n    ensure(deadline)\n    returns (\n      uint256 amountToken,\n      uint256 amountETH,\n      uint256 liquidity\n    )\n  {\n    (amountToken, amountETH) = _addLiquidity(\n      token,\n      WETH,\n      amountTokenDesired,\n      msg.value,\n      amountTokenMin,\n      amountETHMin\n    );\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n    IWETH(WETH).deposit{ value: amountETH }();\n    assert(IWETH(WETH).transfer(pair, amountETH));\n    liquidity = IUniswapV2Pair(pair).mint(to);\n    // refund dust eth, if any\n    if (msg.value > amountETH)\n      TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n  }\n\n  // **** REMOVE LIQUIDITY ****\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    public\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256 amountA, uint256 amountB)\n  {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n    (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\n    (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\n    (amountA, amountB) = tokenA == token0\n      ? (amount0, amount1)\n      : (amount1, amount0);\n    require(amountA >= amountAMin, \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\");\n    require(amountB >= amountBMin, \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\");\n  }\n\n  function removeLiquidityETH(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    public\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256 amountToken, uint256 amountETH)\n  {\n    (amountToken, amountETH) = removeLiquidity(\n      token,\n      WETH,\n      liquidity,\n      amountTokenMin,\n      amountETHMin,\n      address(this),\n      deadline\n    );\n    TransferHelper.safeTransfer(token, to, amountToken);\n    IWETH(WETH).withdraw(amountETH);\n    TransferHelper.safeTransferETH(to, amountETH);\n  }\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual override returns (uint256 amountA, uint256 amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    uint256 value = approveMax ? type(uint256).max : liquidity;\n    IUniswapV2Pair(pair).permit(\n      msg.sender,\n      address(this),\n      value,\n      deadline,\n      v,\n      r,\n      s\n    );\n    (amountA, amountB) = removeLiquidity(\n      tokenA,\n      tokenB,\n      liquidity,\n      amountAMin,\n      amountBMin,\n      to,\n      deadline\n    );\n  }\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint256 value = approveMax ? type(uint256).max : liquidity;\n    IUniswapV2Pair(pair).permit(\n      msg.sender,\n      address(this),\n      value,\n      deadline,\n      v,\n      r,\n      s\n    );\n    (amountToken, amountETH) = removeLiquidityETH(\n      token,\n      liquidity,\n      amountTokenMin,\n      amountETHMin,\n      to,\n      deadline\n    );\n  }\n\n  // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) public virtual override ensure(deadline) returns (uint256 amountETH) {\n    (, amountETH) = removeLiquidity(\n      token,\n      WETH,\n      liquidity,\n      amountTokenMin,\n      amountETHMin,\n      address(this),\n      deadline\n    );\n    TransferHelper.safeTransfer(\n      token,\n      to,\n      IERC20(token).balanceOf(address(this))\n    );\n    IWETH(WETH).withdraw(amountETH);\n    TransferHelper.safeTransferETH(to, amountETH);\n  }\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual override returns (uint256 amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint256 value = approveMax ? type(uint256).max : liquidity;\n    IUniswapV2Pair(pair).permit(\n      msg.sender,\n      address(this),\n      value,\n      deadline,\n      v,\n      r,\n      s\n    );\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n      token,\n      liquidity,\n      amountTokenMin,\n      amountETHMin,\n      to,\n      deadline\n    );\n  }\n\n  // **** SWAP ****\n  // requires the initial amount to have already been sent to the first pair\n  function _swap(\n    uint256[] memory amounts,\n    address[] memory path,\n    address _to\n  ) internal virtual {\n    for (uint256 i; i < path.length - 1; i++) {\n      (address input, address output) = (path[i], path[i + 1]);\n      (address token0, ) = UniswapV2Library.sortTokens(input, output);\n      uint256 amountOut = amounts[i + 1];\n      (uint256 amount0Out, uint256 amount1Out) = input == token0\n        ? (uint256(0), amountOut)\n        : (amountOut, uint256(0));\n      address to = i < path.length - 2\n        ? UniswapV2Library.pairFor(factory, output, path[i + 2])\n        : _to;\n      IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n        amount0Out,\n        amount1Out,\n        to,\n        new bytes(0)\n      );\n    }\n  }\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    require(\n      amounts[amounts.length - 1] >= amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amounts[0]\n    );\n    _swap(amounts, path, to);\n  }\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    require(\n      amounts[0] <= amountInMax,\n      \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n    );\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amounts[0]\n    );\n    _swap(amounts, path, to);\n  }\n\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n    require(\n      amounts[amounts.length - 1] >= amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n    IWETH(WETH).deposit{ value: amounts[0] }();\n    assert(\n      IWETH(WETH).transfer(\n        UniswapV2Library.pairFor(factory, path[0], path[1]),\n        amounts[0]\n      )\n    );\n    _swap(amounts, path, to);\n  }\n\n  function swapTokensForExactETH(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    require(\n      amounts[0] <= amountInMax,\n      \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n    );\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amounts[0]\n    );\n    _swap(amounts, path, address(this));\n    IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n    TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n  }\n\n  function swapExactTokensForETH(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    require(\n      amounts[amounts.length - 1] >= amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amounts[0]\n    );\n    _swap(amounts, path, address(this));\n    IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n    TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n  }\n\n  function swapETHForExactTokens(\n    uint256 amountOut,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    virtual\n    override\n    ensure(deadline)\n    returns (uint256[] memory amounts)\n  {\n    require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    require(amounts[0] <= msg.value, \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n    IWETH(WETH).deposit{ value: amounts[0] }();\n    assert(\n      IWETH(WETH).transfer(\n        UniswapV2Library.pairFor(factory, path[0], path[1]),\n        amounts[0]\n      )\n    );\n    _swap(amounts, path, to);\n    // refund dust eth, if any\n    if (msg.value > amounts[0])\n      TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n  }\n\n  // **** SWAP (supporting fee-on-transfer tokens) ****\n  // requires the initial amount to have already been sent to the first pair\n  function _swapSupportingFeeOnTransferTokens(\n    address[] memory path,\n    address _to\n  ) internal virtual {\n    for (uint256 i; i < path.length - 1; i++) {\n      (address input, address output) = (path[i], path[i + 1]);\n      (address token0, ) = UniswapV2Library.sortTokens(input, output);\n      IUniswapV2Pair pair = IUniswapV2Pair(\n        UniswapV2Library.pairFor(factory, input, output)\n      );\n      uint256 amountInput;\n      uint256 amountOutput;\n      {\n        // scope to avoid stack too deep errors\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n        (uint256 reserveInput, uint256 reserveOutput) = input == token0\n          ? (reserve0, reserve1)\n          : (reserve1, reserve0);\n        amountInput = IERC20(input).balanceOf(address(pair)).sub(\n          reserveInput\n        );\n        amountOutput = UniswapV2Library.getAmountOut(\n          amountInput,\n          reserveInput,\n          reserveOutput\n        );\n      }\n      (uint256 amount0Out, uint256 amount1Out) = input == token0\n        ? (uint256(0), amountOutput)\n        : (amountOutput, uint256(0));\n      address to = i < path.length - 2\n        ? UniswapV2Library.pairFor(factory, output, path[i + 2])\n        : _to;\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n  }\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external virtual override ensure(deadline) {\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amountIn\n    );\n    uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n      IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\n        amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n  }\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable virtual override ensure(deadline) {\n    require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    uint256 amountIn = msg.value;\n    IWETH(WETH).deposit{ value: amountIn }();\n    assert(\n      IWETH(WETH).transfer(\n        UniswapV2Library.pairFor(factory, path[0], path[1]),\n        amountIn\n      )\n    );\n    uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n      IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\n        amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n  }\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external virtual override ensure(deadline) {\n    require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n    TransferHelper.safeTransferFrom(\n      path[0],\n      msg.sender,\n      UniswapV2Library.pairFor(factory, path[0], path[1]),\n      amountIn\n    );\n    _swapSupportingFeeOnTransferTokens(path, address(this));\n    uint256 amountOut = IERC20(WETH).balanceOf(address(this));\n    require(\n      amountOut >= amountOutMin,\n      \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n    IWETH(WETH).withdraw(amountOut);\n    TransferHelper.safeTransferETH(to, amountOut);\n  }\n\n  // **** LIBRARY FUNCTIONS ****\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) public pure virtual override returns (uint256 amountB) {\n    return UniswapV2Library.quote(amountA, reserveA, reserveB);\n  }\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) public pure virtual override returns (uint256 amountOut) {\n    return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n  }\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) public pure virtual override returns (uint256 amountIn) {\n    return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n  }\n\n  function getAmountsOut(uint256 amountIn, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory amounts)\n  {\n    return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n  }\n\n  function getAmountsIn(uint256 amountOut, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory amounts)\n  {\n    return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n  }\n}\n"
    },
    "contracts/interfaces/uniswap/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(0x095ea7b3, to, value)\n    );\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"TransferHelper: APPROVE_FAILED\"\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(0xa9059cbb, to, value)\n    );\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"TransferHelper: TRANSFER_FAILED\"\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    bool success = IERC20(token).transferFrom(from, to, value);\n    require(success, \"TransferHelper: TRANSFER_FROM_FAILED\");\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{ value: value }(new bytes(0));\n    require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n  }\n}\n"
    },
    "contracts/test/uniswap/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/test/uniswap/UniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./UniswapV2ERC20.sol\";\nimport \"../../interfaces/uniswap/libraries/Math.sol\";\nimport \"../../interfaces/uniswap/libraries/UQ112x112.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Callee.sol\";\n\ninterface IMigrator {\n  // Return the desired amount of liquidity token that the migrator wants.\n  function desiredLiquidity() external view returns (uint256);\n}\n\ncontract UniswapV2Pair is UniswapV2ERC20 {\n  using UniswapSafeMath for uint256;\n  using UQ112x112 for uint224;\n\n  uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n  bytes4 private constant SELECTOR =\n    bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n  address public factory;\n  address public token0;\n  address public token1;\n\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n  uint256 public price0CumulativeLast;\n  uint256 public price1CumulativeLast;\n  uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n  uint256 private unlocked = 1;\n  modifier lock() {\n    require(unlocked == 1, \"UniswapV2: LOCKED\");\n    unlocked = 0;\n    _;\n    unlocked = 1;\n  }\n\n  function getReserves()\n    public\n    view\n    returns (\n      uint112 _reserve0,\n      uint112 _reserve1,\n      uint32 _blockTimestampLast\n    )\n  {\n    _reserve0 = reserve0;\n    _reserve1 = reserve1;\n    _blockTimestampLast = blockTimestampLast;\n  }\n\n  function _safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) private {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(SELECTOR, to, value)\n    );\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"UniswapV2: TRANSFER_FAILED\"\n    );\n  }\n\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n  event Burn(\n    address indexed sender,\n    uint256 amount0,\n    uint256 amount1,\n    address indexed to\n  );\n  event Swap(\n    address indexed sender,\n    uint256 amount0In,\n    uint256 amount1In,\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  constructor() {\n    factory = msg.sender;\n  }\n\n  // called once by the factory at time of deployment\n  function initialize(address _token0, address _token1) external {\n    require(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\n    token0 = _token0;\n    token1 = _token1;\n  }\n\n  // update reserves and, on the first call per block, price accumulators\n  function _update(\n    uint256 balance0,\n    uint256 balance1,\n    uint112 _reserve0,\n    uint112 _reserve1\n  ) private {\n    require(\n      balance0 <= type(uint112).max && balance1 <= type(uint112).max,\n      \"UniswapV2: OVERFLOW\"\n    );\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n      // * never overflows, and + overflow is desired\n      price0CumulativeLast +=\n        uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\n        timeElapsed;\n      price1CumulativeLast +=\n        uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\n        timeElapsed;\n    }\n    reserve0 = uint112(balance0);\n    reserve1 = uint112(balance1);\n    blockTimestampLast = blockTimestamp;\n    emit Sync(reserve0, reserve1);\n  }\n\n  // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n  function _mintFee(uint112 _reserve0, uint112 _reserve1)\n    private\n    returns (bool feeOn)\n  {\n    address feeTo = IUniswapV2Factory(factory).feeTo();\n    feeOn = feeTo != address(0);\n    uint256 _kLast = kLast; // gas savings\n    if (feeOn) {\n      if (_kLast != 0) {\n        uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\n        uint256 rootKLast = Math.sqrt(_kLast);\n        if (rootK > rootKLast) {\n          uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n          uint256 denominator = rootK.mul(5).add(rootKLast);\n          uint256 liquidity = numerator / denominator;\n          if (liquidity > 0) _mint(feeTo, liquidity);\n        }\n      }\n    } else if (_kLast != 0) {\n      kLast = 0;\n    }\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function mint(address to) external lock returns (uint256 liquidity) {\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n    uint256 balance0 = IERC20(token0).balanceOf(address(this));\n    uint256 balance1 = IERC20(token1).balanceOf(address(this));\n    uint256 amount0 = balance0.sub(_reserve0);\n    uint256 amount1 = balance1.sub(_reserve1);\n\n    bool feeOn = _mintFee(_reserve0, _reserve1);\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n    if (_totalSupply == 0) {\n      address migrator = IUniswapV2Factory(factory).migrator();\n      if (msg.sender == migrator) {\n        liquidity = IMigrator(migrator).desiredLiquidity();\n        require(\n          liquidity > 0 && liquidity != type(uint256).max,\n          \"Bad desired liquidity\"\n        );\n      } else {\n        require(migrator == address(0), \"Must not have migrator\");\n        liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n        _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n      }\n    } else {\n      liquidity = Math.min(\n        amount0.mul(_totalSupply) / _reserve0,\n        amount1.mul(_totalSupply) / _reserve1\n      );\n    }\n    require(liquidity > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\");\n    _mint(to, liquidity);\n\n    _update(balance0, balance1, _reserve0, _reserve1);\n    if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n    emit Mint(msg.sender, amount0, amount1);\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function burn(address to)\n    external\n    lock\n    returns (uint256 amount0, uint256 amount1)\n  {\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n    address _token0 = token0; // gas savings\n    address _token1 = token1; // gas savings\n    uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n    uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n    uint256 liquidity = balanceOf[address(this)];\n\n    bool feeOn = _mintFee(_reserve0, _reserve1);\n    uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n    require(\n      amount0 > 0 && amount1 > 0,\n      \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\"\n    );\n    _burn(address(this), liquidity);\n    _safeTransfer(_token0, to, amount0);\n    _safeTransfer(_token1, to, amount1);\n    balance0 = IERC20(_token0).balanceOf(address(this));\n    balance1 = IERC20(_token1).balanceOf(address(this));\n\n    _update(balance0, balance1, _reserve0, _reserve1);\n    if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n    emit Burn(msg.sender, amount0, amount1, to);\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external lock {\n    require(\n      amount0Out > 0 || amount1Out > 0,\n      \"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\"\n    );\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n    require(\n      amount0Out < _reserve0 && amount1Out < _reserve1,\n      \"UniswapV2: INSUFFICIENT_LIQUIDITY\"\n    );\n\n    uint256 balance0;\n    uint256 balance1;\n    {\n      // scope for _token{0,1}, avoids stack too deep errors\n      address _token0 = token0;\n      address _token1 = token1;\n      require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\");\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n      if (data.length > 0)\n        IUniswapV2Callee(to).uniswapV2Call(\n          msg.sender,\n          amount0Out,\n          amount1Out,\n          data\n        );\n      balance0 = IERC20(_token0).balanceOf(address(this));\n      balance1 = IERC20(_token1).balanceOf(address(this));\n    }\n    uint256 amount0In = balance0 > _reserve0 - amount0Out\n      ? balance0 - (_reserve0 - amount0Out)\n      : 0;\n    uint256 amount1In = balance1 > _reserve1 - amount1Out\n      ? balance1 - (_reserve1 - amount1Out)\n      : 0;\n    require(\n      amount0In > 0 || amount1In > 0,\n      \"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\"\n    );\n    {\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n      uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n      uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n      require(\n        balance0Adjusted.mul(balance1Adjusted) >=\n          uint256(_reserve0).mul(_reserve1).mul(1000**2),\n        \"UniswapV2: K\"\n      );\n    }\n\n    _update(balance0, balance1, _reserve0, _reserve1);\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n  }\n\n  // force balances to match reserves\n  function skim(address to) external lock {\n    address _token0 = token0; // gas savings\n    address _token1 = token1; // gas savings\n    _safeTransfer(\n      _token0,\n      to,\n      IERC20(_token0).balanceOf(address(this)).sub(reserve0)\n    );\n    _safeTransfer(\n      _token1,\n      to,\n      IERC20(_token1).balanceOf(address(this)).sub(reserve1)\n    );\n  }\n\n  // force reserves to match balances\n  function sync() external lock {\n    _update(\n      IERC20(token0).balanceOf(address(this)),\n      IERC20(token1).balanceOf(address(this)),\n      reserve0,\n      reserve1\n    );\n  }\n}\n"
    },
    "contracts/test/uniswap/UniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/uniswap/libraries/SafeMath.sol\";\n\ncontract UniswapV2ERC20 {\n  using UniswapSafeMath for uint256;\n\n  string public constant name = \"SushiSwap LP Token\";\n  string public constant symbol = \"SLP\";\n  uint8 public constant decimals = 18;\n  uint256 public totalSupply;\n  mapping(address => uint256) public balanceOf;\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  bytes32 public DOMAIN_SEPARATOR;\n  // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant PERMIT_TYPEHASH =\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n  mapping(address => uint256) public nonces;\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  constructor() {\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256(\n          \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        ),\n        keccak256(bytes(name)),\n        keccak256(bytes(\"1\")),\n        chainId,\n        address(this)\n      )\n    );\n  }\n\n  function _mint(address to, uint256 value) internal {\n    totalSupply = totalSupply.add(value);\n    balanceOf[to] = balanceOf[to].add(value);\n    emit Transfer(address(0), to, value);\n  }\n\n  function _burn(address from, uint256 value) internal {\n    balanceOf[from] = balanceOf[from].sub(value);\n    totalSupply = totalSupply.sub(value);\n    emit Transfer(from, address(0), value);\n  }\n\n  function _approve(\n    address owner,\n    address spender,\n    uint256 value\n  ) private {\n    allowance[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 value\n  ) private {\n    balanceOf[from] = balanceOf[from].sub(value);\n    balanceOf[to] = balanceOf[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  function approve(address spender, uint256 value) external returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n  function transfer(address to, uint256 value) external returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool) {\n    if (allowance[from][msg.sender] != type(uint256).max) {\n      allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n    }\n    _transfer(from, to, value);\n    return true;\n  }\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external {\n    require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\");\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        keccak256(\n          abi.encode(\n            PERMIT_TYPEHASH,\n            owner,\n            spender,\n            value,\n            nonces[owner]++,\n            deadline\n          )\n        )\n      )\n    );\n    address recoveredAddress = ecrecover(digest, v, r, s);\n    require(\n      recoveredAddress != address(0) && recoveredAddress == owner,\n      \"UniswapV2: INVALID_SIGNATURE\"\n    );\n    _approve(owner, spender, value);\n  }\n}\n"
    },
    "contracts/interfaces/uniswap/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}"
    },
    "contracts/interfaces/uniswap/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}"
    },
    "contracts/interfaces/uniswap/IUniswapV2Callee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}"
    },
    "contracts/test/revo/MockStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IStakingRewards.sol\";\n\ncontract MockStakingRewards is IStakingRewards {\n  IERC20 public rewardsToken;\n\n  IERC20 public stakingToken;\n\n  constructor(address _rewardsToken, address _stakingToken) {\n    rewardsToken = IERC20(_rewardsToken);\n    stakingToken = IERC20(_stakingToken);\n  }\n\n  // Views\n  function lastTimeRewardApplicable() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  function rewardPerToken() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  uint256 public amountEarned;\n\n  function setAmountEarned(uint256 _amountEarned) public {\n    amountEarned = _amountEarned;\n  }\n\n  function earned(address account) external view override returns (uint256) {\n    return amountEarned;\n  }\n\n  function getRewardForDuration() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  function totalSupply() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  uint256 public accountBalance;\n\n  function setAccountBalance(uint256 _accountBalance) external {\n    accountBalance = _accountBalance;\n  }\n\n  function balanceOf(address account) external view override returns (uint256) {\n    return accountBalance;\n  }\n\n  // Mutative\n  mapping(address => uint256) public staked;\n\n  function stake(uint256 amount) external override {\n    staked[msg.sender] += amount;\n    stakingToken.transferFrom(msg.sender, address(this), amount);\n  }\n\n  function withdraw(uint256 amount) external override {\n    require(staked[msg.sender] >= amount);\n    staked[msg.sender] -= amount;\n    stakingToken.transfer(msg.sender, amount);\n    this.getReward();\n  }\n\n  function getReward() external override {\n    rewardsToken.transfer(msg.sender, amountEarned);\n  }\n\n  function exit() external override {\n    // farm bot shouldn't need this\n    require(false);\n  }\n}\n"
    },
    "contracts/test/revo/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface IStakingRewards {\n  // Views\n  function lastTimeRewardApplicable() external view returns (uint256);\n\n  function rewardPerToken() external view returns (uint256);\n\n  function earned(address account) external view returns (uint256);\n\n  function getRewardForDuration() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  // Mutative\n\n  function stake(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n\n  function getReward() external;\n\n  function exit() external;\n}\n"
    },
    "contracts/test/revo/MockMoolaStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IMoolaStakingRewards.sol\";\n\ncontract MockMoolaStakingRewards is IMoolaStakingRewards {\n  IERC20 public rewardsToken;\n  IERC20[] public externalRewardsTokens;\n\n  IERC20 public stakingToken;\n\n  constructor(\n    address _rewardsToken,\n    address[] memory _externalRewardsTokens,\n    address _stakingToken\n  ) {\n    rewardsToken = IERC20(_rewardsToken);\n    stakingToken = IERC20(_stakingToken);\n\n    for (uint256 i = 0; i < _externalRewardsTokens.length; i++) {\n      externalRewardsTokens.push(IERC20(_externalRewardsTokens[i]));\n    }\n  }\n\n  // Views\n  function lastTimeRewardApplicable() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  function rewardPerToken() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  uint256 public amountEarned;\n\n  function setAmountEarned(uint256 _amountEarned) public {\n    amountEarned = _amountEarned;\n  }\n\n  function earned(address account) external view override returns (uint256) {\n    return amountEarned;\n  }\n\n  uint256[] public amountEarnedExternal;\n\n  function setAmountEarnedExternal(uint256[] memory _amountEarnedExternal)\n    public\n  {\n    amountEarnedExternal = _amountEarnedExternal;\n  }\n\n  function earnedExternal(address account)\n    external\n    override\n    returns (uint256[] memory)\n  {\n    return amountEarnedExternal;\n  }\n\n  function getRewardForDuration() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  function totalSupply() external view override returns (uint256) {\n    // farm bot shouldn't need this\n    require(false);\n    return 0;\n  }\n\n  uint256 public accountBalance;\n\n  function setAccountBalance(uint256 _accountBalance) external {\n    accountBalance = _accountBalance;\n  }\n\n  function balanceOf(address account) external view override returns (uint256) {\n    return accountBalance;\n  }\n\n  // Mutative\n  mapping(address => uint256) public staked;\n\n  function stake(uint256 amount) external override {\n    staked[msg.sender] += amount;\n    stakingToken.transferFrom(msg.sender, address(this), amount);\n  }\n\n  function withdraw(uint256 amount) external override {\n    require(staked[msg.sender] >= amount);\n    staked[msg.sender] -= amount;\n    stakingToken.transfer(msg.sender, amount);\n    this.getReward();\n  }\n\n  function getReward() external override {\n    rewardsToken.transfer(msg.sender, amountEarned);\n    for (uint256 i = 0; i < externalRewardsTokens.length; i++) {\n      externalRewardsTokens[i].transfer(msg.sender, amountEarnedExternal[i]);\n    }\n  }\n\n  function exit() external override {\n    // farm bot shouldn't need this\n    require(false);\n  }\n}\n"
    },
    "contracts/test/revo/IMoolaStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface IMoolaStakingRewards {\n  // Views\n\n  function lastTimeRewardApplicable() external view returns (uint256);\n\n  function rewardPerToken() external view returns (uint256);\n\n  function earned(address account) external view returns (uint256);\n\n  function earnedExternal(address account)\n    external\n    returns (uint256[] calldata);\n\n  function getRewardForDuration() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  // Mutative\n\n  function stake(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n\n  function getReward() external;\n\n  function exit() external;\n}\n"
    },
    "contracts/test/revo/RevoUbeswapFarmBot.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport \"./IMoolaStakingRewards.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./RevoUniswapStakingTokenStrategy.sol\";\nimport \"./IMoolaStakingRewards.sol\";\n\n/**\n * RevoUbeswapFarmBot is a farmbot:\n *   * that runs on top of an IMoolaStakingRewards farm\n *   * whose stakingToken is an IUniswapV2Pair (\"LP\")\n *   * that acquires LP constintuent tokens through swaps on an IUniswapV2Router02\n *   * that mints LP from constituent tokens through an IUniswapV2Router02\n *\n * This farmbot is suitable for use on top of a handful of Ubeswap yield farming positions.\n **/\ncontract RevoUbeswapFarmBot is RevoUniswapStakingTokenStrategy {\n  using SafeERC20 for IERC20;\n\n  IMoolaStakingRewards public stakingRewards;\n\n  constructor(\n    address _owner,\n    address _reserveAddress,\n    address _stakingRewards,\n    address _stakingToken,\n    address _revoFees,\n    address[] memory _rewardsTokens,\n    address _swapRouter,\n    address _liquidityRouter,\n    string memory _symbol\n  )\n    RevoUniswapStakingTokenStrategy(\n      _owner,\n      _reserveAddress,\n      _stakingToken,\n      _revoFees,\n      _rewardsTokens,\n      _swapRouter,\n      _liquidityRouter,\n      _symbol\n    )\n  {\n    stakingRewards = IMoolaStakingRewards(_stakingRewards);\n  }\n\n  function _deposit(uint256 _lpAmount) internal override whenNotPaused {\n    require(_lpAmount > 0, \"Cannot invest in farm because lpAmount is 0\");\n    stakingToken.safeIncreaseAllowance(address(stakingRewards), _lpAmount);\n    stakingRewards.stake(_lpAmount);\n  }\n\n  function _withdraw(uint256 _lpAmount) internal override {\n    stakingRewards.withdraw(_lpAmount);\n  }\n\n  function _claimRewards() internal override whenNotPaused {\n    stakingRewards.getReward();\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/test/revo/RevoUniswapStakingTokenStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"hardhat/console.sol\";\n\nimport \"./StakingTokenHolder.sol\";\nimport \"./UniswapRouter.sol\";\nimport \"./IUniswapV2Router02SwapOnly.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\n\n/**\n * RevoUniswapStakingTokenStrategy is an abstract class suitable for use when implementing a RevoFarmBot atop of\n * a farm whose staked token implements IUniswapV2Pair02. The reward tokens are swapped\n * for the LP constituent tokens through a contract implementing IUniswapV2Router02, and\n * liquidity is minted through calls to an IUniswapV2Router02 contract, though not\n * necessarily the same one used for swaps.\n *\n * This is a common enough use-case such that an intermediate abstract base class is justified.\n * In particular, this applies to both Sushiswap and Ubeswap, regardless of the underlying farm.\n **/\nabstract contract RevoUniswapStakingTokenStrategy is StakingTokenHolder {\n  event LiquidityRouterUpdated(\n    address indexed by,\n    address indexed routerAddress\n  );\n  event SwapRouterUpdated(address indexed by, address indexed routerAddress);\n\n  IUniswapV2Router02SwapOnly public swapRouter; // address to use for router that handles swaps\n  IUniswapV2Router02 public liquidityRouter; // address to use for router that handles minting liquidity\n\n  IERC20 public stakingToken0; // LP token0\n  IERC20 public stakingToken1; // LP token1\n\n  IERC20[] public rewardsTokens;\n\n  constructor(\n    address _owner,\n    address _reserveAddress,\n    address _stakingToken,\n    address _revoFees,\n    address[] memory _rewardsTokens,\n    address _swapRouter,\n    address _liquidityRouter,\n    string memory _symbol\n  )\n    StakingTokenHolder(\n      _owner,\n      _reserveAddress,\n      _stakingToken,\n      _revoFees,\n      _symbol\n    )\n  {\n    for (uint256 i = 0; i < _rewardsTokens.length; i++) {\n      rewardsTokens.push(IERC20(_rewardsTokens[i]));\n    }\n\n    swapRouter = IUniswapV2Router02SwapOnly(_swapRouter);\n    liquidityRouter = IUniswapV2Router02(_liquidityRouter);\n\n    stakingToken0 = IERC20(IUniswapV2Pair(address(stakingToken)).token0());\n    stakingToken1 = IERC20(IUniswapV2Pair(address(stakingToken)).token1());\n  }\n\n  function updateLiquidityRouterAddress(address _liquidityRouter)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    liquidityRouter = IUniswapV2Router02(_liquidityRouter);\n    emit LiquidityRouterUpdated(msg.sender, _liquidityRouter);\n  }\n\n  function updateSwapRouterAddress(address _swapRouter)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    swapRouter = IUniswapV2Router02SwapOnly(_swapRouter);\n    emit SwapRouterUpdated(msg.sender, _swapRouter);\n  }\n\n  // Abstract method for claiming rewards from a farm\n  function _claimRewards() internal virtual;\n\n  /**\n   * The _paths parameter represents a list of paths to use when swapping each rewards token to token0/token1 of the LP.\n   *  Each top-level entry represents a pair of paths for each rewardsToken.\n   *\n   * Example:\n   *  // string token names used in place of addresses for readability\n   *  rewardsTokens = ['cUSD', 'Celo', 'UBE']\n   *  stakingTokens = ['cEUR', 'MOO']\n   *  paths = [\n   *    [ // paths from cUSD to staking tokens\n   *      ['cUSD', 'cEUR'], // order matters here (need first staking token first)\n   *      ['cUSD', 'mcUSD', 'MOO']\n   *    ],\n   *    [ // paths from Celo to staking tokens\n   *      ...\n   *    ],\n   *    [ // paths from UBE to staking tokens\n   *      ...\n   *    ]\n   *  ]\n   *\n   * The _minAmountsOut parameter represents a list of minimum amounts for token0/token1 we expect to receive when swapping\n   *  each rewardsToken. If we do not receive at least this much of token0/token1 for some swap, the transaction will revert.\n   * If a path corresponding to some swap has length < 2, the minimum amount specified for that swap will be ignored.\n   */\n  function compound(\n    address[][2][] memory _paths,\n    uint256[2][] memory _minAmountsOut,\n    uint256 _deadline\n  ) external ensure(_deadline) onlyRole(COMPOUNDER_ROLE) whenNotPaused {\n    require(\n      _paths.length == rewardsTokens.length,\n      \"Parameter _paths must have length equal to rewardsTokens\"\n    );\n    require(\n      _minAmountsOut.length == rewardsTokens.length,\n      \"Parameter _minAmountsOut must have length equal to rewardsTokens\"\n    );\n\n    // Get rewards from farm\n    _claimRewards();\n\n    // Get the current balance of rewards tokens\n    uint256[] memory _tokenBalances = new uint256[](rewardsTokens.length);\n    for (uint256 i = 0; i < rewardsTokens.length; i++) {\n      _tokenBalances[i] = rewardsTokens[i].balanceOf(address(this));\n    }\n\n    // Swap rewards tokens for equal value of LP tokens\n    (uint256 _amountToken0, uint256 _amountToken1) = UniswapRouter\n      .swapTokensForEqualAmounts(\n        swapRouter,\n        _tokenBalances,\n        _paths,\n        rewardsTokens,\n        _minAmountsOut,\n        _deadline\n      );\n\n    // Mint LP\n    UniswapRouter.addLiquidity(\n      liquidityRouter,\n      stakingToken0,\n      stakingToken1,\n      _amountToken0,\n      _amountToken1,\n      (_amountToken0 * slippageNumerator) / slippageDenominator,\n      (_amountToken1 * slippageNumerator) / slippageDenominator,\n      _deadline\n    );\n\n    // Send fees and bonus, then deposit the remaining LP in the farm\n    (\n      uint256 lpEarnings,\n      uint256 compounderFee,\n      uint256 reserveFee\n    ) = issuePerformanceFeesAndBonus();\n\n    _deposit(lpEarnings);\n\n    // Update FP weight and interest rate with earnings\n    updateFpWeightAndInterestRate(lpEarnings);\n\n    emit Compound(\n      msg.sender,\n      lpEarnings,\n      lpTotalBalance,\n      compounderFee,\n      reserveFee\n    );\n  }\n}\n"
    },
    "contracts/test/revo/StakingTokenHolder.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"hardhat/console.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./IRevoFees.sol\";\n\n/**\n * StakingTokenHolder is an abstract base class that can be used to implement Revo farm bots on top\n * of arbitrary sources of yield. These sources of yield come from staking some ERC20 token\n * (the \"staking token\") into a contract.\n *\n * Minimally, subclasses must implement the _deposit and _withdraw, methods that\n * deposit/withdraw an amount of the staked token into the \"farm\". This will\n * result in a farm bot that does not auto-compound yield; it acts only as \"storage\" for a\n * user's staking token.\n *\n * Notably, this class does not contain a virtual \"compound\" function; this is because depending\n * on the implementation, a function repsonsible for compounding the farm bot's staked position may\n * require different arguments from the caller.\n *\n * This class also does not make any assumptions about how yield rewards are converted back into\n * the staking token. For example, this may require a series of swaps and minting a liquidity token (\"LP\"),\n * or for a single-staking source of yield that issues the staking token itself as a reward, nothing at all.\n * Since swapping is a common scenario however, this class contains tools for controlling slippage tolerance.\n *\n * For convenience and ease of naming, the staking token is referred to as \"LP\" throughout the class,\n * although in reality, it may not represent an actual liquidity token.\n **/\nabstract contract StakingTokenHolder is ERC20, AccessControl, Pausable {\n  using SafeERC20 for IERC20;\n\n  event FeesUpdated(address indexed by, address indexed to);\n  event ReserveUpdated(address indexed by, address indexed reserveAddress);\n  event SlippageUpdated(\n    address indexed by,\n    uint256 numerator,\n    uint256 denominator\n  );\n  event Deposit(address indexed by, uint256 lpAmount);\n  event Withdraw(address indexed by, uint256 lpAmount, uint256 fee);\n  event Compound(\n    address indexed by,\n    uint256 lpStaked,\n    uint256 newLPTotalBalance,\n    uint256 compounderFeeAmount,\n    uint256 reserveFeeAmount\n  );\n  event GrantRole(\n    address indexed by,\n    address indexed newRoleRecipient,\n    bytes32 role\n  );\n\n  modifier ensure(uint256 deadline) {\n    require(deadline >= block.timestamp, \"FarmBot: EXPIRED\");\n    _;\n  }\n\n  bytes32 public constant COMPOUNDER_ROLE = keccak256(\"COMPOUNDER_ROLE\");\n\n  uint256 public lpTotalBalance; // total number of LP tokens owned by Farm Bot\n\n  IERC20 public stakingToken; // LP that's being staked\n\n  // fractional increase of LP balance last time compound was called. Used to calculate withdrawal fee.\n  uint256 public interestEarnedNumerator;\n  uint256 public interestEarnedDenominator = 10000;\n\n  // Acceptable slippage when minting LP; can be updated by admin\n  uint256 public slippageNumerator = 99;\n  uint256 public slippageDenominator = 100;\n\n  // Configurable fees contract. Determines:\n  //  - \"compounder fee\" for calling compound on behalf of farm investors.\n  //  - \"reserve fee\" sent to reserve\n  //  - \"compounder bonus\" (paid by reserve) for calling compound\n  //  - \"withdrawal fee\" for withdrawing (necessary for security, guaranteed <= 0.25%)\n  //  Note that compounder fees + reserve fees are \"performance fees\", meaning they are charged only on earnings.\n  //  Performance fees are guaranteed to be at most 4%, the current standard, and should be much less.\n  IRevoFees public revoFees;\n  uint256 public constant maxPerformanceFeeNumerator = 40;\n  uint256 public constant maxPerformanceFeeDenominator = 1000;\n  uint256 public constant maxWithdrawalFeeNumerator = 25;\n  uint256 public constant maxWithdrawalFeeDenominator = 10000;\n\n  address public reserveAddress;\n\n  constructor(\n    address _owner,\n    address _reserveAddress,\n    address _stakingToken,\n    address _revoFees,\n    string memory _symbol\n  ) ERC20(\"Revo FP Token\", _symbol) {\n    revoFees = IRevoFees(_revoFees);\n    stakingToken = IERC20(_stakingToken);\n    reserveAddress = _reserveAddress;\n\n    _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n    emit GrantRole(msg.sender, _owner, DEFAULT_ADMIN_ROLE);\n  }\n\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    super.grantRole(role, account);\n    emit GrantRole(msg.sender, account, role);\n  }\n\n  function updateReserveAddress(address _reserveAddress)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    require(_reserveAddress != address(0), \"Cannot set reserve address to 0\");\n    reserveAddress = _reserveAddress;\n    emit ReserveUpdated(msg.sender, _reserveAddress);\n  }\n\n  function updateFees(address _revoFees) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    revoFees = IRevoFees(_revoFees);\n    emit FeesUpdated(msg.sender, _revoFees);\n  }\n\n  function updateSlippage(\n    uint256 _slippageNumerator,\n    uint256 _slippageDenominator\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    slippageNumerator = _slippageNumerator;\n    slippageDenominator = _slippageDenominator;\n    emit SlippageUpdated(msg.sender, _slippageNumerator, _slippageDenominator);\n  }\n\n  function getFpAmount(uint256 _lpAmount) public view returns (uint256) {\n    if (lpTotalBalance == 0) {\n      return _lpAmount;\n    } else {\n      return (_lpAmount * totalSupply()) / lpTotalBalance;\n    }\n  }\n\n  function getLpAmount(uint256 _fpAmount) public view returns (uint256) {\n    if (totalSupply() == 0) {\n      return 0;\n    } else {\n      return (_fpAmount * lpTotalBalance) / totalSupply();\n    }\n  }\n\n  function deposit(uint256 _lpAmount) external whenNotPaused {\n    bool transferSuccess = stakingToken.transferFrom(\n      msg.sender,\n      address(this),\n      _lpAmount\n    );\n    require(transferSuccess, \"Transfer failed, aborting deposit\");\n\n    uint256 _fpAmount = this.getFpAmount(_lpAmount);\n    _mint(msg.sender, _fpAmount);\n    lpTotalBalance += _lpAmount;\n    _deposit(_lpAmount);\n    emit Deposit(msg.sender, _lpAmount);\n  }\n\n  function withdrawAll() external {\n    require(balanceOf(msg.sender) > 0, \"Cannot withdraw zero balance\");\n    uint256 _lpAmount = getLpAmount(balanceOf(msg.sender));\n    withdraw(_lpAmount);\n  }\n\n  function withdraw(uint256 _lpAmount) public {\n    uint256 _fpAmount = this.getFpAmount(_lpAmount);\n    require(\n      balanceOf(msg.sender) >= _fpAmount,\n      \"Cannot withdraw more than the total balance of the owner\"\n    );\n\n    uint256 tokenBalance = stakingToken.balanceOf(address(this));\n    if (_lpAmount > tokenBalance) {\n      _withdraw(_lpAmount - tokenBalance);\n    }\n\n    // fee\n    (uint256 feeNumerator, uint256 feeDenominator) = revoFees.withdrawalFee(\n      interestEarnedNumerator,\n      interestEarnedDenominator\n    );\n    uint256 _withdrawalFee = (feeNumerator * _lpAmount) / feeDenominator;\n    uint256 _maxWithdrawalFee = (maxPerformanceFeeNumerator * _lpAmount) /\n      maxPerformanceFeeDenominator;\n    if (_withdrawalFee > _maxWithdrawalFee) {\n      // guarantee the max fee\n      _withdrawalFee = _maxWithdrawalFee;\n    }\n\n    bool feeSuccess = stakingToken.transfer(reserveAddress, _withdrawalFee);\n    require(feeSuccess, \"Fee failed, aborting withdrawal\");\n    bool transferSuccess = stakingToken.transfer(\n      msg.sender,\n      _lpAmount - _withdrawalFee\n    );\n    require(transferSuccess, \"Transfer failed, aborting withdrawal\");\n    _burn(msg.sender, _fpAmount);\n    lpTotalBalance -= _lpAmount;\n    emit Withdraw(msg.sender, _lpAmount, _withdrawalFee);\n  }\n\n  // Abstract method for depositing LP into a farm\n  function _deposit(uint256 _lpAmount) internal virtual;\n\n  // Abstract method for withdrawing LP from a farm\n  function _withdraw(uint256 _lpAmount) internal virtual;\n\n  // Convenience method for subclasses\n  function issuePerformanceFeesAndBonus()\n    internal\n    whenNotPaused\n    returns (\n      uint256 lpEarnings,\n      uint256 compounderFee,\n      uint256 reserveFee\n    )\n  {\n    // send fees to compounder and reserve\n    uint256 lpBalance = stakingToken.balanceOf(address(this));\n    compounderFee = revoFees.compounderFee(lpBalance);\n    reserveFee = revoFees.reserveFee(lpBalance);\n    require(\n      compounderFee + reserveFee <=\n        (lpBalance * maxPerformanceFeeNumerator) / maxPerformanceFeeDenominator,\n      \"Performance fee too high\"\n    );\n    bool compounderFeeSuccess = stakingToken.transfer(\n      msg.sender,\n      compounderFee\n    );\n    bool reserveFeeSuccess = stakingToken.transfer(reserveAddress, reserveFee);\n    require(compounderFeeSuccess && reserveFeeSuccess, \"Sending fees failed\");\n\n    // Send compounder bonus\n\n    revoFees.issueCompounderBonus(msg.sender);\n\n    lpEarnings = lpBalance - compounderFee - reserveFee;\n    return (lpEarnings, compounderFee, reserveFee);\n  }\n\n  // Convenience method for subclasses\n  function updateFpWeightAndInterestRate(uint256 _lpEarnings)\n    internal\n    whenNotPaused\n  {\n    lpTotalBalance += _lpEarnings;\n\n    interestEarnedNumerator =\n      (_lpEarnings * interestEarnedDenominator) /\n      lpTotalBalance;\n  }\n\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _pause();\n  }\n\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _unpause();\n\n    uint256 lpBalance = stakingToken.balanceOf(address(this));\n    if (lpBalance > 0) {\n      _deposit(lpBalance);\n    }\n  }\n}\n"
    },
    "contracts/test/revo/UniswapRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"hardhat/console.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Router02SwapOnly.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * UniswapRouter is a library containing helper functions for interacting with contracts implementing\n * the IUniswapV2Router02 interface, or subsets of its functionality.\n **/\nlibrary UniswapRouter {\n  using SafeERC20 for IERC20;\n\n  function swap(\n    IUniswapV2Router02SwapOnly router,\n    address[] memory path,\n    uint256 startTokenBudget,\n    IERC20 startToken,\n    uint256 minAmountOut,\n    uint256 deadline\n  ) internal returns (uint256) {\n    if (path.length >= 2 && startTokenBudget > 0) {\n      startToken.safeIncreaseAllowance(address(router), startTokenBudget);\n      uint256[] memory _swapResultAmounts = router.swapExactTokensForTokens(\n        startTokenBudget,\n        minAmountOut,\n        path,\n        address(this),\n        deadline\n      );\n      return _swapResultAmounts[_swapResultAmounts.length - 1];\n    } else {\n      return startTokenBudget;\n    }\n  }\n\n  function swapTokensForEqualAmounts(\n    IUniswapV2Router02SwapOnly router,\n    uint256[] memory tokenBalances,\n    address[][2][] memory paths,\n    IERC20[] memory startTokens,\n    uint256[2][] memory minAmountsOut,\n    uint256 deadline\n  ) internal returns (uint256, uint256) {\n    uint256 _totalAmountToken0 = 0;\n    uint256 _totalAmountToken1 = 0;\n    for (uint256 i = 0; i < tokenBalances.length; i++) {\n      uint256 _halfTokens = tokenBalances[i] / 2;\n      _totalAmountToken0 += swap(\n        router,\n        paths[i][0],\n        _halfTokens,\n        startTokens[i],\n        minAmountsOut[i][0],\n        deadline\n      );\n      _totalAmountToken1 += swap(\n        router,\n        paths[i][1],\n        _halfTokens,\n        startTokens[i],\n        minAmountsOut[i][1],\n        deadline\n      );\n    }\n    return (_totalAmountToken0, _totalAmountToken1);\n  }\n\n  function addLiquidity(\n    IUniswapV2Router02 router,\n    IERC20 token0,\n    IERC20 token1,\n    uint256 amount0Desired,\n    uint256 amount1Desired,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    uint256 deadline\n  ) internal {\n    // Approve the liquidity router to spend the bot's token0/token1\n    token0.safeIncreaseAllowance(address(router), amount0Desired);\n    token1.safeIncreaseAllowance(address(router), amount1Desired);\n\n    // Actually add liquidity\n    router.addLiquidity(\n      address(token0),\n      address(token1),\n      amount0Desired,\n      amount1Desired,\n      amount0Min,\n      amount1Min,\n      address(this),\n      deadline\n    );\n  }\n}\n"
    },
    "contracts/test/revo/IUniswapV2Router02SwapOnly.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/// @notice Swaps tokens\ninterface IUniswapV2Router02SwapOnly {\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function getAmountsOut(uint256 amountIn, address[] memory path)\n    external\n    view\n    returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] memory path)\n    external\n    view\n    returns (uint256[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/test/revo/IRevoFees.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct TokenAmount {\n  IERC20 token;\n  uint256 amount;\n}\n\ninterface IRevoFees {\n  function compounderFee(uint256 _interestAccrued)\n    external\n    view\n    returns (uint256);\n\n  function compounderBonus(TokenAmount calldata interestAccrued)\n    external\n    view\n    returns (TokenAmount[] memory);\n\n  function reserveFee(uint256 _interestAccrued) external view returns (uint256);\n\n  function withdrawalFee(\n    uint256 interestEarnedNumerator,\n    uint256 interestEarnedDenominator\n  ) external view returns (uint256 feeNumerator, uint256 feeDenominator);\n\n  function issueCompounderBonus(address recipient) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/sushiswap/MiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/sushiswap/IRewarder.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SignedSafeMath.sol\";\n\ninterface IMigratorChef {\n  // Take the current LP token address and return the new LP token address.\n  // Migrator should have full access to the caller's LP token.\n  function migrate(IERC20 token) external returns (IERC20);\n}\n\n/// @notice The (older) MasterChef contract gives out a constant number of SUSHI tokens per block.\n/// It is the only address with minting rights for SUSHI.\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\n/// that is deposited into the MasterChef V1 (MCV1) contract.\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.\ncontract MiniChefV2 is Ownable {\n  using SafeMath for uint256;\n  using SafeMath128 for uint128;\n  using SignedSafeMath for int256;\n  using SafeERC20 for IERC20;\n\n  /// @notice Info of each MCV2 user.\n  /// `amount` LP token amount the user has provided.\n  /// `rewardDebt` The amount of SUSHI entitled to the user.\n  struct UserInfo {\n    uint256 amount;\n    int256 rewardDebt;\n  }\n\n  /// @notice Info of each MCV2 pool.\n  /// `allocPoint` The amount of allocation points assigned to the pool.\n  /// Also known as the amount of SUSHI to distribute per block.\n  struct PoolInfo {\n    uint128 accSushiPerShare;\n    uint128 lastRewardTime;\n    uint128 allocPoint;\n  }\n\n  /// @notice Address of SUSHI contract.\n  IERC20 public immutable SUSHI;\n  // @notice The migrator contract. It has a lot of power. Can only be set through governance (owner).\n  IMigratorChef public migrator;\n\n  /// @notice Info of each MCV2 pool.\n  PoolInfo[] public poolInfo;\n  /// @notice Address of the LP token for each MCV2 pool.\n  IERC20[] public lpToken;\n  /// @notice Address of each `IRewarder` contract in MCV2.\n  IRewarder[] public rewarder;\n\n  /// @notice Info of each user that stakes LP tokens.\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n  /// @dev Tokens added\n  mapping(address => bool) public addedTokens;\n\n  /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint;\n\n  uint256 public sushiPerSecond;\n  uint256 private constant ACC_SUSHI_PRECISION = 1e12;\n\n  event Deposit(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Withdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    address indexed to\n  );\n  event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n  event LogPoolAddition(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IERC20 indexed lpToken,\n    IRewarder indexed rewarder\n  );\n  event LogSetPool(\n    uint256 indexed pid,\n    uint256 allocPoint,\n    IRewarder indexed rewarder,\n    bool overwrite\n  );\n  event LogUpdatePool(\n    uint256 indexed pid,\n    uint128 lastRewardTime,\n    uint256 lpSupply,\n    uint256 accSushiPerShare\n  );\n  event LogSushiPerSecond(uint256 sushiPerSecond);\n\n  /// @param _sushi The SUSHI token contract address.\n  constructor(IERC20 _sushi) {\n    SUSHI = _sushi;\n  }\n\n  /// @notice Returns the number of MCV2 pools.\n  function poolLength() public view returns (uint256 pools) {\n    pools = poolInfo.length;\n  }\n\n  /// @notice Add a new LP to the pool. Can only be called by the owner.\n  /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n  /// @param allocPoint AP of the new pool.\n  /// @param _lpToken Address of the LP ERC-20 token.\n  /// @param _rewarder Address of the rewarder delegate.\n  function add(\n    uint256 allocPoint,\n    IERC20 _lpToken,\n    IRewarder _rewarder\n  ) public onlyOwner {\n    require(addedTokens[address(_lpToken)] == false, \"Token already added\");\n    totalAllocPoint = totalAllocPoint.add(allocPoint);\n    lpToken.push(_lpToken);\n    rewarder.push(_rewarder);\n\n    poolInfo.push(\n      PoolInfo({\n        allocPoint: allocPoint.to128(),\n        lastRewardTime: block.timestamp.to128(),\n        accSushiPerShare: 0\n      })\n    );\n    addedTokens[address(_lpToken)] = true;\n    emit LogPoolAddition(\n      lpToken.length.sub(1),\n      allocPoint,\n      _lpToken,\n      _rewarder\n    );\n  }\n\n  /// @notice Update the given pool's SUSHI allocation point and `IRewarder` contract. Can only be called by the owner.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _allocPoint New AP of the pool.\n  /// @param _rewarder Address of the rewarder delegate.\n  /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n  function set(\n    uint256 _pid,\n    uint256 _allocPoint,\n    IRewarder _rewarder,\n    bool overwrite\n  ) public onlyOwner {\n    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n      _allocPoint\n    );\n    poolInfo[_pid].allocPoint = _allocPoint.to128();\n    if (overwrite) {\n      rewarder[_pid] = _rewarder;\n    }\n    emit LogSetPool(\n      _pid,\n      _allocPoint,\n      overwrite ? _rewarder : rewarder[_pid],\n      overwrite\n    );\n  }\n\n  /// @notice Sets the sushi per second to be distributed. Can only be called by the owner.\n  /// @param _sushiPerSecond The amount of Sushi to be distributed per second.\n  function setSushiPerSecond(uint256 _sushiPerSecond) public onlyOwner {\n    sushiPerSecond = _sushiPerSecond;\n    emit LogSushiPerSecond(_sushiPerSecond);\n  }\n\n  /// @notice Set the `migrator` contract. Can only be called by the owner.\n  /// @param _migrator The contract address to set.\n  function setMigrator(IMigratorChef _migrator) public onlyOwner {\n    migrator = _migrator;\n  }\n\n  /// @notice Migrate LP token to another LP contract through the `migrator` contract.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  function migrate(uint256 _pid) public {\n    require(address(migrator) != address(0), \"MasterChefV2: no migrator set\");\n    IERC20 _lpToken = lpToken[_pid];\n    uint256 bal = _lpToken.balanceOf(address(this));\n    _lpToken.approve(address(migrator), bal);\n    IERC20 newLpToken = migrator.migrate(_lpToken);\n    require(\n      bal == newLpToken.balanceOf(address(this)),\n      \"MasterChefV2: migrated balance must match\"\n    );\n    require(addedTokens[address(newLpToken)] == false, \"Token already added\");\n    addedTokens[address(newLpToken)] = true;\n    addedTokens[address(_lpToken)] = false;\n    lpToken[_pid] = newLpToken;\n  }\n\n  /// @notice View function to see pending SUSHI on frontend.\n  /// @param _pid The index of the pool. See `poolInfo`.\n  /// @param _user Address of user.\n  /// @return pending SUSHI reward for a given user.\n  function pendingSushi(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256 pending)\n  {\n    PoolInfo memory pool = poolInfo[_pid];\n    UserInfo storage user = userInfo[_pid][_user];\n    uint256 accSushiPerShare = pool.accSushiPerShare;\n    uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n    if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n      uint256 time = block.timestamp.sub(pool.lastRewardTime);\n      uint256 sushiReward = time.mul(sushiPerSecond).mul(pool.allocPoint) /\n        totalAllocPoint;\n      accSushiPerShare = accSushiPerShare.add(\n        sushiReward.mul(ACC_SUSHI_PRECISION) / lpSupply\n      );\n    }\n    pending = int256(user.amount.mul(accSushiPerShare) / ACC_SUSHI_PRECISION)\n      .sub(user.rewardDebt)\n      .toUInt256();\n  }\n\n  /// @notice Update reward variables for all pools. Be careful of gas spending!\n  /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n  function massUpdatePools(uint256[] calldata pids) external {\n    uint256 len = pids.length;\n    for (uint256 i = 0; i < len; ++i) {\n      updatePool(pids[i]);\n    }\n  }\n\n  /// @notice Update reward variables of the given pool.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @return pool Returns the pool that was updated.\n  function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n    pool = poolInfo[pid];\n    if (block.timestamp > pool.lastRewardTime) {\n      uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n      if (lpSupply > 0) {\n        uint256 time = block.timestamp.sub(pool.lastRewardTime);\n        uint256 sushiReward = time.mul(sushiPerSecond).mul(pool.allocPoint) /\n          totalAllocPoint;\n        pool.accSushiPerShare = pool.accSushiPerShare.add(\n          (sushiReward.mul(ACC_SUSHI_PRECISION) / lpSupply).to128()\n        );\n      }\n      pool.lastRewardTime = block.timestamp.to128();\n      poolInfo[pid] = pool;\n      emit LogUpdatePool(\n        pid,\n        pool.lastRewardTime,\n        lpSupply,\n        pool.accSushiPerShare\n      );\n    }\n  }\n\n  /// @notice Deposit LP tokens to MCV2 for SUSHI allocation.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to deposit.\n  /// @param to The receiver of `amount` deposit benefit.\n  function deposit(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][to];\n\n    // Effects\n    user.amount = user.amount.add(amount);\n    user.rewardDebt = user.rewardDebt.add(\n      int256(amount.mul(pool.accSushiPerShare) / ACC_SUSHI_PRECISION)\n    );\n\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onSushiReward(pid, to, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n    emit Deposit(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens.\n  function withdraw(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    // Effects\n    user.rewardDebt = user.rewardDebt.sub(\n      int256(amount.mul(pool.accSushiPerShare) / ACC_SUSHI_PRECISION)\n    );\n    user.amount = user.amount.sub(amount);\n\n    // Interactions\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onSushiReward(pid, msg.sender, to, 0, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n  }\n\n  /// @notice Harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of SUSHI rewards.\n  function harvest(uint256 pid, address to) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedSushi = int256(\n      user.amount.mul(pool.accSushiPerShare) / ACC_SUSHI_PRECISION\n    );\n    uint256 _pendingSushi = accumulatedSushi.sub(user.rewardDebt).toUInt256();\n\n    // Effects\n    user.rewardDebt = accumulatedSushi;\n\n    // Interactions\n    if (_pendingSushi != 0) {\n      SUSHI.safeTransfer(to, _pendingSushi);\n    }\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onSushiReward(pid, msg.sender, to, _pendingSushi, user.amount);\n    }\n\n    emit Harvest(msg.sender, pid, _pendingSushi);\n  }\n\n  /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param amount LP token amount to withdraw.\n  /// @param to Receiver of the LP tokens and SUSHI rewards.\n  function withdrawAndHarvest(\n    uint256 pid,\n    uint256 amount,\n    address to\n  ) public {\n    PoolInfo memory pool = updatePool(pid);\n    UserInfo storage user = userInfo[pid][msg.sender];\n    int256 accumulatedSushi = int256(\n      user.amount.mul(pool.accSushiPerShare) / ACC_SUSHI_PRECISION\n    );\n    uint256 _pendingSushi = accumulatedSushi.sub(user.rewardDebt).toUInt256();\n\n    // Effects\n    user.rewardDebt = accumulatedSushi.sub(\n      int256(amount.mul(pool.accSushiPerShare) / ACC_SUSHI_PRECISION)\n    );\n    user.amount = user.amount.sub(amount);\n\n    // Interactions\n    SUSHI.safeTransfer(to, _pendingSushi);\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onSushiReward(pid, msg.sender, to, _pendingSushi, user.amount);\n    }\n\n    lpToken[pid].safeTransfer(to, amount);\n\n    emit Withdraw(msg.sender, pid, amount, to);\n    emit Harvest(msg.sender, pid, _pendingSushi);\n  }\n\n  /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n  /// @param pid The index of the pool. See `poolInfo`.\n  /// @param to Receiver of the LP tokens.\n  function emergencyWithdraw(uint256 pid, address to) public {\n    UserInfo storage user = userInfo[pid][msg.sender];\n    uint256 amount = user.amount;\n    user.amount = 0;\n    user.rewardDebt = 0;\n\n    IRewarder _rewarder = rewarder[pid];\n    if (address(_rewarder) != address(0)) {\n      _rewarder.onSushiReward(pid, msg.sender, to, 0, 0);\n    }\n\n    // Note: transfer can fail or succeed if `amount` is zero.\n    lpToken[pid].safeTransfer(to, amount);\n    emit EmergencyWithdraw(msg.sender, pid, amount, to);\n  }\n}\n"
    },
    "contracts/interfaces/sushiswap/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewarder {\n    function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;\n    function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/test/sushiswap/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    require((c = a + b) >= b, \"SafeMath: Add Overflow\");\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    require((c = a - b) <= a, \"SafeMath: Underflow\");\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    require(b == 0 || (c = a * b) / b == a, \"SafeMath: Mul Overflow\");\n  }\n\n  function to128(uint256 a) internal pure returns (uint128 c) {\n    require(a <= type(uint128).max, \"SafeMath: uint128 Overflow\");\n    c = uint128(a);\n  }\n}\n\nlibrary SafeMath128 {\n  function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\n    require((c = a + b) >= b, \"SafeMath: Add Overflow\");\n  }\n\n  function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\n    require((c = a - b) <= a, \"SafeMath: Underflow\");\n  }\n}\n"
    },
    "contracts/test/sushiswap/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary SignedSafeMath {\n  int256 private constant _INT256_MIN = -2**255;\n\n  /**\n   * @dev Returns the multiplication of two signed integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `*` operator.\n   *\n   * Requirements:\n   *\n   * - Multiplication cannot overflow.\n   */\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    require(\n      !(a == -1 && b == _INT256_MIN),\n      \"SignedSafeMath: multiplication overflow\"\n    );\n\n    int256 c = a * b;\n    require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two signed integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   *\n   * - The divisor cannot be zero.\n   */\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    require(b != 0, \"SignedSafeMath: division by zero\");\n    require(\n      !(b == -1 && a == _INT256_MIN),\n      \"SignedSafeMath: division overflow\"\n    );\n\n    int256 c = a / b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two signed integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   *\n   * - Subtraction cannot overflow.\n   */\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a - b;\n    require(\n      (b >= 0 && c <= a) || (b < 0 && c > a),\n      \"SignedSafeMath: subtraction overflow\"\n    );\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the addition of two signed integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `+` operator.\n   *\n   * Requirements:\n   *\n   * - Addition cannot overflow.\n   */\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    require(\n      (b >= 0 && c >= a) || (b < 0 && c < a),\n      \"SignedSafeMath: addition overflow\"\n    );\n\n    return c;\n  }\n\n  function toUInt256(int256 a) internal pure returns (uint256) {\n    require(a >= 0, \"Integer < 0\");\n    return uint256(a);\n  }\n}\n"
    },
    "contracts/FeatureVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FeatureVoting is Ownable {\n  using SafeMath for uint256;\n\n  struct Feature {\n    address creator;\n    uint256 votes;\n    string title;\n    bool active;\n    bool finished;\n  }\n\n  IERC20 energy;\n\n  Feature[] public features;\n\n  event FeatureAdded(\n    uint256 indexed index,\n    string title,\n    address indexed creator\n  );\n  event FeatureVoted(\n    address indexed voter,\n    uint256 indexed index,\n    uint256 votes\n  );\n  // Emitted when a feature request changes it's active status.\n  event FeatureStatusUpdated(uint256 indexed index, bool active, bool finished);\n\n  constructor(address _energy) {\n    energy = IERC20(_energy);\n  }\n\n  function totalFeaturesCount() external view returns (uint256 count) {\n    return features.length;\n  }\n\n  function getFeatures() external view returns (Feature[] memory) {\n    return features;\n  }\n\n  function setActive(uint256 _index, bool _active) external onlyOwner {\n    features[_index].active = _active;\n    emit FeatureStatusUpdated(_index, _active, features[_index].finished);\n  }\n\n  function addFeature(string memory _title, uint256 _votes) external returns (uint256 index) {\n    Feature memory feature;\n    feature.creator = msg.sender;\n    feature.active = true;\n    feature.title = _title;\n    features.push(feature);\n\n    index = features.length - 1;\n\n    emit FeatureAdded(index, _title, msg.sender);\n\n    vote(index, _votes);\n  }\n\n  function vote(uint256 _index, uint256 _votes) public {\n    require(features[_index].active, \"Feature is not active\");\n    require(energy.transferFrom(msg.sender, address(this), _votes));\n    features[_index].votes = features[_index].votes.add(_votes);\n\n    emit FeatureVoted(msg.sender, _index, _votes);\n  }\n\n  function featureFinished(uint256 _index) external onlyOwner {\n    require(!features[_index].finished, \"Feature request already finished\");\n    features[_index].finished = true;\n    features[_index].active = false;\n    emit FeatureStatusUpdated(_index, false, true);\n  }\n}\n"
    },
    "contracts/defi/RevoOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/sushiswap/IMiniChefV2.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../interfaces/uniswap/libraries/UniswapV2Library.sol\";\nimport \"./UniswapOperator.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRevoFarmBot.sol\";\n\ncontract RevoOperator is UniswapOperator, Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  IRevoFarmBot public immutable farmBot;\n  IRewarder private rewarder;\n\n  event Deposit(\n    address indexed user,\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    bool indexed swap\n  );\n\n  constructor(\n    address _router,\n    address _factory,\n    address _farmBot,\n    address _rewarder\n  ) UniswapOperator(_router, _factory) {\n    farmBot = IRevoFarmBot(_farmBot);\n    rewarder = IRewarder(_rewarder);\n  }\n\n  receive() external payable {}\n\n  function setRewarder(address _rewarder) public onlyOwner {\n    rewarder = IRewarder(_rewarder);\n  }\n\n  function swapAndZapIn(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin\n  ) external {\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\n    uint256 halfFromAmount = fromAmount / 2;\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\n\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, msg.sender);\n    emit Deposit(msg.sender, from, to, halfFromAmount, toAmount, true);\n  }\n\n  function zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin\n  ) external {\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\n\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, msg.sender);\n    emit Deposit(msg.sender, token0, token1, token0Amount, token1Amount, false);\n  }\n\n  function _zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) internal {\n    _addLiquidityAndDepositInFarm(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin,\n      user\n    );\n\n    rewarder.onReward(\n      user,\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin\n    );\n\n    // Return leftovers\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\n  }\n\n  function _addLiquidityAndDepositInFarm(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) internal {\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\n\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\n    IERC20(lpToken).approve(address(farmBot), lpBalance);\n    farmBot.deposit(lpBalance);\n    uint256 fpBalance = farmBot.balanceOf(address(this));\n    farmBot.transfer(user, fpBalance);\n  }\n}\n"
    },
    "contracts/defi/interfaces/IRevoFarmBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRevoFarmBot is IERC20 {\n  function deposit(uint256 _lpAmount) external;\n}\n"
    },
    "contracts/defi/OperatorProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/ISushiOperator.sol\";\nimport \"./interfaces/IUbeswapOperator.sol\";\n\ncontract OperatorProxy is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  ISushiOperator private sushiOperator;\n  IUbeswapOperator private ubeswapOperator;\n\n  constructor(address _sushiOperator, address _ubeswapOperator) {\n    sushiOperator = ISushiOperator(_sushiOperator);\n    ubeswapOperator = IUbeswapOperator(_ubeswapOperator);\n  }\n\n  function swapAndZapInWithSushiwap(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin,\n    uint256 pid\n  ) external {\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\n    IERC20(from).safeApprove(address(sushiOperator), fromAmount);\n\n    sushiOperator.swapAndZapIn(\n      from,\n      to,\n      fromAmount,\n      minAmountOut,\n      percentMin,\n      pid,\n      msg.sender\n    );\n  }\n\n  function swapAndZapInWithUbeswap(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin\n  ) external {\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\n    IERC20(from).safeApprove(address(ubeswapOperator), fromAmount);\n\n    ubeswapOperator.swapAndZapIn(\n      from,\n      to,\n      fromAmount,\n      minAmountOut,\n      percentMin,\n      msg.sender\n    );\n  }\n\n  function zapInWithSushiswap(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    uint256 pid\n  ) external {\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\n\n    IERC20(token0).safeApprove(address(sushiOperator), token0Amount);\n    IERC20(token1).safeApprove(address(sushiOperator), token1Amount);\n\n    sushiOperator.zapIn(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin,\n      pid,\n      msg.sender\n    );\n  }\n\n  function zapInWithUbeswap(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin\n  ) external {\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\n\n    IERC20(token0).safeApprove(address(ubeswapOperator), token0Amount);\n    IERC20(token1).safeApprove(address(ubeswapOperator), token1Amount);\n\n    ubeswapOperator.zapIn(\n      token0,\n      token1,\n      token0Amount,\n      token1Amount,\n      percentMin,\n      msg.sender\n    );\n  }\n}\n"
    },
    "contracts/defi/interfaces/ISushiOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface ISushiOperator {\n  function swapAndZapIn(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) external;\n\n  function zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    uint256 pid,\n    address user\n  ) external;\n}\n"
    },
    "contracts/defi/interfaces/IUbeswapOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IUbeswapOperator {\n  function swapAndZapIn(\n    address from,\n    address to,\n    uint256 fromAmount,\n    uint256 minAmountOut,\n    uint256 percentMin,\n    address user\n  ) external;\n\n  function zapIn(\n    address token0,\n    address token1,\n    uint256 token0Amount,\n    uint256 token1Amount,\n    uint256 percentMin,\n    address user\n  ) external;\n}\n"
    },
    "contracts/EnergyRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./Energy.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract EnergyRewarder is Ownable {\n  uint256 public dailyReward;\n  Energy public energy;\n\n  mapping(address => uint256) public lastDailyReward;\n\n  constructor(uint256 _dailyReward, address _energy) {\n    dailyReward = _dailyReward;\n    energy = Energy(_energy);\n  }\n\n  function setDailyReward(uint256 _dailyReward) public onlyOwner {\n    dailyReward = _dailyReward;\n  }\n\n  function mintDailyReward() public {\n    require(\n      block.timestamp > lastDailyReward[msg.sender] + 1 days,\n      \"Reward not available yet\"\n    );\n    lastDailyReward[msg.sender] = block.timestamp;\n    energy.mint(msg.sender, dailyReward);\n  }\n}\n"
    },
    "contracts/Energy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract Energy is ERC20, ERC20Burnable, AccessControl {\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n  bytes32 public constant SPENDER_ROLE = keccak256(\"SPENDER_ROLE\");\n\n  constructor() ERC20(\"Energy\", \"NRG\") {\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n\n  function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n    _mint(to, amount);\n  }\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n\n    if (hasRole(SPENDER_ROLE, _msgSender())) {\n      return true;\n    }\n\n    uint256 currentAllowance = allowance(sender, _msgSender());\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n    unchecked {\n      _approve(sender, _msgSender(), currentAllowance - amount);\n    }\n\n    return true;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/test/revo/MockRevoFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IRevoFees.sol\";\n\ncontract MockRevoFees is IRevoFees {\n  TokenAmount[] bonuses;\n\n  uint256 compounderFeeAmount;\n\n  function setCompounderFee(uint256 _compounderFee) external {\n    compounderFeeAmount = _compounderFee;\n  }\n\n  function compounderFee(uint256 _interestAccrued)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return compounderFeeAmount;\n  }\n\n  function compounderBonus(TokenAmount memory _interestAccrued)\n    external\n    view\n    override\n    returns (TokenAmount[] memory)\n  {\n    return new TokenAmount[](0);\n  }\n\n  uint256 reserveFeeAmount;\n\n  function setReserveFee(uint256 _reserveFee) external {\n    reserveFeeAmount = _reserveFee;\n  }\n\n  function reserveFee(uint256 _interestAccrued)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return reserveFeeAmount;\n  }\n\n  uint256 withdrawalFeeNumerator = 25;\n  uint256 withdrawalFeeDenominator = 10000;\n\n  function setWithdrawalFee(uint256 _feeNumerator, uint256 _feeDenominator)\n    public\n  {\n    withdrawalFeeNumerator = _feeNumerator;\n    withdrawalFeeDenominator = _feeDenominator;\n  }\n\n  function withdrawalFee(\n    uint256 interestEarnedNumerator,\n    uint256 interestEarnedDenominator\n  )\n    external\n    view\n    override\n    returns (uint256 feeNumerator, uint256 feeDenominator)\n  {\n    feeNumerator = withdrawalFeeNumerator;\n    feeDenominator = withdrawalFeeDenominator;\n  }\n\n  function issueCompounderBonus(address recipient) external override {\n    return;\n  }\n}\n"
    },
    "contracts/test/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n  constructor(\n    string memory name,\n    string memory symbol,\n    uint256 supply\n  ) ERC20(name, symbol) {\n    _mint(msg.sender, supply);\n  }\n\n  function mint(address _account, uint256 _amount) public {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) public {\n    _burn(_account, _amount);\n  }\n}\n"
    },
    "contracts/test/revo/MockLPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../MockERC20.sol\";\n\ncontract MockLPToken is MockERC20 {\n  address public token0;\n  address public token1;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    address _token0,\n    address _token1,\n    uint256 supply\n  ) MockERC20(name_, symbol_, supply) {\n    token0 = _token0;\n    token1 = _token1;\n  }\n}\n"
    },
    "contracts/test/revo/MockRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IUniswapV2Router01.sol\";\nimport \"./MockLPToken.sol\";\n\ncontract MockRouter is IUniswapV2Router01 {\n  MockLPToken lpToken;\n\n  function factory() external pure override returns (address) {\n    require(false, \"Shouldn't use factory for mock router\");\n    return address(0);\n  }\n\n  uint256 mockLiquidity;\n\n  function setMockLiquidity(uint256 _liquidity) public {\n    mockLiquidity = _liquidity;\n  }\n\n  function setLPToken(address _lpToken) public {\n    lpToken = MockLPToken(_lpToken);\n  }\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    override\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    )\n  {\n    amountA = amountADesired;\n    amountB = amountBDesired;\n    IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);\n    IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);\n    liquidity = mockLiquidity;\n    lpToken.mint(msg.sender, mockLiquidity);\n  }\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external override returns (uint256 amountA, uint256 amountB) {\n    amountA = amountAMin;\n    amountB = amountBMin;\n    lpToken.burn(msg.sender, liquidity);\n    IERC20(tokenA).transfer(msg.sender, amountA);\n    IERC20(tokenB).transfer(msg.sender, amountB);\n  }\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external override returns (uint256 amountA, uint256 amountB) {\n    require(false, \"Not implemented\");\n    amountA = amountAMin;\n    amountB = amountBMin;\n  }\n\n  uint256[] mockAmounts;\n\n  function setMockAmounts(uint256[] memory amounts) public {\n    mockAmounts = new uint256[](amounts.length);\n    for (uint256 idx = 0; idx < amounts.length; idx++) {\n      mockAmounts[idx] = amounts[idx];\n    }\n  }\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external override returns (uint256[] memory amounts) {\n    require(amountIn > 0, \"Cannot swap zero of token\");\n    MockERC20(path[0]).burn(msg.sender, amountIn);\n    amounts = mockAmounts;\n    MockERC20(path[path.length - 1]).mint(\n      msg.sender,\n      amounts[amounts.length - 1]\n    );\n  }\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external override returns (uint256[] memory amounts) {\n    return mockAmounts;\n  }\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure override returns (uint256 amountB) {\n    amountB = (reserveB / reserveA) * amountA;\n  }\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure override returns (uint256 amountOut) {\n    return (reserveOut / reserveIn) * amountIn;\n  }\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure override returns (uint256 amountIn) {\n    return (reserveIn / reserveOut) * amountOut;\n  }\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\n    external\n    view\n    override\n    returns (uint256[] memory amounts)\n  {\n    return mockAmounts;\n  }\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\n    external\n    view\n    override\n    returns (uint256[] memory amounts)\n  {\n    return mockAmounts;\n  }\n}\n"
    },
    "contracts/test/revo/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n  function factory() external pure returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure returns (uint256 amountB);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountIn);\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/test/uniswap/UniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"./UniswapV2Pair.sol\";\n\ncontract UniswapV2Factory is IUniswapV2Factory {\n  address public override feeTo;\n  address public override feeToSetter;\n  address public override migrator;\n\n  mapping(address => mapping(address => address)) public override getPair;\n  address[] public override allPairs;\n\n  constructor(address _feeToSetter) {\n    feeToSetter = _feeToSetter;\n  }\n\n  function allPairsLength() external view override returns (uint256) {\n    return allPairs.length;\n  }\n\n  function createPair(address tokenA, address tokenB)\n    external\n    override\n    returns (address pair)\n  {\n    require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\");\n    (address token0, address token1) = tokenA < tokenB\n      ? (tokenA, tokenB)\n      : (tokenB, tokenA);\n    require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\");\n    require(getPair[token0][token1] == address(0), \"UniswapV2: PAIR_EXISTS\"); // single check is sufficient\n    UniswapV2Pair pairContract = new UniswapV2Pair();\n    pair = address(pairContract);\n    pairContract.initialize(token0, token1);\n    getPair[token0][token1] = pair;\n    getPair[token1][token0] = pair; // populate mapping in the reverse direction\n    allPairs.push(pair);\n    emit PairCreated(token0, token1, pair, allPairs.length);\n  }\n\n  function setFeeTo(address _feeTo) external override {\n    require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\");\n    feeTo = _feeTo;\n  }\n\n  function setMigrator(address _migrator) external override {\n    require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\");\n    migrator = _migrator;\n  }\n\n  function setFeeToSetter(address _feeToSetter) external override {\n    require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\");\n    feeToSetter = _feeToSetter;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}