{
  "address": "0x40334830fF81a5982f4Ad08261c7653dfb61c5eD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "_swappa",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PairGraph",
          "name": "graph",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PairGraph.Path[]",
          "name": "activePath",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensUsed",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PairGraph.Path[]",
          "name": "bestPathSoFar",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutputSoFar",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepsLeft",
          "type": "uint256"
        }
      ],
      "name": "getBestRate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PairGraph.Path[]",
          "name": "bestPath",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PairGraph",
          "name": "graph",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSteps",
          "type": "uint256"
        }
      ],
      "name": "getBestSwapPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PairGraph.Path[]",
          "name": "bestPath",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swappa",
      "outputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9bd7a0ac7ce3eccd7a44f23909ed734c042130793c06fe546ecadaa85fdfb3e",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x40334830fF81a5982f4Ad08261c7653dfb61c5eD",
    "transactionIndex": 2,
    "gasUsed": "1333570",
    "logsBloom": "0x
    "blockHash": "0x82a71b094449a988269e95fa355bd3e218ebc842d8f4ef99fd930e20d735d708",
    "transactionHash": "0xb9bd7a0ac7ce3eccd7a44f23909ed734c042130793c06fe546ecadaa85fdfb3e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14334594,
        "transactionHash": "0xb9bd7a0ac7ce3eccd7a44f23909ed734c042130793c06fe546ecadaa85fdfb3e",
        "address": "0x40334830fF81a5982f4Ad08261c7653dfb61c5eD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x82a71b094449a988269e95fa355bd3e218ebc842d8f4ef99fd930e20d735d708"
      }
    ],
    "blockNumber": 14334594,
    "cumulativeGasUsed": "1563842",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF35ed7156BABF2541E032B3bB8625210316e2832"
  ],
  "numDeployments": 7,
  "solcInputHash": "918616fd7c4076b2042d2b6306e5c01b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"_swappa\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PairGraph\",\"name\":\"graph\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PairGraph.Path[]\",\"name\":\"activePath\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensUsed\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PairGraph.Path[]\",\"name\":\"bestPathSoFar\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutputSoFar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepsLeft\",\"type\":\"uint256\"}],\"name\":\"getBestRate\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PairGraph.Path[]\",\"name\":\"bestPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PairGraph\",\"name\":\"graph\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSteps\",\"type\":\"uint256\"}],\"name\":\"getBestSwapPath\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PairGraph.Path[]\",\"name\":\"bestPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappa\",\"outputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/swappa/PathFinder.sol\":\"PathFinder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISwappaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ISwappaRouterV1 {\\n    function getOutputAmount(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutput(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutputWithPrecheck(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x8ab55f0001f1d7621ac46215cf7945c46682dbe64ccac002766c391d4381e94e\",\"license\":\"MIT\"},\"contracts/swap/swappa/PairGraph.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PairGraph {\\n    event PathAdded(address indexed token0, address indexed token1);\\n    event PathRemoved(address indexed token0, address indexed token1);\\n\\n    struct Path {\\n        address[] path;\\n        address[] pairs;\\n        bytes[] extras;\\n    }\\n\\n    mapping(address => Path[]) private pairsByToken;\\n    mapping(address => bool) public owners;\\n\\n    modifier onlyOwner() {\\n        require(owners[msg.sender], \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owners[msg.sender] = true;\\n    }\\n\\n    function addPair(address from, Path memory pair) public onlyOwner {\\n        pairsByToken[from].push(pair);\\n        emit PathAdded(from, pair.path[1]);\\n    }\\n\\n    function addPairs(address[] memory from, Path[] memory pairs)\\n        external\\n        onlyOwner\\n    {\\n        require(from.length == pairs.length, \\\"Invalid parameters\\\");\\n        for (uint256 i = 0; i < from.length; i++) {\\n            addPair(from[i], pairs[i]);\\n        }\\n    }\\n\\n    function removePair(address from, uint256 index) external onlyOwner {\\n        Path memory pair = pairsByToken[from][index];\\n        pairsByToken[from][index] = pairsByToken[from][\\n            pairsByToken[from].length - 1\\n        ];\\n        pairsByToken[from].pop();\\n        emit PathRemoved(from, pair.path[1]);\\n    }\\n\\n    function getPair(address from, uint256 index)\\n        external\\n        view\\n        returns (Path memory pair)\\n    {\\n        pair = pairsByToken[from][index];\\n    }\\n\\n    function getTokenPairs(address from)\\n        external\\n        view\\n        returns (Path[] memory pairs)\\n    {\\n        pairs = pairsByToken[from];\\n    }\\n\\n    function setOwner(address newOwner, bool isOwner) external onlyOwner {\\n        owners[newOwner] = isOwner;\\n    }\\n\\n    function emergency(address token) external onlyOwner {\\n        ERC20(token).transfer(\\n            msg.sender,\\n            ERC20(token).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4326586398b135a4f23b5ea07e2cfbfeeb1f12a5b32260058031148b0bc91ef2\",\"license\":\"MIT\"},\"contracts/swap/swappa/PathFinder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISwappaRouter.sol\\\";\\nimport \\\"./PairGraph.sol\\\";\\n\\ncontract PathFinder is Ownable {\\n    ISwappaRouterV1 public swappa;\\n\\n    constructor(ISwappaRouterV1 _swappa) {\\n        swappa = _swappa;\\n    }\\n\\n    function getBestSwapPath(\\n        PairGraph graph,\\n        address from,\\n        address to,\\n        uint256 inputAmount,\\n        uint256 maxSteps\\n    )\\n        external\\n        view\\n        returns (PairGraph.Path[] memory bestPath, uint256 bestOutput)\\n    {\\n        require(inputAmount > 0, \\\"inputAmount can't be 0\\\");\\n\\n        address[] memory usedTokens = new address[](1);\\n        usedTokens[0] = from;\\n\\n        (bestPath, bestOutput) = getBestRate(\\n            graph,\\n            from,\\n            inputAmount,\\n            to,\\n            new PairGraph.Path[](0),\\n            usedTokens,\\n            new PairGraph.Path[](0),\\n            0,\\n            maxSteps\\n        );\\n    }\\n\\n    function getBestRate(\\n        PairGraph graph,\\n        address fromToken,\\n        uint256 inputAmount,\\n        address targetToken,\\n        PairGraph.Path[] memory activePath,\\n        address[] memory tokensUsed,\\n        PairGraph.Path[] memory bestPathSoFar,\\n        uint256 bestOutputSoFar,\\n        uint256 stepsLeft\\n    )\\n        public\\n        view\\n        returns (PairGraph.Path[] memory bestPath, uint256 bestOutput)\\n    {\\n        bestPath = bestPathSoFar;\\n        bestOutput = bestOutputSoFar;\\n\\n        PairGraph.Path[] memory pairs = graph.getTokenPairs(fromToken);\\n        if (pairs.length == 0 || stepsLeft == 0) {\\n            return (bestPath, bestOutput);\\n        }\\n\\n        PairGraph.Path[] memory currentPath = new PairGraph.Path[](\\n            activePath.length + 1\\n        );\\n        for (uint256 i = 0; i < activePath.length; i += 1) {\\n            currentPath[i] = activePath[i];\\n        }\\n        address[] memory newTokensUsed = new address[](tokensUsed.length + 1);\\n        for (uint256 i = 0; i < tokensUsed.length; i += 1) {\\n            newTokensUsed[i] = tokensUsed[i];\\n        }\\n\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            PairGraph.Path memory pair = pairs[i];\\n            currentPath[activePath.length] = pair;\\n            uint256 outputAmount = swappa.getOutputAmount(\\n                pair.path,\\n                pair.pairs,\\n                pair.extras,\\n                inputAmount\\n            );\\n            address toToken = pair.path[1];\\n            if (toToken == targetToken) {\\n                if (outputAmount > bestOutput) {\\n                    bestOutput = outputAmount;\\n                    bestPath = copyOfArray(currentPath);\\n                }\\n            } else if (!contains(newTokensUsed, toToken)) {\\n                newTokensUsed[tokensUsed.length] = toToken;\\n                (\\n                    PairGraph.Path[] memory potentialBestPath,\\n                    uint256 potentialBestOutput\\n                ) = getBestRate(\\n                        graph,\\n                        toToken,\\n                        outputAmount,\\n                        targetToken,\\n                        currentPath,\\n                        newTokensUsed,\\n                        bestPath,\\n                        bestOutput,\\n                        stepsLeft - 1\\n                    );\\n                delete newTokensUsed[tokensUsed.length];\\n                if (potentialBestOutput > bestOutput) {\\n                    bestOutput = potentialBestOutput;\\n                    bestPath = potentialBestPath;\\n                }\\n            }\\n        }\\n    }\\n\\n    function contains(address[] memory tokens, address token)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function copyOfArray(PairGraph.Path[] memory original)\\n        private\\n        pure\\n        returns (PairGraph.Path[] memory copy)\\n    {\\n        copy = new PairGraph.Path[](original.length);\\n        for (uint256 i = 0; i < original.length; i += 1) {\\n            copy[i] = original[i];\\n        }\\n    }\\n\\n    function emergency(address token) external onlyOwner {\\n        ERC20(token).transfer(\\n            msg.sender,\\n            ERC20(token).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5e02d28c77ffbba0d6b317f6ecc19f3af6fa5e42e5da8099f7fe0330870f19a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461006757601f61173738819003918201601f19168301916001600160401b0383118484101761006c5780849260209460405283398101031261006757516001600160a01b03811681036100675761005890610082565b60405161166190816100d68239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b60005460018060a01b031991338383161760005560018060a01b0391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a31690600154161760015556fe608080604052600436101561001357600080fd5b6000803560e01c918263056bc3b4146100aa575050806345941ee0146100a1578063715018a6146100985780638576f3e31461008f5780638da5cb5b14610086578063d31f0b231461007d5763f2fde38b14610070575b38600080fd5b610078610a8a565b61006a565b5061007861097a565b50610078610927565b5061007861085f565b506100786102ab565b5061007861013b565b346100f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f85760209073ffffffffffffffffffffffffffffffffffffffff600154168152f35b5080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011a57565b600080fd5b6024359061012c826100fc565b565b6064359061012c826100fc565b503461011a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a5760008161022c60043561017e816100fc565b73ffffffffffffffffffffffffffffffffffffffff906101a2828654163314610b7e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529116908381602481855afa90811561029e575b8591610271575b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610264575b61023e575b005b8161023c92903d1061025d575b61025581836103b9565b810190611613565b503d61024b565b61026c61105a565b610237565b6102919150843d8611610297575b61028981836103b9565b8101906110fb565b386101e8565b503d61027f565b6102a661105a565b6101e1565b503461011a576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103505780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610322338414610b7e565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b6004359061012c826100fc565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176103ac57604052565b6103b4610360565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103ac57604052565b60209067ffffffffffffffff8111610414575b60051b0190565b61041c610360565b61040d565b81601f8201121561011a57803591610438836103fa565b9261044660405194856103b9565b808452602092838086019260051b82010192831161011a578301905b828210610470575050505090565b838091833561047e816100fc565b815201910190610462565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104c5575b01160190565b6104cd610360565b6104bf565b81601f8201121561011a578035906104e9826103fa565b926040926104f9845195866103b9565b808552602093848087019260051b8501019383851161011a57858101925b858410610528575050505050505090565b67ffffffffffffffff843581811161011a57830190606090817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848a03011261011a5785519261057784610390565b8a81013582811161011a57898c61059092840101610421565b84528681013582811161011a57898c6105ab92840101610421565b8b850152828101359082821161011a57019088603f8301121561011a578a820135916105d6836103fa565b936105e3895195866103b9565b838552888d86019460051b830101928b841161011a57918d9694979593918a8201935b83851061062457505050505083945086820152815201930192610517565b9193809698509890929496983582811161011a5784018d605f8201121561011a578f918c8f818401359061066361065a83610489565b935193846103b9565b81835287828601011161011a57848160009289839701838601378301015281520195019290918e979598969492610606565b90815180825260208080930193019160005b8281106106b5575050505090565b835173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016106a7565b918091926000905b8282106106ff5750116106f8575050565b6000910152565b915080602091830151818601520182916106e7565b908082519081815260208091019281808460051b8301019501936000915b8483106107425750505050505090565b9091929394958480806001937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878303018852601f8c5161078f815180928187528780880191016106df565b011601019801930193019194939290610732565b9291906040808501818652825180915260609081870192828260051b890101936020809601936000925b878b8686106107e3575050505050505050930152565b61084f897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa084936001969798999a9b9c030188528a51908661083f61082f84518b85528b850190610695565b8685015184820388860152610695565b9201519087818403910152610714565b98019401940192949391906107cd565b503461011a576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57610898610353565b6108a061011f565b906108a961012e565b67ffffffffffffffff929060843584811161011a576108cc9036906004016104d2565b60a43585811161011a576108e4903690600401610421565b9060c43595861161011a576109006109139636906004016104d2565b92610104359560e4359560443591611177565b90610923604051928392836107a3565b0390f35b503461011a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461011a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a576004356109b6816100fc565b6024356109c2816100fc565b604435916109cf836100fc565b606435908115610a2c57610913936000926109e8610c52565b91610a11866109f685610d0a565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610a19610d57565b9160843596610a26610d57565b95611177565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f696e707574416d6f756e742063616e27742062652030000000000000000000006044820152fd5b503461011a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57600435610ac6816100fc565b73ffffffffffffffffffffffffffffffffffffffff610aea81600054163314610b7e565b811615610afa5761023c90610be3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610b8557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b604051906040820182811067ffffffffffffffff821117610c7e575b6040526001825260203681840137565b610c86610360565b610c6e565b90610c95826103fa565b610ca260405191826103b9565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610cd082946103fa565b0190602036910137565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090805115610d18570190565b610d20610cda565b0190565b604090805160011015610d18570190565b6020918151811015610d4a575b60051b010190565b610d52610cda565b610d42565b6040516020810181811067ffffffffffffffff821117610d7c575b6040526000815290565b610d84610360565b610d72565b90610d93826103fa565b604090610da2825191826103b9565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610dd082956103fa565b019160005b838110610de25750505050565b6020908251606080820182811067ffffffffffffffff821117610e1b575b85528082528390808284015285830152828601015201610dd5565b610e23610360565b610e00565b81601f8201121561011a57805191610e3f836103fa565b92610e4d60405194856103b9565b808452602092838086019260051b82010192831161011a578301905b828210610e77575050505090565b8380918351610e85816100fc565b815201910190610e69565b90602090818382031261011a57825167ffffffffffffffff9384821161011a57019080601f8301121561011a578151610ec8816103fa565b94604090610ed8825197886103b9565b828752858088019360051b8601019484861161011a57868101935b868510610f0557505050505050505090565b845183811161011a5782016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838a03011261011a57855191610f4983610390565b8a81015186811161011a57898c610f6292840101610e28565b83528681015186811161011a57898c610f7d92840101610e28565b8b840152818101519086821161011a57019088603f8301121561011a578a82015190610fa8826103fa565b92610fb5895194856103b9565b828452888d85019360051b820101918b831161011a57908d9593969492918a8201975b838910610ff5575050505083945087820152815201940193610ef3565b90919293959780959750518a811161011a5783018d605f8201121561011a578f918c8f92818101519361102a61065a86610489565b84835286858301011161011a578493611048918786850191016106df565b815201940196949291908e9694610fd8565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81116110c5570190565b610d20611067565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110c5570190565b9081602091031261011a575190565b9493926111366060936111286111449460808a5260808a0190610695565b9088820360208a0152610695565b908682036040880152610714565b930152565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90600181106110c5570190565b6040517f2d57b18500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092166004830152939892969195919390929184816000868060248101038173ffffffffffffffffffffffffffffffffffffffff88165afa958615611536575b600096611511575b508551158015611509575b6114fa57505061121d6112188b51611097565b610d89565b9760005b8b805182101561125a57906112398161125593610d35565b51611244828d610d35565b5261124f818c610d35565b50611097565b611221565b5050909192949698979395976112786112738a51611097565b610c8b565b9a60005b8a518110156112c957806112bf8e6109f6838f61129f6112c4976112b992610d35565b5173ffffffffffffffffffffffffffffffffffffffff1690565b92610d35565b611097565b61127c565b509091929394979a95999896986000996113146112fb60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9a5b81518110156114ea578b8e8b8b8b8f8c908c611332898b610d35565b5161134a8d51826113438287610d35565b5284610d35565b508b81519960209a8b9182850151604086015192611397604051968795869485947fe2f46a000000000000000000000000000000000000000000000000000000000086526004860161110a565b03915afa998a156114dd575b60009a6114b6575b505061129f6113ba9151610d24565b73ffffffffffffffffffffffffffffffffffffffff821673ffffffffffffffffffffffffffffffffffffffff8216146000146114245750505050505050811161140d575b50611408906110cd565b611316565b9d50955061140861141d8b611598565b96906113fe565b8d61143e61143a83899b9a9c9596979899611543565b1590565b611456575b50505050505050505050611408906110cd565b9288928261147a6114809998966114758c99968f6109f690518a610d35565b611149565b97611177565b600091611491919490955190610d35565b5281116114a9575b8f8a8a8f8f958f958d918d611443565b9e50965061140838611499565b6113ba929a5061129f91816114d692903d106102975761028981836103b9565b99916113ab565b6114e561105a565b6113a3565b5050505050509695945050505050565b9a509850919650505050505050565b508a15611205565b61152f9196503d806000833e61152781836103b9565b810190610e90565b94386111fa565b61153e61105a565b6111f2565b9060005b82518110156115905773ffffffffffffffffffffffffffffffffffffffff806115708386610d35565b51169083161461158857611583906110cd565b611547565b505050600190565b505050600090565b906115a38251610d89565b9160005b815181101561160f57806115bd60019284610d35565b516115c88287610d35565b526115d38186610d35565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611602575b016115a7565b61160a611067565b6115fc565b5050565b9081602091031261011a5751801515810361011a579056fea2646970667358221220c84291ea6dc58f39c39b705af252a46bc4a3917d5f5a275037fee5b0215b091364736f6c634300080d0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c918263056bc3b4146100aa575050806345941ee0146100a1578063715018a6146100985780638576f3e31461008f5780638da5cb5b14610086578063d31f0b231461007d5763f2fde38b14610070575b38600080fd5b610078610a8a565b61006a565b5061007861097a565b50610078610927565b5061007861085f565b506100786102ab565b5061007861013b565b346100f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f85760209073ffffffffffffffffffffffffffffffffffffffff600154168152f35b5080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011a57565b600080fd5b6024359061012c826100fc565b565b6064359061012c826100fc565b503461011a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a5760008161022c60043561017e816100fc565b73ffffffffffffffffffffffffffffffffffffffff906101a2828654163314610b7e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529116908381602481855afa90811561029e575b8591610271575b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610264575b61023e575b005b8161023c92903d1061025d575b61025581836103b9565b810190611613565b503d61024b565b61026c61105a565b610237565b6102919150843d8611610297575b61028981836103b9565b8101906110fb565b386101e8565b503d61027f565b6102a661105a565b6101e1565b503461011a576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103505780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610322338414610b7e565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b6004359061012c826100fc565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176103ac57604052565b6103b4610360565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103ac57604052565b60209067ffffffffffffffff8111610414575b60051b0190565b61041c610360565b61040d565b81601f8201121561011a57803591610438836103fa565b9261044660405194856103b9565b808452602092838086019260051b82010192831161011a578301905b828210610470575050505090565b838091833561047e816100fc565b815201910190610462565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104c5575b01160190565b6104cd610360565b6104bf565b81601f8201121561011a578035906104e9826103fa565b926040926104f9845195866103b9565b808552602093848087019260051b8501019383851161011a57858101925b858410610528575050505050505090565b67ffffffffffffffff843581811161011a57830190606090817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848a03011261011a5785519261057784610390565b8a81013582811161011a57898c61059092840101610421565b84528681013582811161011a57898c6105ab92840101610421565b8b850152828101359082821161011a57019088603f8301121561011a578a820135916105d6836103fa565b936105e3895195866103b9565b838552888d86019460051b830101928b841161011a57918d9694979593918a8201935b83851061062457505050505083945086820152815201930192610517565b9193809698509890929496983582811161011a5784018d605f8201121561011a578f918c8f818401359061066361065a83610489565b935193846103b9565b81835287828601011161011a57848160009289839701838601378301015281520195019290918e979598969492610606565b90815180825260208080930193019160005b8281106106b5575050505090565b835173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016106a7565b918091926000905b8282106106ff5750116106f8575050565b6000910152565b915080602091830151818601520182916106e7565b908082519081815260208091019281808460051b8301019501936000915b8483106107425750505050505090565b9091929394958480806001937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878303018852601f8c5161078f815180928187528780880191016106df565b011601019801930193019194939290610732565b9291906040808501818652825180915260609081870192828260051b890101936020809601936000925b878b8686106107e3575050505050505050930152565b61084f897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa084936001969798999a9b9c030188528a51908661083f61082f84518b85528b850190610695565b8685015184820388860152610695565b9201519087818403910152610714565b98019401940192949391906107cd565b503461011a576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57610898610353565b6108a061011f565b906108a961012e565b67ffffffffffffffff929060843584811161011a576108cc9036906004016104d2565b60a43585811161011a576108e4903690600401610421565b9060c43595861161011a576109006109139636906004016104d2565b92610104359560e4359560443591611177565b90610923604051928392836107a3565b0390f35b503461011a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461011a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a576004356109b6816100fc565b6024356109c2816100fc565b604435916109cf836100fc565b606435908115610a2c57610913936000926109e8610c52565b91610a11866109f685610d0a565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610a19610d57565b9160843596610a26610d57565b95611177565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f696e707574416d6f756e742063616e27742062652030000000000000000000006044820152fd5b503461011a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011a57600435610ac6816100fc565b73ffffffffffffffffffffffffffffffffffffffff610aea81600054163314610b7e565b811615610afa5761023c90610be3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610b8557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b604051906040820182811067ffffffffffffffff821117610c7e575b6040526001825260203681840137565b610c86610360565b610c6e565b90610c95826103fa565b610ca260405191826103b9565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610cd082946103fa565b0190602036910137565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090805115610d18570190565b610d20610cda565b0190565b604090805160011015610d18570190565b6020918151811015610d4a575b60051b010190565b610d52610cda565b610d42565b6040516020810181811067ffffffffffffffff821117610d7c575b6040526000815290565b610d84610360565b610d72565b90610d93826103fa565b604090610da2825191826103b9565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610dd082956103fa565b019160005b838110610de25750505050565b6020908251606080820182811067ffffffffffffffff821117610e1b575b85528082528390808284015285830152828601015201610dd5565b610e23610360565b610e00565b81601f8201121561011a57805191610e3f836103fa565b92610e4d60405194856103b9565b808452602092838086019260051b82010192831161011a578301905b828210610e77575050505090565b8380918351610e85816100fc565b815201910190610e69565b90602090818382031261011a57825167ffffffffffffffff9384821161011a57019080601f8301121561011a578151610ec8816103fa565b94604090610ed8825197886103b9565b828752858088019360051b8601019484861161011a57868101935b868510610f0557505050505050505090565b845183811161011a5782016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838a03011261011a57855191610f4983610390565b8a81015186811161011a57898c610f6292840101610e28565b83528681015186811161011a57898c610f7d92840101610e28565b8b840152818101519086821161011a57019088603f8301121561011a578a82015190610fa8826103fa565b92610fb5895194856103b9565b828452888d85019360051b820101918b831161011a57908d9593969492918a8201975b838910610ff5575050505083945087820152815201940193610ef3565b90919293959780959750518a811161011a5783018d605f8201121561011a578f918c8f92818101519361102a61065a86610489565b84835286858301011161011a578493611048918786850191016106df565b815201940196949291908e9694610fd8565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81116110c5570190565b610d20611067565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110c5570190565b9081602091031261011a575190565b9493926111366060936111286111449460808a5260808a0190610695565b9088820360208a0152610695565b908682036040880152610714565b930152565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90600181106110c5570190565b6040517f2d57b18500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092166004830152939892969195919390929184816000868060248101038173ffffffffffffffffffffffffffffffffffffffff88165afa958615611536575b600096611511575b508551158015611509575b6114fa57505061121d6112188b51611097565b610d89565b9760005b8b805182101561125a57906112398161125593610d35565b51611244828d610d35565b5261124f818c610d35565b50611097565b611221565b5050909192949698979395976112786112738a51611097565b610c8b565b9a60005b8a518110156112c957806112bf8e6109f6838f61129f6112c4976112b992610d35565b5173ffffffffffffffffffffffffffffffffffffffff1690565b92610d35565b611097565b61127c565b509091929394979a95999896986000996113146112fb60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9a5b81518110156114ea578b8e8b8b8b8f8c908c611332898b610d35565b5161134a8d51826113438287610d35565b5284610d35565b508b81519960209a8b9182850151604086015192611397604051968795869485947fe2f46a000000000000000000000000000000000000000000000000000000000086526004860161110a565b03915afa998a156114dd575b60009a6114b6575b505061129f6113ba9151610d24565b73ffffffffffffffffffffffffffffffffffffffff821673ffffffffffffffffffffffffffffffffffffffff8216146000146114245750505050505050811161140d575b50611408906110cd565b611316565b9d50955061140861141d8b611598565b96906113fe565b8d61143e61143a83899b9a9c9596979899611543565b1590565b611456575b50505050505050505050611408906110cd565b9288928261147a6114809998966114758c99968f6109f690518a610d35565b611149565b97611177565b600091611491919490955190610d35565b5281116114a9575b8f8a8a8f8f958f958d918d611443565b9e50965061140838611499565b6113ba929a5061129f91816114d692903d106102975761028981836103b9565b99916113ab565b6114e561105a565b6113a3565b5050505050509695945050505050565b9a509850919650505050505050565b508a15611205565b61152f9196503d806000833e61152781836103b9565b810190610e90565b94386111fa565b61153e61105a565b6111f2565b9060005b82518110156115905773ffffffffffffffffffffffffffffffffffffffff806115708386610d35565b51169083161461158857611583906110cd565b611547565b505050600190565b505050600090565b906115a38251610d89565b9160005b815181101561160f57806115bd60019284610d35565b516115c88287610d35565b526115d38186610d35565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611602575b016115a7565b61160a611067565b6115fc565b5050565b9081602091031261011a5751801515810361011a579056fea2646970667358221220c84291ea6dc58f39c39b705af252a46bc4a3917d5f5a275037fee5b0215b091364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/swap/swappa/PathFinder.sol:PathFinder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16076,
        "contract": "contracts/swap/swappa/PathFinder.sol:PathFinder",
        "label": "swappa",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISwappaRouterV1)5326"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwappaRouterV1)5326": {
        "encoding": "inplace",
        "label": "contract ISwappaRouterV1",
        "numberOfBytes": "20"
      }
    }
  }
}