{
  "address": "0x62d60427307BB0208eB0869bDBf343D8D108d8ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "_swappa",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "PathAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "PathRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pairs",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "extras",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct PathFinder.Path",
              "name": "path",
              "type": "tuple"
            }
          ],
          "internalType": "struct PathFinder.Pair",
          "name": "pair",
          "type": "tuple"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pairs",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "extras",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct PathFinder.Path",
              "name": "path",
              "type": "tuple"
            }
          ],
          "internalType": "struct PathFinder.Pair[]",
          "name": "pairs",
          "type": "tuple[]"
        }
      ],
      "name": "addPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PathFinder.Path[]",
          "name": "activePath",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensUsed",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PathFinder.Path[]",
          "name": "bestPathSoFar",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutputSoFar",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepsLeft",
          "type": "uint256"
        }
      ],
      "name": "getBestRate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PathFinder.Path[]",
          "name": "bestPath",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSteps",
          "type": "uint256"
        }
      ],
      "name": "getBestSwapPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PathFinder.Path[]",
          "name": "bestPath",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "bestOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pairs",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "extras",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct PathFinder.Path",
              "name": "path",
              "type": "tuple"
            }
          ],
          "internalType": "struct PathFinder.Pair",
          "name": "pair",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getTokenPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pairs",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "extras",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct PathFinder.Path",
              "name": "path",
              "type": "tuple"
            }
          ],
          "internalType": "struct PathFinder.Pair[]",
          "name": "pairs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairsByToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "extras",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct PathFinder.Path",
          "name": "path",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOwner",
          "type": "bool"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swappa",
      "outputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xadd72c171fd64fd5fdfae79721c54d09d6f128047a9ff356f1c6bf699268321e",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x62d60427307BB0208eB0869bDBf343D8D108d8ab",
    "transactionIndex": 10,
    "gasUsed": "2234086",
    "logsBloom": "0x
    "blockHash": "0xef2bbd89ef0ced295f9620e2ce57998064331fdf4dc3eb57c2aa6c13c0e6a008",
    "transactionHash": "0xadd72c171fd64fd5fdfae79721c54d09d6f128047a9ff356f1c6bf699268321e",
    "logs": [],
    "blockNumber": 14280956,
    "cumulativeGasUsed": "7255051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF35ed7156BABF2541E032B3bB8625210316e2832"
  ],
  "numDeployments": 3,
  "solcInputHash": "66594bbc67fefded4b5eb4f22201cd8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"_swappa\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PathAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PathRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path\",\"name\":\"path\",\"type\":\"tuple\"}],\"internalType\":\"struct PathFinder.Pair\",\"name\":\"pair\",\"type\":\"tuple\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path\",\"name\":\"path\",\"type\":\"tuple\"}],\"internalType\":\"struct PathFinder.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"addPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path[]\",\"name\":\"activePath\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensUsed\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path[]\",\"name\":\"bestPathSoFar\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutputSoFar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepsLeft\",\"type\":\"uint256\"}],\"name\":\"getBestRate\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path[]\",\"name\":\"bestPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSteps\",\"type\":\"uint256\"}],\"name\":\"getBestSwapPath\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path[]\",\"name\":\"bestPath\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"bestOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path\",\"name\":\"path\",\"type\":\"tuple\"}],\"internalType\":\"struct PathFinder.Pair\",\"name\":\"pair\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getTokenPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path\",\"name\":\"path\",\"type\":\"tuple\"}],\"internalType\":\"struct PathFinder.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairsByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"internalType\":\"struct PathFinder.Path\",\"name\":\"path\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappa\",\"outputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/PathFinder.sol\":\"PathFinder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISwappaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ISwappaRouterV1 {\\n    function getOutputAmount(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutput(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutputWithPrecheck(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x8ab55f0001f1d7621ac46215cf7945c46682dbe64ccac002766c391d4381e94e\",\"license\":\"MIT\"},\"contracts/swap/PathFinder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/ISwappaRouter.sol\\\";\\n\\ncontract PathFinder {\\n    event PathAdded(address indexed token0, address indexed token1);\\n    event PathRemoved(address indexed token0, address indexed token1);\\n\\n    struct Path {\\n        address[] path;\\n        address[] pairs;\\n        bytes[] extras;\\n    }\\n\\n    struct Pair {\\n        address toToken;\\n        Path path;\\n    }\\n\\n    ISwappaRouterV1 public swappa;\\n    mapping(address => Pair[]) public pairsByToken;\\n    mapping(address => bool) public owners;\\n\\n    modifier onlyOwner() {\\n        require(owners[msg.sender], \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(ISwappaRouterV1 _swappa) {\\n        swappa = _swappa;\\n        owners[msg.sender] = true;\\n    }\\n\\n    function addPair(address from, Pair memory pair) public onlyOwner {\\n        pairsByToken[from].push(pair);\\n        emit PathAdded(from, pair.toToken);\\n    }\\n\\n    function addPairs(address[] memory from, Pair[] memory pairs)\\n        external\\n        onlyOwner\\n    {\\n        require(from.length == pairs.length, \\\"Invalid parameters\\\");\\n        for (uint256 i = 0; i < from.length; i++) {\\n            addPair(from[i], pairs[i]);\\n        }\\n    }\\n\\n    function removePair(address from, uint256 index) external onlyOwner {\\n        Pair memory pair = pairsByToken[from][index];\\n        pairsByToken[from][index] = pairsByToken[from][\\n            pairsByToken[from].length - 1\\n        ];\\n        delete pairsByToken[from][pairsByToken[from].length - 1];\\n        emit PathRemoved(from, pair.toToken);\\n    }\\n\\n    function getPair(address from, uint256 index)\\n        external\\n        view\\n        onlyOwner\\n        returns (Pair memory pair)\\n    {\\n        pair = pairsByToken[from][index];\\n    }\\n\\n    function getTokenPairs(address from)\\n        external\\n        view\\n        onlyOwner\\n        returns (Pair[] memory pairs)\\n    {\\n        pairs = pairsByToken[from];\\n    }\\n\\n    function getBestSwapPath(\\n        address from,\\n        address to,\\n        uint256 inputAmount,\\n        uint256 maxSteps\\n    ) external view returns (Path[] memory bestPath, uint256 bestOutput) {\\n        require(inputAmount > 0, \\\"inputAmount can't be 0\\\");\\n\\n        (bestPath, bestOutput) = getBestRate(\\n            from,\\n            inputAmount,\\n            to,\\n            new Path[](0),\\n            new address[](0),\\n            new Path[](0),\\n            0,\\n            maxSteps\\n        );\\n    }\\n\\n    function getBestRate(\\n        address fromToken,\\n        uint256 inputAmount,\\n        address targetToken,\\n        Path[] memory activePath,\\n        address[] memory tokensUsed,\\n        Path[] memory bestPathSoFar,\\n        uint256 bestOutputSoFar,\\n        uint256 stepsLeft\\n    ) public view returns (Path[] memory bestPath, uint256 bestOutput) {\\n        bestPath = bestPathSoFar;\\n        bestOutput = bestOutputSoFar;\\n\\n        Pair[] memory pairs = pairsByToken[fromToken];\\n        if (pairs.length == 0 || stepsLeft == 0) {\\n            return (bestPath, bestOutput);\\n        }\\n\\n        Path[] memory currentPath = new Path[](activePath.length + 1);\\n        for (uint256 i = 0; i < activePath.length; i += 1) {\\n            currentPath[i] = activePath[i];\\n        }\\n        address[] memory newTokensUsed = new address[](tokensUsed.length + 1);\\n        for (uint256 i = 0; i < tokensUsed.length; i += 1) {\\n            newTokensUsed[i] = tokensUsed[i];\\n        }\\n\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            Pair memory pair = pairs[i];\\n            currentPath[activePath.length] = pair.path;\\n            uint256 outputAmount = swappa.getOutputAmount(\\n                pair.path.path,\\n                pair.path.pairs,\\n                pair.path.extras,\\n                inputAmount\\n            );\\n            if (pair.toToken == targetToken) {\\n                if (outputAmount > bestOutput) {\\n                    bestOutput = outputAmount;\\n                    bestPath = copyOfArray(currentPath);\\n                }\\n            } else if (!contains(newTokensUsed, pair.toToken)) {\\n                newTokensUsed[tokensUsed.length] = pair.toToken;\\n                (\\n                    Path[] memory potentialBestPath,\\n                    uint256 potentialBestOutput\\n                ) = getBestRate(\\n                        pair.toToken,\\n                        outputAmount,\\n                        targetToken,\\n                        currentPath,\\n                        newTokensUsed,\\n                        bestPath,\\n                        bestOutput,\\n                        stepsLeft - 1\\n                    );\\n                delete newTokensUsed[tokensUsed.length];\\n                if (potentialBestOutput > bestOutput) {\\n                    bestOutput = potentialBestOutput;\\n                    // Could use pointer if needed, but gas cost is not a concern.\\n                    bestPath = potentialBestPath;\\n                }\\n            }\\n        }\\n    }\\n\\n    function contains(address[] memory tokens, address token)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function copyOfArray(Path[] memory original)\\n        private\\n        pure\\n        returns (Path[] memory copy)\\n    {\\n        copy = new Path[](original.length);\\n        for (uint256 i = 0; i < original.length; i += 1) {\\n            copy[i] = original[i];\\n        }\\n    }\\n\\n    function setOwner(address newOwner, bool isOwner) external onlyOwner {\\n        owners[newOwner] = isOwner;\\n    }\\n\\n    function emergency(address token) external onlyOwner {\\n        ERC20(token).transfer(\\n            msg.sender,\\n            ERC20(token).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x006334d923d64809cd793c33be9fe4cf7aaabe1f601117f03c7cf2362eb0650e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461009457601f61276e38819003918201601f19168301916001600160401b038311848410176100995780849260209460405283398101031261009457516001600160a01b038116810361009457600080546001600160a01b0319166001600160a01b03909216919091178155338152600260205260409020805460ff191660011790556040516126be90816100b08239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c80626349fb14610102578063022914a7146100f9578063056bc3b4146100f057806311a7cc58146100e75780632599c037146100de5780632d57b185146100d55780633ad2fc7e146100cc57806345941ee0146100c3578063516c731c146100ba578063752756d2146100b1578063a618c8be146100a85763d293dcac146100a057600080fd5b61000e6112fe565b5061000e611224565b5061000e61111d565b5061000e610e2e565b5061000e610cb0565b5061000e610c08565b5061000e610812565b5061000e6105d8565b5061000e6104de565b5061000e61040a565b5061000e61039f565b5061000e6102de565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b90815180825260208080930193019160005b828110610192575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610184565b6101cf8151606084526060840190610172565b60406101e76020928385015186820385880152610172565b92015192604081840391015282518083528183019180808360051b860101950193600090815b84831061021e575050505050505090565b90919293949596847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403018952895180519081855285905b8282106102915750938392601f83859460019811610285575b011601019901970195949301919061020d565b88858286010152610272565b808201850151868301860152899490910190610259565b90604060206102db9373ffffffffffffffffffffffffffffffffffffffff815116845201519181602082015201906101bc565b90565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff61032b61010b565b6040516103378161090f565b600081526020610345611fb2565b91015233600052600260205261036260ff604060002054166114e0565b16600052600160205261039b6103876103816024356040600020610f15565b50611bb8565b6040519182916020835260208301906102a8565b0390f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff6103ec61010b565b166000526002602052602060ff604060002054166040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b929190604084016040855281518091526060850160608260051b870101916020809401916000905b85838310610497575050505050930152565b806104d0877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08d6001969798999a0301865288516101bc565b960192019201909291610485565b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761051661010b565b60243573ffffffffffffffffffffffffffffffffffffffff8116810361000e5760443590811561057a5761056a9260009161054f612027565b6105576120a7565b9160643595610564612027565b94612249565b9061039b6040519283928361045d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f696e707574416d6f756e742063616e27742062652030000000000000000000006044820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761061061010b565b60243590600091338352600260205261062f60ff6040852054166114e0565b61076773ffffffffffffffffffffffffffffffffffffffff9161074d6107478486169586885260016020526106f061066d6103818660408c20610f15565b94888a5260016020526106ea6106b960408c206106b36106ad8773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b54611bee565b90610f15565b50916106e58573ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b610f15565b90611e4b565b6106b36106ad6107208373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b90611ef4565b5173ffffffffffffffffffffffffffffffffffffffff1690565b16604051917fb587708c0c36e35a3cf979ae37357379b3271d408983a4d3eaaeb0a32f18f4578484a3f35b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106107c65750505050505090565b9091929394958480610802837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a516102a8565b98019301930191949392906107b6565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761084b61010b565b73ffffffffffffffffffffffffffffffffffffffff6000913383526002845261087a60ff6040852054166114e0565b16815260019182815260408220805491610893836109b1565b936108a16040519586610970565b8385529182528082208185015b8484106108c3576040518061039b8882610792565b60048388926108d185611bb8565b8152019201930192906108ae565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761092b57604052565b6109336108df565b604052565b6060810190811067ffffffffffffffff82111761092b57604052565b6020810190811067ffffffffffffffff82111761092b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761092b57604052565b60209067ffffffffffffffff81116109cb575b60051b0190565b6109d36108df565b6109c4565b81601f8201121561000e578035916109ef836109b1565b926109fd6040519485610970565b808452602092838086019260051b82010192831161000e578301905b828210610a27575050505090565b838091610a3384610151565b815201910190610a19565b919060608382031261000e5760408051610a5781610938565b8094803567ffffffffffffffff9081811161000e5785610a789184016109d8565b83526020918281013582811161000e5786610a949183016109d8565b83850152848101359082821161000e570190601f86818401121561000e57823590610abe826109b1565b97610acb8851998a610970565b82895285808a019360051b8601019481861161000e57868101935b868510610af95750505050505050500152565b843586811161000e57820183603f8201121561000e578881013591878311610b7a575b8b51610b4e8b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0898701160182610970565b838152858d858501011161000e5760008b858f9682978397018386013783010152815201940193610ae6565b610b826108df565b610b1c565b9080601f8301121561000e57813590610b9f826109b1565b92610bad6040519485610970565b828452602092838086019160051b8301019280841161000e57848301915b848310610bdb5750505050505090565b823567ffffffffffffffff811161000e578691610bfd84848094890101610a3e565b815201920191610bcb565b503461000e576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610c4161010b565b610c4961012e565b67ffffffffffffffff9160643583811161000e57610c6b903690600401610b87565b60843584811161000e57610c839036906004016109d8565b60a43594851161000e57610c9e61056a953690600401610b87565b9160e4359460c4359460243590612249565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600081610da573ffffffffffffffffffffffffffffffffffffffff610d0461010b565b33855260028452610d1b60ff6040872054166114e0565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529116908381602481855afa908115610e17575b8591610dea575b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610ddd575b610db7575b005b81610db592903d10610dd6575b610dce8183610970565b810190612673565b503d610dc4565b610de561223c565b610db0565b610e0a9150843d8611610e10575b610e028183610970565b81019061213e565b38610d61565b503d610df8565b610e1f61223c565b610d5a565b8015150361000e57565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610e6661010b565b73ffffffffffffffffffffffffffffffffffffffff60243591610e8883610e24565b336000526002602052610ea260ff604060002054166114e0565b16600052600260205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911515161790556000604051f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054821015610f32575b60005260206000209060021b0190600090565b610f3a610ee5565b610f1f565b9060405191828154918282526020928383019160005283600020936000905b828210610f7657505050610f7492500383610970565b565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190610f5e565b90600182811c92168015610fef575b6020831014610fc057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610fb5565b9060409182519261100984610938565b8361101383610f3f565b815260016002611024828601610f3f565b946020958685015201805490611039826109b1565b9561104686519788610970565b8287526000918252808220828289015b85851061106857505050505050500152565b86848a519284938c875461107b81610fa6565b808452918187169182156110e75750506001146110af575b506110a18185960382610970565b815201930194019391611056565b8787528387208796505b8187106110d05750509384018201936110a1611093565b805483880186015293909501948b948994016110b9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686850152830196506110a191506110939050565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761115561010b565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526001602052604060002090815481101561000e576111966001916111a293610f15565b50928354169201610ff9565b9061039b60405192839283526040602084015260408301906101bc565b91909160408184031261000e57604080519167ffffffffffffffff91830182811184821017611217575b60405282946111f782610151565b8452602082013592831161000e576020926112129201610a3e565b910152565b61121f6108df565b6111e9565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff60043581811161000e576112759036906004016109d8565b602490813583811161000e573660238201121561000e5780600401359261129b846109b1565b936112a96040519586610970565b808552602095828787019260051b8501019336851161000e57838101925b8584106112d857610db58888611a83565b833583811161000e5789916112f383928836918701016111bf565b8152019301926112c7565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761133661010b565b60243567ffffffffffffffff811161000e576113569036906004016111bf565b6000913383526020916002835261137360ff6040862054166114e0565b73ffffffffffffffffffffffffffffffffffffffff8092169283855260018082526113ba60408720805490680100000000000000008210156114d3575b8382018155610f15565b9290926114c6575b61140a85855116849073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b818301918185015192835190838251926114248484611753565b01908a52838a208a915b83831061148b575050505050916003604083611457611460979661074d9601516002860161179a565b0151910161190c565b16604051917f17ed27dcef84ead41686b613072d97aecf1fbfabfe0b3ee5e874d6fa0c7deac78484a3f35b8486828c839451167fffffffffffffffffffffffff00000000000000000000000000000000000000008654161785550192019201919061142e565b6114ce6116b8565b6113c2565b6114db6108df565b6113b0565b156114e757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006044820152fd5b906000913383526020916002835261156360ff6040862054166114e0565b73ffffffffffffffffffffffffffffffffffffffff8092169283855260018082526115a960408720805490680100000000000000008210156114d3578382018155610f15565b9290926116ab575b6115f985855116849073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b818301918185015192835190838251926116138484611753565b01908a52838a208a915b83831061167057505050505061166892600360408461145761074d957f17ed27dcef84ead41686b613072d97aecf1fbfabfe0b3ee5e874d6fa0c7deac79a999701516002860161179a565b1692604051a3565b8486828c839451167fffffffffffffffffffffffff00000000000000000000000000000000000000008654161785550192019201919061161d565b6116b36116b8565b6115b1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818110611723575050565b60008155600101611718565b8054600082558061173e575050565b610f7491600052602060002090810190611718565b9068010000000000000000811161178d575b81549080835581811061177757505050565b610f749260005260206000209182019101611718565b6117956108df565b611765565b8151916117a78383611753565b602080910191600052806000206000925b8484106117c6575050505050565b6001838273ffffffffffffffffffffffffffffffffffffffff839451167fffffffffffffffffffffffff0000000000000000000000000000000000000000865416178555019201930192906117b8565b6801000000000000000082116118ba575b80549180825582811061183957505050565b60009182526020822092830192015b82811061185457505050565b8061186160019254610fa6565b8061186e575b5001611848565b601f9081811184146118865750508281555b38611867565b836118a89261189a85600052602060002090565b920160051c82019101611718565b60008181526020812081835555611880565b6118c26108df565b611827565b9190601f81116118d657505050565b610f74926000526020600020906020601f840160051c83019310611902575b601f0160051c0190611718565b90915081906118f5565b9080519061191a8284611816565b600092835260208084209091849083015b84861061193a57505050505050565b83815180519067ffffffffffffffff8211611a76575b6119648261195e8854610fa6565b886118c7565b8290601f83116001146119c95791806001959286959488926119be575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82861b9260031b1c19161786555b0193019501949161192b565b015190503880611981565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316916119fd88600052602060002090565b92875b818110611a5e5750916001969391858897969410611a27575b505050831b830186556119b2565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611a19565b8284015185558a966001909501949384019301611a00565b611a7e6108df565b611950565b919091336000526002602052611aa060ff604060002054166114e0565b8051835103611afe5760005b8151811015611af85780611aee73ffffffffffffffffffffffffffffffffffffffff611adb611af39486611b96565b5116611ae78388611b96565b5190611545565b611b5c565b611aac565b50509050565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611b8a570190565b611b926116e8565b0190565b6020918151811015611bab575b60051b010190565b611bb3610ee5565b611ba3565b90604051611bc58161090f565b60206112126001839573ffffffffffffffffffffffffffffffffffffffff815416855201610ff9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110611b8a570190565b818114611c9f5781549167ffffffffffffffff8311611c92575b611c408383611753565b60005260206000209060005260206000208154916000925b848410611c66575050505050565b600173ffffffffffffffffffffffffffffffffffffffff81921692019384549281850155019290611c58565b611c9a6108df565b611c36565b5050565b919091828114611df457611cb78354610fa6565b67ffffffffffffffff8111611de7575b611cdb81611cd58454610fa6565b846118c7565b600093601f8211600114611d34579381929394600092611d29575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b015490503880611cf6565b611d667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831691600052602060002090565b94611d7684600052602060002090565b91815b818110611dcf57509583600195969710611d98575b505050811b019055565b01547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611d8e565b87830154845560019384019390920191602001611d79565b611def6108df565b611cc7565b509050565b818114611c9f57815491611e0d8383611816565b6000526020600020906000526020600020906000905b838210611e305750505050565b80611e3d60019285611ca3565b928101929181019101611e23565b90611ee7575b818103611e5c575050565b815481547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161781556001810160018301808203611eb4575b50505050565b611ede93611ec6600393928493611c1c565b611ed66002820160028601611c1c565b019101611df9565b38808080611eae565b611eef6116b8565b611e51565b90611fa5575b60008082556003600192611f0f84820161172f565b611f1b6002820161172f565b019081549181815582611f2e5750505050565b81526020808220928301925b838110611f475750611eae565b80611f53869254610fa6565b80611f60575b5001611f3a565b601f9083828211600114611f7b575050508381555b38611f59565b611f9392848852868820920160051c82019101611718565b60008181526020812081835555611f75565b611fad6116b8565b611efa565b60405190611fbf82610938565b60606040838281528260208201520152565b908154611fdd816109b1565b92611feb6040519485610970565b818452600090815260208082208186015b84841061200a575050505050565b60048360019261201985611bb8565b815201920193019290611ffc565b60405161203381610954565b6000815290565b90612044826109b1565b6120516040519182610970565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061207f82946109b1565b019060005b82811061209057505050565b60209061209b611fb2565b82828501015201612084565b604051906120b482610954565b6000808352366020840137565b906120cb826109b1565b6120d86040519182610970565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061210682946109b1565b0190602036910137565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611b8a570190565b9081602091031261000e575190565b9493929061216661217591608088526080880190610172565b60209387820385890152610172565b91858303604087015281518084528184019180808360051b870101940194600090815b8483106121ae5750505050505060609150930152565b909192939495847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403018952895180519081855285905b8282106122255750938392601f83859460019811612219575b01160101990197019301919096959694939294612198565b88858286010152612201565b8082018501518683018601528994909101906121e8565b506040513d6000823e3d90fd5b929790949196829661228461227f829673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b611fd1565b93845115801561259f575b6125915750506122a76122a28a51612110565b61203a565b9660005b8a518110156122e357806122c26122de928d611b96565b516122cd828c611b96565b526122d8818b611b96565b50612110565b6122ab565b509091939597969294966122ff6122fa8951612110565b6120c1565b9960005b895181101561235157806123478d61232c836123268f61234c9761074d91611b96565b92611b96565b9073ffffffffffffffffffffffffffffffffffffffff169052565b612110565b612303565b50909192939699949897959760009861239a6123818b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b995b8151811015612582578a8d88888b8e8a8f6123b7898b611b96565b51908b8d60209a8b916123dd8387019182519051906123d6828c611b96565b5289611b96565b505190815183830151906124256040809501519451968795869485947fe2f46a000000000000000000000000000000000000000000000000000000000086526004860161214d565b03915afa998a15612575575b60009a612556575b5050815173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff818116908516036124a85750505050505050508111612491575b5061248c90611b5c565b61239c565b9c50945061248c6124a18a6125fc565b9590612482565b6124bc6124c0918798999a9b9596976125a7565b1590565b6124d7575b50505050505050505061248c90611b5c565b9161251b6125158361074d6125219b9a989661232c61250d8f9c9a985173ffffffffffffffffffffffffffffffffffffffff1690565b91518a611b96565b97611bee565b96612249565b909160006125308d518d611b96565b528111612549575b878f928d898c948f8f9450806124c5565b9d50955061248c38612538565b61256d929a50803d10610e1057610e028183610970565b973880612439565b61257d61223c565b612431565b50505050509695945050505050565b995097509095505050505050565b50821561228f565b9060005b82518110156125f45773ffffffffffffffffffffffffffffffffffffffff806125d48386611b96565b5116908316146125ec576125e790611b5c565b6125ab565b505050600190565b505050600090565b90612607825161203a565b9160005b8151811015611c9f578061262160019284611b96565b5161262c8287611b96565b526126378186611b96565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111612666575b0161260b565b61266e6116e8565b612660565b9081602091031261000e57516102db81610e2456fea26469706673582212203929f88e09c17321b900ff9ba554b66a975834f98c15608fdd77d13e0d5d6faf64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80626349fb14610102578063022914a7146100f9578063056bc3b4146100f057806311a7cc58146100e75780632599c037146100de5780632d57b185146100d55780633ad2fc7e146100cc57806345941ee0146100c3578063516c731c146100ba578063752756d2146100b1578063a618c8be146100a85763d293dcac146100a057600080fd5b61000e6112fe565b5061000e611224565b5061000e61111d565b5061000e610e2e565b5061000e610cb0565b5061000e610c08565b5061000e610812565b5061000e6105d8565b5061000e6104de565b5061000e61040a565b5061000e61039f565b5061000e6102de565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b90815180825260208080930193019160005b828110610192575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610184565b6101cf8151606084526060840190610172565b60406101e76020928385015186820385880152610172565b92015192604081840391015282518083528183019180808360051b860101950193600090815b84831061021e575050505050505090565b90919293949596847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403018952895180519081855285905b8282106102915750938392601f83859460019811610285575b011601019901970195949301919061020d565b88858286010152610272565b808201850151868301860152899490910190610259565b90604060206102db9373ffffffffffffffffffffffffffffffffffffffff815116845201519181602082015201906101bc565b90565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff61032b61010b565b6040516103378161090f565b600081526020610345611fb2565b91015233600052600260205261036260ff604060002054166114e0565b16600052600160205261039b6103876103816024356040600020610f15565b50611bb8565b6040519182916020835260208301906102a8565b0390f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff6103ec61010b565b166000526002602052602060ff604060002054166040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b929190604084016040855281518091526060850160608260051b870101916020809401916000905b85838310610497575050505050930152565b806104d0877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08d6001969798999a0301865288516101bc565b960192019201909291610485565b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761051661010b565b60243573ffffffffffffffffffffffffffffffffffffffff8116810361000e5760443590811561057a5761056a9260009161054f612027565b6105576120a7565b9160643595610564612027565b94612249565b9061039b6040519283928361045d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f696e707574416d6f756e742063616e27742062652030000000000000000000006044820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761061061010b565b60243590600091338352600260205261062f60ff6040852054166114e0565b61076773ffffffffffffffffffffffffffffffffffffffff9161074d6107478486169586885260016020526106f061066d6103818660408c20610f15565b94888a5260016020526106ea6106b960408c206106b36106ad8773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b54611bee565b90610f15565b50916106e58573ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b610f15565b90611e4b565b6106b36106ad6107208373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b90611ef4565b5173ffffffffffffffffffffffffffffffffffffffff1690565b16604051917fb587708c0c36e35a3cf979ae37357379b3271d408983a4d3eaaeb0a32f18f4578484a3f35b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106107c65750505050505090565b9091929394958480610802837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a516102a8565b98019301930191949392906107b6565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761084b61010b565b73ffffffffffffffffffffffffffffffffffffffff6000913383526002845261087a60ff6040852054166114e0565b16815260019182815260408220805491610893836109b1565b936108a16040519586610970565b8385529182528082208185015b8484106108c3576040518061039b8882610792565b60048388926108d185611bb8565b8152019201930192906108ae565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761092b57604052565b6109336108df565b604052565b6060810190811067ffffffffffffffff82111761092b57604052565b6020810190811067ffffffffffffffff82111761092b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761092b57604052565b60209067ffffffffffffffff81116109cb575b60051b0190565b6109d36108df565b6109c4565b81601f8201121561000e578035916109ef836109b1565b926109fd6040519485610970565b808452602092838086019260051b82010192831161000e578301905b828210610a27575050505090565b838091610a3384610151565b815201910190610a19565b919060608382031261000e5760408051610a5781610938565b8094803567ffffffffffffffff9081811161000e5785610a789184016109d8565b83526020918281013582811161000e5786610a949183016109d8565b83850152848101359082821161000e570190601f86818401121561000e57823590610abe826109b1565b97610acb8851998a610970565b82895285808a019360051b8601019481861161000e57868101935b868510610af95750505050505050500152565b843586811161000e57820183603f8201121561000e578881013591878311610b7a575b8b51610b4e8b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0898701160182610970565b838152858d858501011161000e5760008b858f9682978397018386013783010152815201940193610ae6565b610b826108df565b610b1c565b9080601f8301121561000e57813590610b9f826109b1565b92610bad6040519485610970565b828452602092838086019160051b8301019280841161000e57848301915b848310610bdb5750505050505090565b823567ffffffffffffffff811161000e578691610bfd84848094890101610a3e565b815201920191610bcb565b503461000e576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610c4161010b565b610c4961012e565b67ffffffffffffffff9160643583811161000e57610c6b903690600401610b87565b60843584811161000e57610c839036906004016109d8565b60a43594851161000e57610c9e61056a953690600401610b87565b9160e4359460c4359460243590612249565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600081610da573ffffffffffffffffffffffffffffffffffffffff610d0461010b565b33855260028452610d1b60ff6040872054166114e0565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529116908381602481855afa908115610e17575b8591610dea575b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610ddd575b610db7575b005b81610db592903d10610dd6575b610dce8183610970565b810190612673565b503d610dc4565b610de561223c565b610db0565b610e0a9150843d8611610e10575b610e028183610970565b81019061213e565b38610d61565b503d610df8565b610e1f61223c565b610d5a565b8015150361000e57565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610e6661010b565b73ffffffffffffffffffffffffffffffffffffffff60243591610e8883610e24565b336000526002602052610ea260ff604060002054166114e0565b16600052600260205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911515161790556000604051f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054821015610f32575b60005260206000209060021b0190600090565b610f3a610ee5565b610f1f565b9060405191828154918282526020928383019160005283600020936000905b828210610f7657505050610f7492500383610970565b565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190610f5e565b90600182811c92168015610fef575b6020831014610fc057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610fb5565b9060409182519261100984610938565b8361101383610f3f565b815260016002611024828601610f3f565b946020958685015201805490611039826109b1565b9561104686519788610970565b8287526000918252808220828289015b85851061106857505050505050500152565b86848a519284938c875461107b81610fa6565b808452918187169182156110e75750506001146110af575b506110a18185960382610970565b815201930194019391611056565b8787528387208796505b8187106110d05750509384018201936110a1611093565b805483880186015293909501948b948994016110b9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686850152830196506110a191506110939050565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761115561010b565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526001602052604060002090815481101561000e576111966001916111a293610f15565b50928354169201610ff9565b9061039b60405192839283526040602084015260408301906101bc565b91909160408184031261000e57604080519167ffffffffffffffff91830182811184821017611217575b60405282946111f782610151565b8452602082013592831161000e576020926112129201610a3e565b910152565b61121f6108df565b6111e9565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff60043581811161000e576112759036906004016109d8565b602490813583811161000e573660238201121561000e5780600401359261129b846109b1565b936112a96040519586610970565b808552602095828787019260051b8501019336851161000e57838101925b8584106112d857610db58888611a83565b833583811161000e5789916112f383928836918701016111bf565b8152019301926112c7565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761133661010b565b60243567ffffffffffffffff811161000e576113569036906004016111bf565b6000913383526020916002835261137360ff6040862054166114e0565b73ffffffffffffffffffffffffffffffffffffffff8092169283855260018082526113ba60408720805490680100000000000000008210156114d3575b8382018155610f15565b9290926114c6575b61140a85855116849073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b818301918185015192835190838251926114248484611753565b01908a52838a208a915b83831061148b575050505050916003604083611457611460979661074d9601516002860161179a565b0151910161190c565b16604051917f17ed27dcef84ead41686b613072d97aecf1fbfabfe0b3ee5e874d6fa0c7deac78484a3f35b8486828c839451167fffffffffffffffffffffffff00000000000000000000000000000000000000008654161785550192019201919061142e565b6114ce6116b8565b6113c2565b6114db6108df565b6113b0565b156114e757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006044820152fd5b906000913383526020916002835261156360ff6040862054166114e0565b73ffffffffffffffffffffffffffffffffffffffff8092169283855260018082526115a960408720805490680100000000000000008210156114d3578382018155610f15565b9290926116ab575b6115f985855116849073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b818301918185015192835190838251926116138484611753565b01908a52838a208a915b83831061167057505050505061166892600360408461145761074d957f17ed27dcef84ead41686b613072d97aecf1fbfabfe0b3ee5e874d6fa0c7deac79a999701516002860161179a565b1692604051a3565b8486828c839451167fffffffffffffffffffffffff00000000000000000000000000000000000000008654161785550192019201919061161d565b6116b36116b8565b6115b1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818110611723575050565b60008155600101611718565b8054600082558061173e575050565b610f7491600052602060002090810190611718565b9068010000000000000000811161178d575b81549080835581811061177757505050565b610f749260005260206000209182019101611718565b6117956108df565b611765565b8151916117a78383611753565b602080910191600052806000206000925b8484106117c6575050505050565b6001838273ffffffffffffffffffffffffffffffffffffffff839451167fffffffffffffffffffffffff0000000000000000000000000000000000000000865416178555019201930192906117b8565b6801000000000000000082116118ba575b80549180825582811061183957505050565b60009182526020822092830192015b82811061185457505050565b8061186160019254610fa6565b8061186e575b5001611848565b601f9081811184146118865750508281555b38611867565b836118a89261189a85600052602060002090565b920160051c82019101611718565b60008181526020812081835555611880565b6118c26108df565b611827565b9190601f81116118d657505050565b610f74926000526020600020906020601f840160051c83019310611902575b601f0160051c0190611718565b90915081906118f5565b9080519061191a8284611816565b600092835260208084209091849083015b84861061193a57505050505050565b83815180519067ffffffffffffffff8211611a76575b6119648261195e8854610fa6565b886118c7565b8290601f83116001146119c95791806001959286959488926119be575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82861b9260031b1c19161786555b0193019501949161192b565b015190503880611981565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316916119fd88600052602060002090565b92875b818110611a5e5750916001969391858897969410611a27575b505050831b830186556119b2565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611a19565b8284015185558a966001909501949384019301611a00565b611a7e6108df565b611950565b919091336000526002602052611aa060ff604060002054166114e0565b8051835103611afe5760005b8151811015611af85780611aee73ffffffffffffffffffffffffffffffffffffffff611adb611af39486611b96565b5116611ae78388611b96565b5190611545565b611b5c565b611aac565b50509050565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611b8a570190565b611b926116e8565b0190565b6020918151811015611bab575b60051b010190565b611bb3610ee5565b611ba3565b90604051611bc58161090f565b60206112126001839573ffffffffffffffffffffffffffffffffffffffff815416855201610ff9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110611b8a570190565b818114611c9f5781549167ffffffffffffffff8311611c92575b611c408383611753565b60005260206000209060005260206000208154916000925b848410611c66575050505050565b600173ffffffffffffffffffffffffffffffffffffffff81921692019384549281850155019290611c58565b611c9a6108df565b611c36565b5050565b919091828114611df457611cb78354610fa6565b67ffffffffffffffff8111611de7575b611cdb81611cd58454610fa6565b846118c7565b600093601f8211600114611d34579381929394600092611d29575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b015490503880611cf6565b611d667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831691600052602060002090565b94611d7684600052602060002090565b91815b818110611dcf57509583600195969710611d98575b505050811b019055565b01547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611d8e565b87830154845560019384019390920191602001611d79565b611def6108df565b611cc7565b509050565b818114611c9f57815491611e0d8383611816565b6000526020600020906000526020600020906000905b838210611e305750505050565b80611e3d60019285611ca3565b928101929181019101611e23565b90611ee7575b818103611e5c575050565b815481547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161781556001810160018301808203611eb4575b50505050565b611ede93611ec6600393928493611c1c565b611ed66002820160028601611c1c565b019101611df9565b38808080611eae565b611eef6116b8565b611e51565b90611fa5575b60008082556003600192611f0f84820161172f565b611f1b6002820161172f565b019081549181815582611f2e5750505050565b81526020808220928301925b838110611f475750611eae565b80611f53869254610fa6565b80611f60575b5001611f3a565b601f9083828211600114611f7b575050508381555b38611f59565b611f9392848852868820920160051c82019101611718565b60008181526020812081835555611f75565b611fad6116b8565b611efa565b60405190611fbf82610938565b60606040838281528260208201520152565b908154611fdd816109b1565b92611feb6040519485610970565b818452600090815260208082208186015b84841061200a575050505050565b60048360019261201985611bb8565b815201920193019290611ffc565b60405161203381610954565b6000815290565b90612044826109b1565b6120516040519182610970565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061207f82946109b1565b019060005b82811061209057505050565b60209061209b611fb2565b82828501015201612084565b604051906120b482610954565b6000808352366020840137565b906120cb826109b1565b6120d86040519182610970565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061210682946109b1565b0190602036910137565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611b8a570190565b9081602091031261000e575190565b9493929061216661217591608088526080880190610172565b60209387820385890152610172565b91858303604087015281518084528184019180808360051b870101940194600090815b8483106121ae5750505050505060609150930152565b909192939495847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080858403018952895180519081855285905b8282106122255750938392601f83859460019811612219575b01160101990197019301919096959694939294612198565b88858286010152612201565b8082018501518683018601528994909101906121e8565b506040513d6000823e3d90fd5b929790949196829661228461227f829673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b611fd1565b93845115801561259f575b6125915750506122a76122a28a51612110565b61203a565b9660005b8a518110156122e357806122c26122de928d611b96565b516122cd828c611b96565b526122d8818b611b96565b50612110565b6122ab565b509091939597969294966122ff6122fa8951612110565b6120c1565b9960005b895181101561235157806123478d61232c836123268f61234c9761074d91611b96565b92611b96565b9073ffffffffffffffffffffffffffffffffffffffff169052565b612110565b612303565b50909192939699949897959760009861239a6123818b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b995b8151811015612582578a8d88888b8e8a8f6123b7898b611b96565b51908b8d60209a8b916123dd8387019182519051906123d6828c611b96565b5289611b96565b505190815183830151906124256040809501519451968795869485947fe2f46a000000000000000000000000000000000000000000000000000000000086526004860161214d565b03915afa998a15612575575b60009a612556575b5050815173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff818116908516036124a85750505050505050508111612491575b5061248c90611b5c565b61239c565b9c50945061248c6124a18a6125fc565b9590612482565b6124bc6124c0918798999a9b9596976125a7565b1590565b6124d7575b50505050505050505061248c90611b5c565b9161251b6125158361074d6125219b9a989661232c61250d8f9c9a985173ffffffffffffffffffffffffffffffffffffffff1690565b91518a611b96565b97611bee565b96612249565b909160006125308d518d611b96565b528111612549575b878f928d898c948f8f9450806124c5565b9d50955061248c38612538565b61256d929a50803d10610e1057610e028183610970565b973880612439565b61257d61223c565b612431565b50505050509695945050505050565b995097509095505050505050565b50821561228f565b9060005b82518110156125f45773ffffffffffffffffffffffffffffffffffffffff806125d48386611b96565b5116908316146125ec576125e790611b5c565b6125ab565b505050600190565b505050600090565b90612607825161203a565b9160005b8151811015611c9f578061262160019284611b96565b5161262c8287611b96565b526126378186611b96565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111612666575b0161260b565b61266e6116e8565b612660565b9081602091031261000e57516102db81610e2456fea26469706673582212203929f88e09c17321b900ff9ba554b66a975834f98c15608fdd77d13e0d5d6faf64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10995,
        "contract": "contracts/swap/PathFinder.sol:PathFinder",
        "label": "swappa",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwappaRouterV1)5326"
      },
      {
        "astId": 11001,
        "contract": "contracts/swap/PathFinder.sol:PathFinder",
        "label": "pairsByToken",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Pair)10992_storage)dyn_storage)"
      },
      {
        "astId": 11005,
        "contract": "contracts/swap/PathFinder.sol:PathFinder",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pair)10992_storage)dyn_storage": {
        "base": "t_struct(Pair)10992_storage",
        "encoding": "dynamic_array",
        "label": "struct PathFinder.Pair[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ISwappaRouterV1)5326": {
        "encoding": "inplace",
        "label": "contract ISwappaRouterV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Pair)10992_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PathFinder.Pair[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Pair)10992_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Pair)10992_storage": {
        "encoding": "inplace",
        "label": "struct PathFinder.Pair",
        "members": [
          {
            "astId": 10988,
            "contract": "contracts/swap/PathFinder.sol:PathFinder",
            "label": "toToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10991,
            "contract": "contracts/swap/PathFinder.sol:PathFinder",
            "label": "path",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Path)10986_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Path)10986_storage": {
        "encoding": "inplace",
        "label": "struct PathFinder.Path",
        "members": [
          {
            "astId": 10979,
            "contract": "contracts/swap/PathFinder.sol:PathFinder",
            "label": "path",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10982,
            "contract": "contracts/swap/PathFinder.sol:PathFinder",
            "label": "pairs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10985,
            "contract": "contracts/swap/PathFinder.sol:PathFinder",
            "label": "extras",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}