{
  "address": "0x501B570e2BbC8b9656b747e273942472f699F6CF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWormhole",
          "name": "_wormhole",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetGasTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "destinationChain",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "sendGas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setChainIdEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setGasTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x005a5426af2296df15474d1af69c44387dc581131e716214a8530a7d00e8d491",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0x501B570e2BbC8b9656b747e273942472f699F6CF",
    "transactionIndex": 1,
    "gasUsed": "753478",
    "logsBloom": "0x
    "blockHash": "0xa3f2affedb945d6e05b9603e806f8f1b96e82c65acc17c98117d22e00e2e1e41",
    "transactionHash": "0x005a5426af2296df15474d1af69c44387dc581131e716214a8530a7d00e8d491",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13913757,
        "transactionHash": "0x005a5426af2296df15474d1af69c44387dc581131e716214a8530a7d00e8d491",
        "address": "0x501B570e2BbC8b9656b747e273942472f699F6CF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa3f2affedb945d6e05b9603e806f8f1b96e82c65acc17c98117d22e00e2e1e41"
      }
    ],
    "blockNumber": 13913757,
    "cumulativeGasUsed": "952764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa321448d90d4e5b0A732867c18eA198e75CAC48E",
    "0x60D3e18c57C9b1ec4e09F255aAB959F58FA1A724"
  ],
  "numDeployments": 3,
  "solcInputHash": "673098036d4b69ee8a65828aef73ae19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"_wormhole\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetGasTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"destinationChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"sendGas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setChainIdEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setGasTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Responsible of charging users and emitting a message so that gas is sent to them in the destination chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/GasBridgeCashier.sol\":\"GasBridgeCashier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridge/GasBridgeCashier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/wormhole/IWormhole.sol\\\";\\n\\n/// Responsible of charging users and emitting a message so that gas is sent to them in the destination chain.\\ncontract GasBridgeCashier is Ownable {\\n    event SetChainId(uint16 indexed chainId, bool enabled);\\n    event SetTreasuryAddress(address indexed treasury);\\n    event SetGasTokenPrice(address indexed token, uint256 price);\\n\\n    /// How many units of the gas token are required to bridge.\\n    mapping(address => uint256) gasTokenPrices;\\n    mapping(uint16 => bool) chainIds;\\n    IWormhole wormhole;\\n    address treasury;\\n\\n    constructor(IWormhole _wormhole, address _treasury) {\\n        wormhole = _wormhole;\\n        treasury = _treasury;\\n    }\\n\\n    receive() external payable {}\\n\\n    function sendGas(\\n        bytes32 recipient,\\n        uint16 destinationChain,\\n        address paymentToken,\\n        uint32 nonce\\n    ) external returns (uint64 sequence) {\\n        require(chainIds[destinationChain], \\\"Can't send to that chain id\\\");\\n\\n        require(gasTokenPrices[paymentToken] > 0, \\\"Token not enabled\\\");\\n        require(\\n            IERC20(paymentToken).transferFrom(\\n                msg.sender,\\n                treasury,\\n                gasTokenPrices[paymentToken]\\n            ),\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        bytes memory payload = abi.encode(recipient, destinationChain);\\n\\n        sequence = wormhole.publishMessage(nonce, payload, 1);\\n        return sequence;\\n    }\\n\\n    function setGasTokenPrice(address token, uint256 value) external onlyOwner {\\n        gasTokenPrices[token] = value;\\n        emit SetGasTokenPrice(token, value);\\n    }\\n\\n    function setChainIdEnabled(uint16 chainId, bool enabled)\\n        external\\n        onlyOwner\\n    {\\n        chainIds[chainId] = enabled;\\n        emit SetChainId(chainId, enabled);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n        emit SetTreasuryAddress(_treasury);\\n    }\\n}\\n\",\"keccak256\":\"0x916468dff7ec6ad9cc28fdfbad38565ac4df1d514d20125aeb696d34201cea7e\",\"license\":\"MIT\"},\"contracts/interfaces/wormhole/IWormhole.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IWormhole is Structs {\\n    event LogMessagePublished(\\n        address indexed sender,\\n        uint64 sequence,\\n        uint32 nonce,\\n        bytes payload,\\n        uint8 consistencyLevel\\n    );\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (\\n            Structs.VM memory vm,\\n            bool valid,\\n            string memory reason\\n        );\\n\\n    function verifyVM(Structs.VM memory vm)\\n        external\\n        view\\n        returns (bool valid, string memory reason);\\n\\n    function verifySignatures(\\n        bytes32 hash,\\n        Structs.Signature[] memory signatures,\\n        Structs.GuardianSet memory guardianSet\\n    ) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM)\\n        external\\n        pure\\n        returns (Structs.VM memory vm);\\n\\n    function getGuardianSet(uint32 index)\\n        external\\n        view\\n        returns (Structs.GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf2177dda8dd8a109b4dd8c181657886b1b3267871cd2f78fe9e757678835daf\",\"license\":\"Apache 2\"},\"contracts/interfaces/wormhole/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface Structs {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n    }\\n\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n}\\n\",\"keccak256\":\"0x280a693d4ed71744d067ee7d71fb58fd4ee59f0dceb7ae7e831ece86d01dc03e\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x60803461006f57601f610c8238819003918201601f19168301916001600160401b0383118484101761007457808492604094855283398101031261006f5780602061006092519161004f8361008a565b01519061005b8261008a565b61009b565b604051610b7e90816101048239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381160361006f57565b600080546001600160a01b031980821633908117845560405191956001600160a01b0395909486949193918516917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3168360035416176003551690600454161760045556fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908162c7514d146100a9575080633126c458146100a0578063715018a6146100975780638da5cb5b1461008e578063f0f4426014610085578063f2fde38b1461007c5763f5d79f1e0361000e57610077610732565b61000e565b50610077610638565b50610077610585565b50610077610532565b5061007761048d565b506100776101a5565b346101465760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610146576100e0610149565b7f93a7e331365c1ab8f122074d7bae0664c16da9bfbcda540f87c22308a651c0dd60206024359273ffffffffffffffffffffffffffffffffffffffff9061012b828754163314610808565b169283855260018252806040862055604051908152a2604051f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361016c57565b600080fd5b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361016c57565b6024359061ffff8216820361016c57565b503461016c5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c576101dd610194565b6101e5610171565b60643563ffffffff8116810361016c5761020d8361ffff166000526002602052604060002090565b5460ff1661021a906108dc565b6102448273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b54151561025090610941565b60045473ffffffffffffffffffffffffffffffffffffffff166102938373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff928316602482015260448101919091526020938492839183916064918391165a90600091f1928315610415966103236103e4966103459561037194610480575b600091610453575b50610a3b565b60405193849160043587840190929161ffff6020916040840195845216910152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836109a6565b6103ac61039360035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9060006040518096819582947fb19a437e00000000000000000000000000000000000000000000000000000000845260048401610ac0565b03925af1918215610446575b600092610419575b505060405167ffffffffffffffff90911681529081906020820190565b0390f35b6104389250803d1061043f575b61043081836109a6565b810190610aa0565b38806103f8565b503d610426565b61044e610a2e565b6103f0565b6104739150873d8911610479575b61046b81836109a6565b810190610a16565b3861031d565b503d610461565b610488610a2e565b610315565b503461016c576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101465780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610504338414610808565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016c5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c5760006105bf610149565b73ffffffffffffffffffffffffffffffffffffffff906105e3828454163314610808565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006004541617600455604051907feee016301a2725a577c64816adf35ccf644d07439731069a31748ec3b9102c608383a2f35b503461016c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c57610670610149565b73ffffffffffffffffffffffffffffffffffffffff61069481600054163314610808565b8116156106a4576100199061086d565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8015150361016c57565b503461016c5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c5760043561ffff811680910361016c577f5e32c2fe8a7859a4486621f9da07f4492e3788837b81fbf11078f7f5a3de79f760206024356107a081610728565b6107c373ffffffffffffffffffffffffffffffffffffffff600054163314610808565b83600052600282526040600020901515907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8316179055604051908152a2005b1561080f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156108e357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e27742073656e6420746f207468617420636861696e20696400000000006044820152fd5b1561094857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6b656e206e6f7420656e61626c65640000000000000000000000000000006044820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109e757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261016c5751610a2b81610728565b90565b506040513d6000823e3d90fd5b15610a4257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b9081602091031261016c575167ffffffffffffffff8116810361016c5790565b92919063ffffffff16835260206060818501528151918260608601526000915b838310610b3257505060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460019560409511610b25575b0116850101930152565b600084828a010152610b1b565b8183018101518684016080015291820191610ae056fea264697066735822122012943c8c3d3f5c86b4c5f0c722eebe1de1bdce82348b5654901ed75516ccf7ff64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908162c7514d146100a9575080633126c458146100a0578063715018a6146100975780638da5cb5b1461008e578063f0f4426014610085578063f2fde38b1461007c5763f5d79f1e0361000e57610077610732565b61000e565b50610077610638565b50610077610585565b50610077610532565b5061007761048d565b506100776101a5565b346101465760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610146576100e0610149565b7f93a7e331365c1ab8f122074d7bae0664c16da9bfbcda540f87c22308a651c0dd60206024359273ffffffffffffffffffffffffffffffffffffffff9061012b828754163314610808565b169283855260018252806040862055604051908152a2604051f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361016c57565b600080fd5b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361016c57565b6024359061ffff8216820361016c57565b503461016c5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c576101dd610194565b6101e5610171565b60643563ffffffff8116810361016c5761020d8361ffff166000526002602052604060002090565b5460ff1661021a906108dc565b6102448273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b54151561025090610941565b60045473ffffffffffffffffffffffffffffffffffffffff166102938373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff928316602482015260448101919091526020938492839183916064918391165a90600091f1928315610415966103236103e4966103459561037194610480575b600091610453575b50610a3b565b60405193849160043587840190929161ffff6020916040840195845216910152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836109a6565b6103ac61039360035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9060006040518096819582947fb19a437e00000000000000000000000000000000000000000000000000000000845260048401610ac0565b03925af1918215610446575b600092610419575b505060405167ffffffffffffffff90911681529081906020820190565b0390f35b6104389250803d1061043f575b61043081836109a6565b810190610aa0565b38806103f8565b503d610426565b61044e610a2e565b6103f0565b6104739150873d8911610479575b61046b81836109a6565b810190610a16565b3861031d565b503d610461565b610488610a2e565b610315565b503461016c576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101465780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610504338414610808565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461016c5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c5760006105bf610149565b73ffffffffffffffffffffffffffffffffffffffff906105e3828454163314610808565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006004541617600455604051907feee016301a2725a577c64816adf35ccf644d07439731069a31748ec3b9102c608383a2f35b503461016c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c57610670610149565b73ffffffffffffffffffffffffffffffffffffffff61069481600054163314610808565b8116156106a4576100199061086d565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8015150361016c57565b503461016c5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c5760043561ffff811680910361016c577f5e32c2fe8a7859a4486621f9da07f4492e3788837b81fbf11078f7f5a3de79f760206024356107a081610728565b6107c373ffffffffffffffffffffffffffffffffffffffff600054163314610808565b83600052600282526040600020901515907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8316179055604051908152a2005b1561080f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156108e357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e27742073656e6420746f207468617420636861696e20696400000000006044820152fd5b1561094857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6b656e206e6f7420656e61626c65640000000000000000000000000000006044820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109e757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261016c5751610a2b81610728565b90565b506040513d6000823e3d90fd5b15610a4257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b9081602091031261016c575167ffffffffffffffff8116810361016c5790565b92919063ffffffff16835260206060818501528151918260608601526000915b838310610b3257505060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460019560409511610b25575b0116850101930152565b600084828a010152610b1b565b8183018101518684016080015291820191610ae056fea264697066735822122012943c8c3d3f5c86b4c5f0c722eebe1de1bdce82348b5654901ed75516ccf7ff64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Responsible of charging users and emitting a message so that gas is sent to them in the destination chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/bridge/GasBridgeCashier.sol:GasBridgeCashier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2919,
        "contract": "contracts/bridge/GasBridgeCashier.sol:GasBridgeCashier",
        "label": "gasTokenPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2923,
        "contract": "contracts/bridge/GasBridgeCashier.sol:GasBridgeCashier",
        "label": "chainIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bool)"
      },
      {
        "astId": 2926,
        "contract": "contracts/bridge/GasBridgeCashier.sol:GasBridgeCashier",
        "label": "wormhole",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWormhole)6804"
      },
      {
        "astId": 2928,
        "contract": "contracts/bridge/GasBridgeCashier.sol:GasBridgeCashier",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWormhole)6804": {
        "encoding": "inplace",
        "label": "contract IWormhole",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}