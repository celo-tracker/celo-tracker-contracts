{
  "address": "0xa1e1769896Aec0092e118B89dDf031Dde9f46042",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmBot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "swap",
          "type": "bool"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmBot",
      "outputs": [
        {
          "internalType": "contract IRevoFarmBot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        }
      ],
      "name": "swapAndZapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentMin",
          "type": "uint256"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3032688138e0963095bb9341c5c12176275d46b357134ca21db04cbb3beca3d9",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0xa1e1769896Aec0092e118B89dDf031Dde9f46042",
    "transactionIndex": 4,
    "gasUsed": "1675598",
    "logsBloom": "0x
    "blockHash": "0xce8b3dc0d39a2fb9298a48f96eb202019b925751c8a7696a35312dc440191687",
    "transactionHash": "0x3032688138e0963095bb9341c5c12176275d46b357134ca21db04cbb3beca3d9",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 12961986,
        "transactionHash": "0x3032688138e0963095bb9341c5c12176275d46b357134ca21db04cbb3beca3d9",
        "address": "0xa1e1769896Aec0092e118B89dDf031Dde9f46042",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0xce8b3dc0d39a2fb9298a48f96eb202019b925751c8a7696a35312dc440191687"
      }
    ],
    "blockNumber": 12961986,
    "cumulativeGasUsed": "3219963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121",
    "0x62d5b84bE28a183aBB507E125B384122D2C25fAE",
    "0xCB34fbfC3b9a73bc04D2eb43B62532c7918d9E81",
    "0x08da61b51AAcEB6DCf147A3a682BA8121158366F"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5f4a56fc0d021f11bf3d7ca12a2d904",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmBot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmBot\",\"outputs\":[{\"internalType\":\"contract IRevoFarmBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"}],\"name\":\"swapAndZapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentMin\",\"type\":\"uint256\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/defi/RevoOperator.sol\":\"RevoOperator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/defi/RevoOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\nimport \\\"./UniswapOperator.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IRevoFarmBot.sol\\\";\\n\\ncontract RevoOperator is UniswapOperator, Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IRevoFarmBot public immutable farmBot;\\n  IRewarder private rewarder;\\n\\n  event Deposit(\\n    address indexed user,\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    bool indexed swap\\n  );\\n\\n  constructor(\\n    address _router,\\n    address _factory,\\n    address _farmBot,\\n    address _rewarder\\n  ) UniswapOperator(_router, _factory) {\\n    farmBot = IRevoFarmBot(_farmBot);\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  receive() external payable {}\\n\\n  function setRewarder(address _rewarder) public onlyOwner {\\n    rewarder = IRewarder(_rewarder);\\n  }\\n\\n  function swapAndZapIn(\\n    address from,\\n    address to,\\n    uint256 fromAmount,\\n    uint256 minAmountOut,\\n    uint256 percentMin\\n  ) external {\\n    IERC20(from).safeTransferFrom(msg.sender, address(this), fromAmount);\\n    uint256 halfFromAmount = fromAmount / 2;\\n    uint256 toAmount = _swapUsingPool(from, to, halfFromAmount, minAmountOut);\\n\\n    _zapIn(from, to, halfFromAmount, toAmount, percentMin, msg.sender);\\n    emit Deposit(msg.sender, from, to, halfFromAmount, toAmount, true);\\n  }\\n\\n  function zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) external {\\n    IERC20(token0).safeTransferFrom(msg.sender, address(this), token0Amount);\\n    IERC20(token1).safeTransferFrom(msg.sender, address(this), token1Amount);\\n\\n    _zapIn(token0, token1, token0Amount, token1Amount, percentMin, msg.sender);\\n    emit Deposit(msg.sender, token0, token1, token0Amount, token1Amount, false);\\n  }\\n\\n  function _zapIn(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    address user\\n  ) internal {\\n    _addLiquidityAndDepositInFarm(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin,\\n      user\\n    );\\n\\n    rewarder.onReward(\\n      user,\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      percentMin\\n    );\\n\\n    // Return leftovers\\n    IERC20(token0).transfer(user, IERC20(token0).balanceOf(address(this)));\\n    IERC20(token1).transfer(user, IERC20(token1).balanceOf(address(this)));\\n  }\\n\\n  function _addLiquidityAndDepositInFarm(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin,\\n    address user\\n  ) internal {\\n    _addLiquidity(token0, token1, token0Amount, token1Amount, percentMin);\\n\\n    address lpToken = UniswapV2Library.pairFor(factory, token0, token1);\\n    uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\\n    IERC20(lpToken).approve(address(farmBot), lpBalance);\\n    farmBot.deposit(lpBalance);\\n    uint256 fpBalance = farmBot.balanceOf(address(this));\\n    farmBot.transfer(user, fpBalance);\\n  }\\n}\\n\",\"keccak256\":\"0x54c271b702149a839b6f2bb2c4c6cd4b3934f4476303b9afb1a59e3f823a4be6\",\"license\":\"MIT\"},\"contracts/defi/UniswapOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/libraries/UniswapV2Library.sol\\\";\\n\\ncontract UniswapOperator {\\n  using SafeMath for uint256;\\n\\n  address public immutable router;\\n  address public immutable factory;\\n\\n  constructor(address _router, address _factory) {\\n    router = _router;\\n    factory = _factory;\\n  }\\n\\n  function _swapUsingPool(\\n    address from,\\n    address to,\\n    uint256 inputAmount,\\n    uint256 minAmountOut\\n  ) internal returns (uint256 outAmount) {\\n    address pairAddress = UniswapV2Library.pairFor(factory, from, to);\\n    address[] memory path = new address[](2);\\n    path[0] = from;\\n    path[1] = to;\\n\\n    require(\\n      IERC20(from).transfer(pairAddress, inputAmount),\\n      \\\"UniswapOperator: Transfer failed\\\"\\n    );\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n    if (pair.token0() == from) {\\n      outAmount = getAmountOut(inputAmount, reserve0, reserve1);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(0, outAmount, address(this), new bytes(0));\\n    } else {\\n      outAmount = getAmountOut(inputAmount, reserve1, reserve0);\\n      require(\\n        outAmount >= minAmountOut,\\n        \\\"UniswapOperator: Not enough output amount\\\"\\n      );\\n      pair.swap(outAmount, 0, address(this), new bytes(0));\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) internal {\\n    IERC20(token0).approve(router, token0Amount);\\n    IERC20(token1).approve(router, token1Amount);\\n    IUniswapV2Router02(router).addLiquidity(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      (token0Amount * percentMin) / 100,\\n      (token1Amount * percentMin) / 100,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n}\\n\",\"keccak256\":\"0xc55dfdf9830f4fce7a96ef153366280102127eaa40b81b82bd35562f09bd76f3\",\"license\":\"MIT\"},\"contracts/defi/interfaces/IRevoFarmBot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRevoFarmBot is IERC20 {\\n  function deposit(uint256 _lpAmount) external;\\n}\\n\",\"keccak256\":\"0x10b9c2ededac197c46df7876be11a4664b43c5b583188fab81e093af38b8954b\",\"license\":\"MIT\"},\"contracts/defi/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  function onReward(\\n    address user,\\n    address token0,\\n    address token1,\\n    uint256 token0Amount,\\n    uint256 token1Amount,\\n    uint256 percentMin\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7b6e3e4ec270b17e4ee80ba24054eef5b0e599c9d88a3b402b50a5ae5e717127\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function poolLength() external view returns (uint256);\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\n    function harvest(uint256 pid, address to) external;\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xb8a04e3167bc858953a4fbc97d8e16d92f53c7069e41b3caa013565bac235020\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\",\"keccak256\":\"0x3922110d266eb2283dcd89a633ff54e48d95e5739e7ac10b5ac78604bd6ea19b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external returns (address);\\n\\n  function WETH() external returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x28dd31008745b25e75c3b9f1826db8f9fc6d4990266b60999423cd69a733a311\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0197ba652269a2a07a102680f714d6a348643ad62a9b16e2122bec834c0d542f\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary UniswapSafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0x1ea866557685098ca7d44d43aea18634d5ae315ee58a3725f725a0084a71682c\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IUniswapV2Pair.sol\\\";\\nimport \\\"../IUniswapV2Factory.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  using UniswapSafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = IUniswapV2Factory(factory).getPair(token0, token1);\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    ).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4528f7edccd012c764889218b9a23f0ac71520aca7484d8d44d74f40ee2bd6f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e034620000cb57601f62001e1138819003918201601f19168301916001600160401b03831184841017620000d057808492608094604052833981010312620000cb5780620000526200008492620000e6565b906200006160208201620000e6565b6200007d60606200007560408501620000e6565b9301620000e6565b92620000fb565b604051611cad9081620001648239608051818181610a1701526117bb015260a051818181610140015281816108b30152611262015260c051818181610691015261130d0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000cb57565b60805260a052600080546001600160a01b031980821633908117845560405191956001600160a01b0395909486949193918516917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a31660c0521690600154161760015556fe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c9283632ea89940146100e25750505080633a6462e4146100d95780635c7768b2146100d0578063715018a6146100c757806373d3bcca146100be5780638da5cb5b146100b5578063c45a0155146100ac578063f2fde38b146100a35763f887ea4014610096575b3880610011565b61009e6109cb565b61008f565b5061009e6108d7565b5061009e610867565b5061009e610814565b5061009e61075d565b5061009e6106b5565b5061009e610645565b5061009e6105a8565b3461052f576101f58361019c61017c61020f83868861010036610556565b97849c849a95929893949773ffffffffffffffffffffffffffffffffffffffff988995868616976101338130338c610c09565b60011c9e8f9261016481897f0000000000000000000000000000000000000000000000000000000000000000611aaf565b9a8b986101976101726114ca565b9161017c83611505565b9073ffffffffffffffffffffffffffffffffffffffff169052565b611541565b895180809581947fa9059cbb00000000000000000000000000000000000000000000000000000000835260209c8d9784016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391895af1908115610522575b8d916104f5575b50611551565b16938351927f0902f1ac0000000000000000000000000000000000000000000000000000000084528c60608582818a5afa9485156104e8575b8c908d966104b6575b5082906dffffffffffffffffffffffffffff8091169616965180927f0dfe1681000000000000000000000000000000000000000000000000000000008252818a5afa9182156104a9575b8c9261047c575b505016036103c2576102c1916102b891886119ef565b9283101561161f565b6102c96116aa565b92813b156103be5761033787610392956103549460019c7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a9b8f518096819582947f022c0d9f0000000000000000000000000000000000000000000000000000000084528c3091850161171c565b03925af180156103b1575b610398575b505b33908387878b610f52565b87519384933397859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a351f35b806103a56103ab92610b6f565b8061063a565b8b610347565b6103b9610f36565b610342565b8680fd5b6102b8906103d092886119ef565b6103d86116aa565b92813b156103be5761044687610392956103549460019c7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a9b8f518096819582947f022c0d9f0000000000000000000000000000000000000000000000000000000084528c309185016116e3565b03925af1801561046f575b61045c575b50610349565b806103a561046992610b6f565b8b610456565b610477610f36565b610451565b61049b9250803d106104a2575b6104938183610bc8565b810190611607565b8f806102a2565b503d610489565b6104b1610f36565b61029b565b8396506104da915060603d81116104e1575b6104d28183610bc8565b8101906115d1565b5095610251565b503d6104c8565b6104f0610f36565b610248565b6105159150863d881161051b575b61050d8183610bc8565b810190610cf5565b38610209565b503d610503565b61052a610f36565b610202565b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361055157565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126105515760043561058c81610533565b9060243561059981610533565b90604435906064359060843590565b50346105515760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610551576004356105e481610533565b73ffffffffffffffffffffffffffffffffffffffff9061060982600054163314610a3b565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001556000604051f35b600091031261055157565b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610551576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261075a5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161072c338414610a3b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461055157600061080f7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a6107d061079536610556565b6103498273ffffffffffffffffffffffffffffffffffffffff99959699979394976107c589308d84339116610c09565b309033908916610c09565b6040519384933397859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a3005b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346105515760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105515760043561091381610533565b73ffffffffffffffffffffffffffffffffffffffff61093781600054163314610a3b565b8116156109475761001e90610aa0565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b15610a4257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610b8357604052565b610b8b610b3f565b604052565b60a0810190811067ffffffffffffffff821117610b8357604052565b6040810190811067ffffffffffffffff821117610b8357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b8357604052565b600091610cce949383926040519560208701937f23b872dd00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff938480921660248a0152166044880152606487015260648652610c7686610b90565b16908260405195610c8687610bac565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152610cbc843b1515610d98565b51925af1610cc8610dfd565b90610ed8565b805180610cd9575050565b81602080610cee93610cf39501019101610cf5565b610d0d565b565b90816020910312610551575180151581036105515790565b15610d1457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15610d9f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15610e64573d9067ffffffffffffffff8211610e57575b60405191610e4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610bc8565b82523d6000602084013e565b610e5f610b3f565b610e15565b606090565b91908251928382526000905b848210610ec05750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610eb3575b0116010190565b6000858286010152610eac565b90602090818082850101519082860101520190610e75565b90919015610ee4575090565b815115610ef45750805190602001fd5b610f32906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610e69565b0390fd5b506040513d6000823e3d90fd5b90816020910312610551575190565b91909492610f64848683858a8861124a565b610f9f610f8660015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b15610551576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a481019490945261115f936000918290829060c490829084905af1801561123d575b61122a575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa95861561121d575b84966111fe575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af180156111f1575b6111d4575b5060405195865230600487015216928585602481875afa9485156111c7575b8295611198575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561118b575b611172575050565b8161118892903d1061051b5761050d8183610bc8565b50565b611193610f36565b61116a565b6111b9919550863d88116111c0575b6111b18183610bc8565b810190610f43565b9338611126565b503d6111a7565b6111cf610f36565b61111f565b6111ea90883d8a1161051b5761050d8183610bc8565b5038611100565b6111f9610f36565b6110fb565b611216919650883d8a116111c0576111b18183610bc8565b943861109a565b611225610f36565b611093565b806103a561123792610b6f565b38611031565b611245610f36565b61102c565b61126061128695610f8695610f869585856117ad565b7f0000000000000000000000000000000000000000000000000000000000000000611aaf565b6040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602093928483602481845afa9283156114bd575b60009361149e575b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820181905260248201859052918690829060449082906000905af18015611491575b611474575b50803b15610551576040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481019390935261115f93859360008160248183875af18015611467575b611454575b506040519283523060048401528383602481855afa928315611447575b600093611428575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b611440919350843d86116111c0576111b18183610bc8565b91386113cd565b61144f610f36565b6113c5565b806103a561146192610b6f565b386113a8565b61146f610f36565b6113a3565b61148a90863d881161051b5761050d8183610bc8565b5038611356565b611499610f36565b611351565b6114b6919350853d87116111c0576111b18183610bc8565b91386112cf565b6114c5610f36565b6112c7565b604051906060820182811067ffffffffffffffff8211176114f8575b60405260028252604082602036910137565b611500610b3f565b6114e6565b8051156115125760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051600110156115125760400190565b1561155857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff8216820361055157565b90816060910312610551576115e5816115b6565b9160406115f4602084016115b6565b92015163ffffffff811681036105515790565b90816020910312610551575161161c81610533565b90565b1561162657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176116d6575b8360405281815292369037565b6116de610b3f565b6116c9565b73ffffffffffffffffffffffffffffffffffffffff61161c94936080938352600060208401521660408201528160608201520190610e69565b73ffffffffffffffffffffffffffffffffffffffff61161c94936080936000845260208401521660408201528160608201520190610e69565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611786570290565b61178e610b0f565b0290565b90816060910312610551578051916040602083015192015190565b93919260008560609561194e7f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b3000000000000000000000000000000000000000000000000000000009081815289818061183b6020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af180156119e2575b6119c5575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af180156119b8575b61199a575b50506118c86118ba6118c16118ba8b87611755565b6064900490565b9988611755565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af1801561198d575b6119615750565b6119819060603d8111611986575b6119798183610bc8565b810190611792565b505050565b503d61196f565b611995610f36565b61195a565b816119b092903d1061051b5761050d8183610bc8565b5038806118a5565b6119c0610f36565b6118a0565b6119db90833d851161051b5761050d8183610bc8565b5038611864565b6119ea610f36565b61185f565b919091611a317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e590808404821181151516611aa2575b029283611755565b92806103e89204821181151516611a95575b0281198111611a88575b01908115611a59570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611a90610b0f565b611a4d565b611a9d610b0f565b611a43565b611aaa610b0f565b611a29565b73ffffffffffffffffffffffffffffffffffffffff908184169382841693858514611b8e57611b4b956020951015611b885790925b611af18183161515611c12565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa908115611b7b575b600091611b63575090565b61161c915060203d81116104a2576104938183610bc8565b611b83610f36565b611b58565b92611ae4565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b15611c1957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea2646970667358221220a294e0c98b3e2c7808fd526bb183f3840a4b54dd6ca4a7f4aa4c20979e7a927b64736f6c634300080d0033",
  "deployedBytecode": "0x60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c9283632ea89940146100e25750505080633a6462e4146100d95780635c7768b2146100d0578063715018a6146100c757806373d3bcca146100be5780638da5cb5b146100b5578063c45a0155146100ac578063f2fde38b146100a35763f887ea4014610096575b3880610011565b61009e6109cb565b61008f565b5061009e6108d7565b5061009e610867565b5061009e610814565b5061009e61075d565b5061009e6106b5565b5061009e610645565b5061009e6105a8565b3461052f576101f58361019c61017c61020f83868861010036610556565b97849c849a95929893949773ffffffffffffffffffffffffffffffffffffffff988995868616976101338130338c610c09565b60011c9e8f9261016481897f0000000000000000000000000000000000000000000000000000000000000000611aaf565b9a8b986101976101726114ca565b9161017c83611505565b9073ffffffffffffffffffffffffffffffffffffffff169052565b611541565b895180809581947fa9059cbb00000000000000000000000000000000000000000000000000000000835260209c8d9784016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391895af1908115610522575b8d916104f5575b50611551565b16938351927f0902f1ac0000000000000000000000000000000000000000000000000000000084528c60608582818a5afa9485156104e8575b8c908d966104b6575b5082906dffffffffffffffffffffffffffff8091169616965180927f0dfe1681000000000000000000000000000000000000000000000000000000008252818a5afa9182156104a9575b8c9261047c575b505016036103c2576102c1916102b891886119ef565b9283101561161f565b6102c96116aa565b92813b156103be5761033787610392956103549460019c7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a9b8f518096819582947f022c0d9f0000000000000000000000000000000000000000000000000000000084528c3091850161171c565b03925af180156103b1575b610398575b505b33908387878b610f52565b87519384933397859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a351f35b806103a56103ab92610b6f565b8061063a565b8b610347565b6103b9610f36565b610342565b8680fd5b6102b8906103d092886119ef565b6103d86116aa565b92813b156103be5761044687610392956103549460019c7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a9b8f518096819582947f022c0d9f0000000000000000000000000000000000000000000000000000000084528c309185016116e3565b03925af1801561046f575b61045c575b50610349565b806103a561046992610b6f565b8b610456565b610477610f36565b610451565b61049b9250803d106104a2575b6104938183610bc8565b810190611607565b8f806102a2565b503d610489565b6104b1610f36565b61029b565b8396506104da915060603d81116104e1575b6104d28183610bc8565b8101906115d1565b5095610251565b503d6104c8565b6104f0610f36565b610248565b6105159150863d881161051b575b61050d8183610bc8565b810190610cf5565b38610209565b503d610503565b61052a610f36565b610202565b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361055157565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126105515760043561058c81610533565b9060243561059981610533565b90604435906064359060843590565b50346105515760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610551576004356105e481610533565b73ffffffffffffffffffffffffffffffffffffffff9061060982600054163314610a3b565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001556000604051f35b600091031261055157565b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610551576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261075a5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161072c338414610a3b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461055157600061080f7f971ee547d75474a5cde4443be743892dd2f75b78790a8ce73af7dccda9fe4c3a6107d061079536610556565b6103498273ffffffffffffffffffffffffffffffffffffffff99959699979394976107c589308d84339116610c09565b309033908916610c09565b6040519384933397859092606092959493608083019673ffffffffffffffffffffffffffffffffffffffff809216845216602083015260408201520152565b0390a3005b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346105515760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105515760043561091381610533565b73ffffffffffffffffffffffffffffffffffffffff61093781600054163314610a3b565b8116156109475761001e90610aa0565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346105515760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261055157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b15610a4257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610b8357604052565b610b8b610b3f565b604052565b60a0810190811067ffffffffffffffff821117610b8357604052565b6040810190811067ffffffffffffffff821117610b8357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b8357604052565b600091610cce949383926040519560208701937f23b872dd00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff938480921660248a0152166044880152606487015260648652610c7686610b90565b16908260405195610c8687610bac565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152610cbc843b1515610d98565b51925af1610cc8610dfd565b90610ed8565b805180610cd9575050565b81602080610cee93610cf39501019101610cf5565b610d0d565b565b90816020910312610551575180151581036105515790565b15610d1457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15610d9f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15610e64573d9067ffffffffffffffff8211610e57575b60405191610e4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610bc8565b82523d6000602084013e565b610e5f610b3f565b610e15565b606090565b91908251928382526000905b848210610ec05750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610eb3575b0116010190565b6000858286010152610eac565b90602090818082850101519082860101520190610e75565b90919015610ee4575090565b815115610ef45750805190602001fd5b610f32906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610e69565b0390fd5b506040513d6000823e3d90fd5b90816020910312610551575190565b91909492610f64848683858a8861124a565b610f9f610f8660015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91823b15610551576040517faa906c0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152881660448201526064810191909152608481019190915260a481019490945261115f936000918290829060c490829084905af1801561123d575b61122a575b506040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602096879591949293919273ffffffffffffffffffffffffffffffffffffffff919082168786602481845afa95861561121d575b84966111fe575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8716600483015260248201979097529088908290604490829088905af180156111f1575b6111d4575b5060405195865230600487015216928585602481875afa9485156111c7575b8295611198575b50604051968795869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561118b575b611172575050565b8161118892903d1061051b5761050d8183610bc8565b50565b611193610f36565b61116a565b6111b9919550863d88116111c0575b6111b18183610bc8565b810190610f43565b9338611126565b503d6111a7565b6111cf610f36565b61111f565b6111ea90883d8a1161051b5761050d8183610bc8565b5038611100565b6111f9610f36565b6110fb565b611216919650883d8a116111c0576111b18183610bc8565b943861109a565b611225610f36565b611093565b806103a561123792610b6f565b38611031565b611245610f36565b61102c565b61126061128695610f8695610f869585856117ad565b7f0000000000000000000000000000000000000000000000000000000000000000611aaf565b6040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152602093928483602481845afa9283156114bd575b60009361149e575b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820181905260248201859052918690829060449082906000905af18015611491575b611474575b50803b15610551576040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481019390935261115f93859360008160248183875af18015611467575b611454575b506040519283523060048401528383602481855afa928315611447575b600093611428575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b611440919350843d86116111c0576111b18183610bc8565b91386113cd565b61144f610f36565b6113c5565b806103a561146192610b6f565b386113a8565b61146f610f36565b6113a3565b61148a90863d881161051b5761050d8183610bc8565b5038611356565b611499610f36565b611351565b6114b6919350853d87116111c0576111b18183610bc8565b91386112cf565b6114c5610f36565b6112c7565b604051906060820182811067ffffffffffffffff8211176114f8575b60405260028252604082602036910137565b611500610b3f565b6114e6565b8051156115125760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051600110156115125760400190565b1561155857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f556e69737761704f70657261746f723a205472616e73666572206661696c65646044820152fd5b51906dffffffffffffffffffffffffffff8216820361055157565b90816060910312610551576115e5816115b6565b9160406115f4602084016115b6565b92015163ffffffff811681036105515790565b90816020910312610551575161161c81610533565b90565b1561162657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f556e69737761704f70657261746f723a204e6f7420656e6f756768206f75747060448201527f757420616d6f756e7400000000000000000000000000000000000000000000006064820152fd5b604051906000602083019280841067ffffffffffffffff8511176116d6575b8360405281815292369037565b6116de610b3f565b6116c9565b73ffffffffffffffffffffffffffffffffffffffff61161c94936080938352600060208401521660408201528160608201520190610e69565b73ffffffffffffffffffffffffffffffffffffffff61161c94936080936000845260208401521660408201528160608201520190610e69565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611786570290565b61178e610b0f565b0290565b90816060910312610551578051916040602083015192015190565b93919260008560609561194e7f000000000000000000000000000000000000000000000000000000000000000095826040517f095ea7b3000000000000000000000000000000000000000000000000000000009081815289818061183b6020968794600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b73ffffffffffffffffffffffffffffffffffffffff809c165af180156119e2575b6119c5575b5060405190815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905281816044818a878b165af180156119b8575b61199a575b50506118c86118ba6118c16118ba8b87611755565b6064900490565b9988611755565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9b8c1660048201529a90911660248b015260448a01929092526064890194909452608488019590955260a48701949094523060c48701524260e4870152859384928390610104820190565b0393165af1801561198d575b6119615750565b6119819060603d8111611986575b6119798183610bc8565b810190611792565b505050565b503d61196f565b611995610f36565b61195a565b816119b092903d1061051b5761050d8183610bc8565b5038806118a5565b6119c0610f36565b6118a0565b6119db90833d851161051b5761050d8183610bc8565b5038611864565b6119ea610f36565b61185f565b919091611a317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916103e590808404821181151516611aa2575b029283611755565b92806103e89204821181151516611a95575b0281198111611a88575b01908115611a59570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611a90610b0f565b611a4d565b611a9d610b0f565b611a43565b611aaa610b0f565b611a29565b73ffffffffffffffffffffffffffffffffffffffff908184169382841693858514611b8e57611b4b956020951015611b885790925b611af18183161515611c12565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152919093166024820152938492839182906044820190565b0392165afa908115611b7b575b600091611b63575090565b61161c915060203d81116104a2576104938183610bc8565b611b83610f36565b611b58565b92611ae4565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b15611c1957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fdfea2646970667358221220a294e0c98b3e2c7808fd526bb183f3840a4b54dd6ca4a7f4aa4c20979e7a927b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/defi/RevoOperator.sol:RevoOperator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3173,
        "contract": "contracts/defi/RevoOperator.sol:RevoOperator",
        "label": "rewarder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRewarder)4420"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)4420": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      }
    }
  }
}