{
  "address": "0xCA5D9762e6eC5B635CC97d00A697eB69a539D1E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "_swappaRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputValue",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extras",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed82cc3736ea9b27d20fc3f3c86c6511cfae054d40decefe8b6c93357fd732d5",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0xCA5D9762e6eC5B635CC97d00A697eB69a539D1E5",
    "transactionIndex": 2,
    "gasUsed": "943730",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000002000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000040000800000000000000000000000000000000408000000000000000000000002000000000000000000000000004000000000000000000000000000080000000000000008000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x69a08a71adbbdaf04508fb2255f3b16827349b4088df8dbe96ea5596881c8021",
    "transactionHash": "0xed82cc3736ea9b27d20fc3f3c86c6511cfae054d40decefe8b6c93357fd732d5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 13338719,
        "transactionHash": "0xed82cc3736ea9b27d20fc3f3c86c6511cfae054d40decefe8b6c93357fd732d5",
        "address": "0xCA5D9762e6eC5B635CC97d00A697eB69a539D1E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x69a08a71adbbdaf04508fb2255f3b16827349b4088df8dbe96ea5596881c8021"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 13338719,
        "transactionHash": "0xed82cc3736ea9b27d20fc3f3c86c6511cfae054d40decefe8b6c93357fd732d5",
        "address": "0xCA5D9762e6eC5B635CC97d00A697eB69a539D1E5",
        "topics": [
          "0x04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24"
        ],
        "data": "0x0000000000000000000000007a6daee82f0a5141fd9e5443caa5eaa39147415f",
        "logIndex": 35,
        "blockHash": "0x69a08a71adbbdaf04508fb2255f3b16827349b4088df8dbe96ea5596881c8021"
      }
    ],
    "blockNumber": 13338719,
    "cumulativeGasUsed": "2171994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF35ed7156BABF2541E032B3bB8625210316e2832",
    "0x7a6daee82f0A5141fd9e5443caA5eaa39147415f"
  ],
  "numDeployments": 6,
  "solcInputHash": "a179607d50899dcccac1d37fd4fa3ae4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"_swappaRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputValue\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/GaslessSwap.sol\":\"GaslessSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISwappaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ISwappaRouterV1 {\\n    function getOutputAmount(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutput(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutputWithPrecheck(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x8ab55f0001f1d7621ac46215cf7945c46682dbe64ccac002766c391d4381e94e\",\"license\":\"MIT\"},\"contracts/swap/GaslessSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ISwappaRouter.sol\\\";\\n\\ncontract GaslessSwap is Ownable {\\n    address beneficiary;\\n    ISwappaRouterV1 private swappaRouter;\\n\\n    event Swap(\\n        address indexed userAddress,\\n        address indexed token,\\n        uint256 inputValue,\\n        uint256 outputValue\\n    );\\n    event BeneficiarySet(address newBeneficiary);\\n\\n    constructor(ISwappaRouterV1 _swappaRouter, address _beneficiary) {\\n        swappaRouter = _swappaRouter;\\n        setBeneficiary(_beneficiary);\\n    }\\n\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    function swap(\\n        address token,\\n        address owner,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 minOutputAmount\\n    ) external {\\n        uint256 gasToUse = gasleft();\\n        IERC20Permit(token).permit(\\n            owner,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        ERC20(token).transferFrom(owner, address(this), value);\\n\\n        ERC20(token).approve(address(swappaRouter), value);\\n        swappaRouter.swapExactInputForOutput(\\n            path,\\n            pairs,\\n            extras,\\n            value,\\n            minOutputAmount,\\n            address(this),\\n            deadline\\n        );\\n        ERC20 outputToken = ERC20(path[path.length - 1]);\\n        uint256 outputAmount = outputToken.balanceOf(address(this));\\n\\n        // Fee is the max between 0.1% and the max gas cost.\\n        uint256 gasCost = tx.gasprice * gasToUse;\\n        uint256 percentFee = outputAmount / 1000;\\n        uint256 fee = percentFee < gasCost ? gasCost : percentFee;\\n\\n        require(outputToken.transfer(beneficiary, fee));\\n        require(\\n            outputToken.transfer(owner, outputToken.balanceOf(address(this)))\\n        );\\n\\n        emit Swap(owner, token, value, outputAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa7e7572d3b805e8d22dd51728a7e482dc03e41db3452e632c7cd427e3d4b206b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461006f57601f61101738819003918201601f19168301916001600160401b0383118484101761007457808492604094855283398101031261006f5780602061006092519161004f8361008a565b01519061005b8261008a565b61009b565b604051610eea908161012d8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381160361006f57565b60008054336001600160a01b0319808316821784556040517f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a2496602096919592946001600160a01b03949193859392918416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a31683600254161760025516809160015416176001558152a156fe60806040526004361015610013575b600080fd5b6000803560e01c9081630b7359101461007a575080631c31f71014610071578063715018a6146100685780638da5cb5b1461005f5763f2fde38b1461005757600080fd5b61000e610386565b5061000e610333565b5061000e61028e565b5061000e6101cb565b3461014d576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014d576100b261016e565b6100ba61017d565b6100c261018a565b9060e4359267ffffffffffffffff93848111610149576100e690369060040161019a565b90610104358681116101455761010090369060040161019a565b929091610124359788116101415761011f61013c98369060040161019a565b969095610144359860c4359260a4359260643591604435916108c5565b604051f35b8880fd5b8780fd5b8580fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6004359061017b82610150565b565b6024359061017b82610150565b6084359060ff8216820361000e57565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561022a81610150565b73ffffffffffffffffffffffffffffffffffffffff9061024f8260005416331461047c565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006001541617600155604051908152a1005b600091031261000e57565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014d5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161030533841461047c565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356103c281610150565b73ffffffffffffffffffffffffffffffffffffffff6103e68160005416331461047c565b8116156103f8576103f6906104e1565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561048357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b67ffffffffffffffff811161056457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761056457604052565b506040513d6000823e3d90fd5b9081602091031261000e5751801515810361000e5790565b9081602091031261000e575190565b91908082526020809201929160005b828110610625575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff883561064e81610150565b16815201950193929101610617565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b97959293906106bc906106cc939c9b9a989c60e08b5260e08b0191610608565b90602094898303868b0152610608565b91868303604088015281835280830192818360051b8201019480946000925b85841061073057505050505050509161072c9160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b909192939495967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820301835287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561000e57840190813567ffffffffffffffff811161000e57803603861361000e576107ba88928392836001960161065d565b9901930194019291959493906106eb565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110610829570190565b6108316107cb565b0190565b91908110156108455760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3561087e81610150565b90565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166108b2570290565b6108ba6107cb565b0290565b1561000e57565b96919b999a9c939297909894959c73ffffffffffffffffffffffffffffffffffffffff5a98169d8e3b1561000e577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2359c8f9c8f98600073ffffffffffffffffffffffffffffffffffffffff9f8f610d279f8a610b899f9d610a869f610a869f610b849f828f98610a5160209f602094610b649b610af8978f87938e6109e18b9760405195869485947fd505accf0000000000000000000000000000000000000000000000000000000086528a308b600489019360ff929897969360c0969260e087019a73ffffffffffffffffffffffffffffffffffffffff80921688521660208701526040860152606085015216608083015260a08201520152565b0381838a5af18015610ea7575b610e8e575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481019190915291829081906064820190565b03818f865af18015610e81575b610e64575b50610a9f610a8660025473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b8b6040518096819582947f095ea7b3000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610e57575b610e3a575b50610b2b610a8660025473ffffffffffffffffffffffffffffffffffffffff1690565b986040519c8d9b8c9a8b997f0862d12f000000000000000000000000000000000000000000000000000000008b52309760048c0161069c565b03925af18015610e2d575b610e0e575b50610b7e816107fb565b91610835565b610874565b6040517f70a08231000000000000000000000000000000000000000000000000000000008082523060048301529092909190602084602481855afa938415610e01575b600094610dcf575b50610d0c92610cf392610be96020933a610881565b6103e8870481811015610dc857505b610c94610c7785610c1e60015473ffffffffffffffffffffffffffffffffffffffff1690565b93604051809381927fa9059cbb0000000000000000000000000000000000000000000000000000000097888452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03816000885af1908115610dbb575b600091610da4575b506108be565b6040519283523060048401528383602481855afa928315610d97575b600093610d68575b50600060405180968195829483528c600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1908115610d5b575b600091610d2c57506108be565b60405193849316958360209093929193604081019481520152565b0390a3565b610d4e915060203d602011610d54575b610d468183610593565b8101906105e1565b38610c8e565b503d610d3c565b610d636105d4565b610cff565b610d89919350843d8611610d90575b610d818183610593565b8101906105f9565b9138610cb8565b503d610d77565b610d9f6105d4565b610cb0565b610d4e9150863d8811610d5457610d468183610593565b610dc36105d4565b610c86565b9050610bf8565b602091945092610cf392610be9610df5610d0c96853d8711610d9057610d818183610593565b96935050925092610bd4565b610e096105d4565b610bcc565b610e269060203d602011610d9057610d818183610593565b5038610b74565b610e356105d4565b610b6f565b610e50908c3d8e11610d5457610d468183610593565b5038610b08565b610e5f6105d4565b610b03565b610e7a90843d8611610d5457610d468183610593565b5038610a63565b610e896105d4565b610a5e565b80610e9b610ea192610550565b80610283565b386109f3565b610eaf6105d4565b6109ee56fea264697066735822122010c234e93eb5dbefd022efb09bb8e35940a6e5aac04bef3073bff909ff73b74e64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081630b7359101461007a575080631c31f71014610071578063715018a6146100685780638da5cb5b1461005f5763f2fde38b1461005757600080fd5b61000e610386565b5061000e610333565b5061000e61028e565b5061000e6101cb565b3461014d576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014d576100b261016e565b6100ba61017d565b6100c261018a565b9060e4359267ffffffffffffffff93848111610149576100e690369060040161019a565b90610104358681116101455761010090369060040161019a565b929091610124359788116101415761011f61013c98369060040161019a565b969095610144359860c4359260a4359260643591604435916108c5565b604051f35b8880fd5b8780fd5b8580fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b6004359061017b82610150565b565b6024359061017b82610150565b6084359060ff8216820361000e57565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561022a81610150565b73ffffffffffffffffffffffffffffffffffffffff9061024f8260005416331461047c565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006001541617600155604051908152a1005b600091031261000e57565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014d5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161030533841461047c565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356103c281610150565b73ffffffffffffffffffffffffffffffffffffffff6103e68160005416331461047c565b8116156103f8576103f6906104e1565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561048357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b67ffffffffffffffff811161056457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761056457604052565b506040513d6000823e3d90fd5b9081602091031261000e5751801515810361000e5790565b9081602091031261000e575190565b91908082526020809201929160005b828110610625575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff883561064e81610150565b16815201950193929101610617565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b97959293906106bc906106cc939c9b9a989c60e08b5260e08b0191610608565b90602094898303868b0152610608565b91868303604088015281835280830192818360051b8201019480946000925b85841061073057505050505050509161072c9160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b909192939495967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820301835287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561000e57840190813567ffffffffffffffff811161000e57803603861361000e576107ba88928392836001960161065d565b9901930194019291959493906106eb565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110610829570190565b6108316107cb565b0190565b91908110156108455760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3561087e81610150565b90565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166108b2570290565b6108ba6107cb565b0290565b1561000e57565b96919b999a9c939297909894959c73ffffffffffffffffffffffffffffffffffffffff5a98169d8e3b1561000e577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2359c8f9c8f98600073ffffffffffffffffffffffffffffffffffffffff9f8f610d279f8a610b899f9d610a869f610a869f610b849f828f98610a5160209f602094610b649b610af8978f87938e6109e18b9760405195869485947fd505accf0000000000000000000000000000000000000000000000000000000086528a308b600489019360ff929897969360c0969260e087019a73ffffffffffffffffffffffffffffffffffffffff80921688521660208701526040860152606085015216608083015260a08201520152565b0381838a5af18015610ea7575b610e8e575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481019190915291829081906064820190565b03818f865af18015610e81575b610e64575b50610a9f610a8660025473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b8b6040518096819582947f095ea7b3000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610e57575b610e3a575b50610b2b610a8660025473ffffffffffffffffffffffffffffffffffffffff1690565b986040519c8d9b8c9a8b997f0862d12f000000000000000000000000000000000000000000000000000000008b52309760048c0161069c565b03925af18015610e2d575b610e0e575b50610b7e816107fb565b91610835565b610874565b6040517f70a08231000000000000000000000000000000000000000000000000000000008082523060048301529092909190602084602481855afa938415610e01575b600094610dcf575b50610d0c92610cf392610be96020933a610881565b6103e8870481811015610dc857505b610c94610c7785610c1e60015473ffffffffffffffffffffffffffffffffffffffff1690565b93604051809381927fa9059cbb0000000000000000000000000000000000000000000000000000000097888452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03816000885af1908115610dbb575b600091610da4575b506108be565b6040519283523060048401528383602481855afa928315610d97575b600093610d68575b50600060405180968195829483528c600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1908115610d5b575b600091610d2c57506108be565b60405193849316958360209093929193604081019481520152565b0390a3565b610d4e915060203d602011610d54575b610d468183610593565b8101906105e1565b38610c8e565b503d610d3c565b610d636105d4565b610cff565b610d89919350843d8611610d90575b610d818183610593565b8101906105f9565b9138610cb8565b503d610d77565b610d9f6105d4565b610cb0565b610d4e9150863d8811610d5457610d468183610593565b610dc36105d4565b610c86565b9050610bf8565b602091945092610cf392610be9610df5610d0c96853d8711610d9057610d818183610593565b96935050925092610bd4565b610e096105d4565b610bcc565b610e269060203d602011610d9057610d818183610593565b5038610b74565b610e356105d4565b610b6f565b610e50908c3d8e11610d5457610d468183610593565b5038610b08565b610e5f6105d4565b610b03565b610e7a90843d8611610d5457610d468183610593565b5038610a63565b610e896105d4565b610a5e565b80610e9b610ea192610550565b80610283565b386109f3565b610eaf6105d4565b6109ee56fea264697066735822122010c234e93eb5dbefd022efb09bb8e35940a6e5aac04bef3073bff909ff73b74e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/swap/GaslessSwap.sol:GaslessSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6265,
        "contract": "contracts/swap/GaslessSwap.sol:GaslessSwap",
        "label": "beneficiary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6268,
        "contract": "contracts/swap/GaslessSwap.sol:GaslessSwap",
        "label": "swappaRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwappaRouterV1)4620"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwappaRouterV1)4620": {
        "encoding": "inplace",
        "label": "contract ISwappaRouterV1",
        "numberOfBytes": "20"
      }
    }
  }
}