{
  "address": "0xfB6B2c8392580Ea47A6256AdbB0e48A962A67378",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "firstPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PoolInfo",
          "name": "poolInfo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "uint256[8]",
          "name": "balances",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[8]",
          "name": "underlyingBalances",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[8]",
          "name": "decimals",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[8]",
          "name": "underlyingDecimals",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[8]",
          "name": "rates",
          "type": "uint256[8]"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isMeta",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "contract PoolInfo",
          "name": "poolInfo",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "from",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pageSize",
          "type": "uint16"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[8]",
              "name": "balances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingBalances",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "decimals",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "underlyingDecimals",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[8]",
              "name": "rates",
              "type": "uint256[8]"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMeta",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CurveMulticall.CurvePool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8af0128feef3b47a520afeeac971a1bfc693b33609a151988c1894deb7d795f3",
  "receipt": {
    "to": null,
    "from": "0x4A9797f16b7c0d66814988B167285394750cfb8b",
    "contractAddress": "0xfB6B2c8392580Ea47A6256AdbB0e48A962A67378",
    "transactionIndex": 4,
    "gasUsed": "1013681",
    "logsBloom": "0x
    "blockHash": "0x62bd80f49eb94df60d872e1903467b71187ec6a8c6666c2f92b325f89bf8e91b",
    "transactionHash": "0x8af0128feef3b47a520afeeac971a1bfc693b33609a151988c1894deb7d795f3",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 14054463,
        "transactionHash": "0x8af0128feef3b47a520afeeac971a1bfc693b33609a151988c1894deb7d795f3",
        "address": "0xfB6B2c8392580Ea47A6256AdbB0e48A962A67378",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a9797f16b7c0d66814988b167285394750cfb8b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x62bd80f49eb94df60d872e1903467b71187ec6a8c6666c2f92b325f89bf8e91b"
      }
    ],
    "blockNumber": 14054463,
    "cumulativeGasUsed": "1656428",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7da5e23f2c4860b6af066cb950a16566",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"firstPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PoolInfo\",\"name\":\"poolInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"decimals\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingDecimals\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"rates\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract PoolInfo\",\"name\":\"poolInfo\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pageSize\",\"type\":\"uint16\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingBalances\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"decimals\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"underlyingDecimals\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"rates\",\"type\":\"uint256[8]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CurveMulticall.CurvePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/CurveMulticall.sol\":\"CurveMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/curve/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface PoolInfo {\\n    function get_pool_info(address pool)\\n        external\\n        view\\n        returns (\\n            uint256[8] memory balances,\\n            uint256[8] memory underlying_balances,\\n            uint256[8] memory decimals,\\n            uint256[8] memory underlying_decimals,\\n            uint256[8] memory rates,\\n            address lp_token,\\n            bool is_meta,\\n            string memory name\\n        );\\n}\\n\",\"keccak256\":\"0x8037bcd4ae03843449c989062b087cba91187bc06a4f3d5aec6a64e6823ea3a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/curve/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface Registry {\\n    function pool_list(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0xed2f329bd4c3eb799120f90f8ceddc697f448edc985d3e6c45874c530b44ad73\",\"license\":\"GPL-3.0\"},\"contracts/multicall/CurveMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/curve/Registry.sol\\\";\\nimport \\\"../interfaces/curve/PoolInfo.sol\\\";\\n\\ncontract CurveMulticall is Ownable {\\n    struct CurvePool {\\n        uint256[8] balances;\\n        uint256[8] underlyingBalances;\\n        uint256[8] decimals;\\n        uint256[8] underlyingDecimals;\\n        uint256[8] rates;\\n        address lpToken;\\n        bool isMeta;\\n        string name;\\n    }\\n\\n    function firstPool(Registry registry)\\n        external\\n        view\\n        returns (address poolAddress)\\n    {\\n        poolAddress = registry.pool_list(0);\\n    }\\n\\n    function getPoolInfo(PoolInfo poolInfo, address poolAddress)\\n        external\\n        view\\n        returns (\\n            uint256[8] memory balances,\\n            uint256[8] memory underlyingBalances,\\n            uint256[8] memory decimals,\\n            uint256[8] memory underlyingDecimals,\\n            uint256[8] memory rates,\\n            address lpToken,\\n            bool isMeta,\\n            string memory name\\n        )\\n    {\\n        (\\n            balances,\\n            underlyingBalances,\\n            decimals,\\n            underlyingDecimals,\\n            rates,\\n            lpToken,\\n            isMeta,\\n            name\\n        ) = poolInfo.get_pool_info(poolAddress);\\n    }\\n\\n    function getPools(\\n        Registry registry,\\n        PoolInfo poolInfo,\\n        uint16 from,\\n        uint16 pageSize\\n    ) external view returns (CurvePool[] memory pools) {\\n        pools = new CurvePool[](pageSize);\\n\\n        for (uint16 index = from; index < from + pageSize; index++) {\\n            address poolAddress = registry.pool_list(index);\\n            (\\n                uint256[8] memory balances,\\n                uint256[8] memory underlyingBalances,\\n                uint256[8] memory decimals,\\n                uint256[8] memory underlyingDecimals,\\n                uint256[8] memory rates,\\n                address lpToken,\\n                bool isMeta,\\n                string memory name\\n            ) = poolInfo.get_pool_info(poolAddress);\\n\\n            pools[index - from] = CurvePool(\\n                balances,\\n                underlyingBalances,\\n                decimals,\\n                underlyingDecimals,\\n                rates,\\n                lpToken,\\n                isMeta,\\n                name\\n            );\\n        }\\n    }\\n\\n    // Shouldn't hold funds, just in case.\\n    function recoverFunds(address to, address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(IERC20(token).transfer(to, balance), \\\"Token recovery failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf7f3a0171449c106a69bc8eba506756cdbdae78a609079a1599ddf0bb90b1b06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361110990816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816324ae6a27146100a2575080633ee7bc3314610099578063486e51f414610090578063715018a6146100875780637970d4191461007e5780638da5cb5b146100755763f2fde38b1461006d57600080fd5b61000e610a85565b5061000e610a32565b5061000e6107c6565b5061000e6105e7565b5061000e610478565b5061000e610271565b346102505760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610250576101d56004356100e081610253565b6101bb6024356100ef81610253565b73ffffffffffffffffffffffffffffffffffffffff90610113828754163314610b7b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315610243575b8893610214575b50876040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215610207575b84926101da575b505061106e565b604051f35b6101f99250803d10610200575b6101f18183610ca9565b81019061105a565b83806101ce565b503d6101e7565b61020f610cff565b6101c7565b610235919350843d861161023c575b61022d8183610ca9565b81019061104b565b9188610161565b503d610223565b61024b610cff565b61015a565b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206004356102af81610253565b604051907f3a1d5d8e00000000000000000000000000000000000000000000000000000000825260006004830152828260248173ffffffffffffffffffffffffffffffffffffffff8095165afa918215610345575b600092610316575b5060405191168152f35b610337919250833d811161033e575b61032f8183610ca9565b810190610cea565b903861030c565b503d610325565b61034d610cff565b610304565b6000915b6008831061036357505050565b600190825181526020809101920192019190610356565b918091926000905b82821061039a575011610393575050565b6000910152565b91508060209183015181860152018291610382565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936103eb8151809281875287808801910161037a565b0116010190565b959273ffffffffffffffffffffffffffffffffffffffff9461043e61044992610433610454966104288c6104759f9e9c98610352565b6101008c0190610352565b6102008a0190610352565b610300880190610352565b610400860190610352565b166105008301521515610520820152610560908161054082015201906103af565b90565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056b6004356104b781610253565b6024356104c381610253565b6040516104cf81610c7f565b61010080913690376040516104e381610c7f565b3690376104ee610d1b565b506104f7610d1b565b50610500610d1b565b5060405180927f100f2c000000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff8160009788966004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa80156105da575b82908392848586908792889489966105a0575b506040519850889761059c97896103f2565b0390f35b96505050505050506105c8915061059c923d8091833e6105c08183610ca9565b810190610d83565b9597889796959194929392919061058a565b6105e2610cff565b610577565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102505780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161065e338414610b7b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6044359061ffff8216820361000e57565b6064359061ffff8216820361000e57565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106106e3575050505050505090565b9091929394959685806107b5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0866001960301885260e08c51610728838251610352565b61073a85820151610100850190610352565b61074c89820151610200850190610352565b61075f6060820151610300850190610352565b6107726080820151610400850190610352565b60a081015173ffffffffffffffffffffffffffffffffffffffff1661050084015260c08101511515610520840152015190610560908161054082015201906103af565b9901940194019295949391906106d2565b503461000e576080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760049081359061080682610253565b6024359261081384610253565b61081b61068c565b9061082461069d565b9461ffff94610834868816610eab565b95849173ffffffffffffffffffffffffffffffffffffffff8091169316915b6108676108608a88610fd2565b61ffff1690565b8282161015610a245760408161091d600083517f3a1d5d8e0000000000000000000000000000000000000000000000000000000081528981806108ba6020978894830191909161ffff6020820193169052565b03818c5afa908115610a17575b82916109fa575b508451809381927f100f2c000000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa9182156109ed575b60009384908586918793889589978a996109bd575b50610948610d0c565b998a5289015287015260608601528b85015273ffffffffffffffffffffffffffffffffffffffff1660a0840152151560c083015260e082015261098b8783610fe9565b61ffff169061099a828b611008565b526109a59089611008565b506108606109b561086792610fb2565b915050610853565b965097505096925050506109db92503d8091833e6105c08183610ca9565b9698969790969195929492903861093f565b6109f5610cff565b61092a565b610a119150843d861161033e5761032f8183610ca9565b386108ce565b610a1f610cff565b6108c7565b6040518061059c8a826106ae565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ac181610253565b73ffffffffffffffffffffffffffffffffffffffff610ae581600054163314610b7b565b811615610af757610af590610be0565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610b8257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117610c9c57604052565b610ca4610c4f565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610c9c57604052565b9081602091031261000e575161047581610253565b506040513d6000823e3d90fd5b60405190610d1982610c7f565b565b60405190610d2882610c7f565b610100368337565b9080601f8301121561000e5760405191610d4983610c7f565b8290610100810192831161000e57905b828210610d665750505090565b8151815260209182019101610d59565b5190811515820361000e57565b91906105608382031261000e57610d9a8184610d30565b92610da9826101008301610d30565b92610db8836102008401610d30565b92610dc7816103008501610d30565b92610dd6826104008301610d30565b92610500820151610de681610253565b92610df46105208401610d76565b9261054081015167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111610e77575b60405192610e5960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185610ca9565b8184526020828401011161000e57610475916020808501910161037a565b610e7f610c4f565b610e23565b60209067ffffffffffffffff8111610e9e575b60051b0190565b610ea6610c4f565b610e97565b90610eb582610e84565b604090610ec482519182610ca9565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ef28295610e84565b0191600091825b848110610f07575050505050565b6020908351610f1581610c7f565b8451610f2081610c7f565b61010090813682378252855190610f3682610c7f565b3682378184015282610f46610d1b565b86830152610f52610d1b565b60609081840152610f61610d1b565b60808401528760a08401528760c084015260e0830152828501015201610ef9565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610fc6570190565b610fce610f82565b0190565b9061ffff8080931691168092038111610fc6570190565b61ffff9182169116818110610ffc570390565b611004610f82565b0390565b805182101561101c5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575190565b9081602091031261000e5761047590610d76565b1561107557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220635b9904826a14c40653f145e684eec99505cbd5d72ecf1ebd5c84f300408c9364736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816324ae6a27146100a2575080633ee7bc3314610099578063486e51f414610090578063715018a6146100875780637970d4191461007e5780638da5cb5b146100755763f2fde38b1461006d57600080fd5b61000e610a85565b5061000e610a32565b5061000e6107c6565b5061000e6105e7565b5061000e610478565b5061000e610271565b346102505760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610250576101d56004356100e081610253565b6101bb6024356100ef81610253565b73ffffffffffffffffffffffffffffffffffffffff90610113828754163314610b7b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209485939192909116908383602481855afa928315610243575b8893610214575b50876040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1918215610207575b84926101da575b505061106e565b604051f35b6101f99250803d10610200575b6101f18183610ca9565b81019061105a565b83806101ce565b503d6101e7565b61020f610cff565b6101c7565b610235919350843d861161023c575b61022d8183610ca9565b81019061104b565b9188610161565b503d610223565b61024b610cff565b61015a565b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206004356102af81610253565b604051907f3a1d5d8e00000000000000000000000000000000000000000000000000000000825260006004830152828260248173ffffffffffffffffffffffffffffffffffffffff8095165afa918215610345575b600092610316575b5060405191168152f35b610337919250833d811161033e575b61032f8183610ca9565b810190610cea565b903861030c565b503d610325565b61034d610cff565b610304565b6000915b6008831061036357505050565b600190825181526020809101920192019190610356565b918091926000905b82821061039a575011610393575050565b6000910152565b91508060209183015181860152018291610382565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936103eb8151809281875287808801910161037a565b0116010190565b959273ffffffffffffffffffffffffffffffffffffffff9461043e61044992610433610454966104288c6104759f9e9c98610352565b6101008c0190610352565b6102008a0190610352565b610300880190610352565b610400860190610352565b166105008301521515610520820152610560908161054082015201906103af565b90565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056b6004356104b781610253565b6024356104c381610253565b6040516104cf81610c7f565b61010080913690376040516104e381610c7f565b3690376104ee610d1b565b506104f7610d1b565b50610500610d1b565b5060405180927f100f2c000000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff8160009788966004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa80156105da575b82908392848586908792889489966105a0575b506040519850889761059c97896103f2565b0390f35b96505050505050506105c8915061059c923d8091833e6105c08183610ca9565b810190610d83565b9597889796959194929392919061058a565b6105e2610cff565b610577565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102505780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161065e338414610b7b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b6044359061ffff8216820361000e57565b6064359061ffff8216820361000e57565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106106e3575050505050505090565b9091929394959685806107b5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0866001960301885260e08c51610728838251610352565b61073a85820151610100850190610352565b61074c89820151610200850190610352565b61075f6060820151610300850190610352565b6107726080820151610400850190610352565b60a081015173ffffffffffffffffffffffffffffffffffffffff1661050084015260c08101511515610520840152015190610560908161054082015201906103af565b9901940194019295949391906106d2565b503461000e576080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760049081359061080682610253565b6024359261081384610253565b61081b61068c565b9061082461069d565b9461ffff94610834868816610eab565b95849173ffffffffffffffffffffffffffffffffffffffff8091169316915b6108676108608a88610fd2565b61ffff1690565b8282161015610a245760408161091d600083517f3a1d5d8e0000000000000000000000000000000000000000000000000000000081528981806108ba6020978894830191909161ffff6020820193169052565b03818c5afa908115610a17575b82916109fa575b508451809381927f100f2c000000000000000000000000000000000000000000000000000000000083528c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381895afa9182156109ed575b60009384908586918793889589978a996109bd575b50610948610d0c565b998a5289015287015260608601528b85015273ffffffffffffffffffffffffffffffffffffffff1660a0840152151560c083015260e082015261098b8783610fe9565b61ffff169061099a828b611008565b526109a59089611008565b506108606109b561086792610fb2565b915050610853565b965097505096925050506109db92503d8091833e6105c08183610ca9565b9698969790969195929492903861093f565b6109f5610cff565b61092a565b610a119150843d861161033e5761032f8183610ca9565b386108ce565b610a1f610cff565b6108c7565b6040518061059c8a826106ae565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610ac181610253565b73ffffffffffffffffffffffffffffffffffffffff610ae581600054163314610b7b565b811615610af757610af590610be0565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610b8257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117610c9c57604052565b610ca4610c4f565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610c9c57604052565b9081602091031261000e575161047581610253565b506040513d6000823e3d90fd5b60405190610d1982610c7f565b565b60405190610d2882610c7f565b610100368337565b9080601f8301121561000e5760405191610d4983610c7f565b8290610100810192831161000e57905b828210610d665750505090565b8151815260209182019101610d59565b5190811515820361000e57565b91906105608382031261000e57610d9a8184610d30565b92610da9826101008301610d30565b92610db8836102008401610d30565b92610dc7816103008501610d30565b92610dd6826104008301610d30565b92610500820151610de681610253565b92610df46105208401610d76565b9261054081015167ffffffffffffffff9182821161000e57019082601f8301121561000e578151908111610e77575b60405192610e5960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185610ca9565b8184526020828401011161000e57610475916020808501910161037a565b610e7f610c4f565b610e23565b60209067ffffffffffffffff8111610e9e575b60051b0190565b610ea6610c4f565b610e97565b90610eb582610e84565b604090610ec482519182610ca9565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ef28295610e84565b0191600091825b848110610f07575050505050565b6020908351610f1581610c7f565b8451610f2081610c7f565b61010090813682378252855190610f3682610c7f565b3682378184015282610f46610d1b565b86830152610f52610d1b565b60609081840152610f61610d1b565b60808401528760a08401528760c084015260e0830152828501015201610ef9565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610fc6570190565b610fce610f82565b0190565b9061ffff8080931691168092038111610fc6570190565b61ffff9182169116818110610ffc570390565b611004610f82565b0390565b805182101561101c5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261000e575190565b9081602091031261000e5761047590610d76565b1561107557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207265636f76657279206661696c656400000000000000000000006044820152fdfea2646970667358221220635b9904826a14c40653f145e684eec99505cbd5d72ecf1ebd5c84f300408c9364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/multicall/CurveMulticall.sol:CurveMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}