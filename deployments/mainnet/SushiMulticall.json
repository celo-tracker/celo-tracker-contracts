{
  "address": "0x12Ccd67bEF3c84C23daaD227b4e30af08174893D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "miniChefPoolShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "miniChefAllocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewarderAllocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct SushiMulticall.SushiPool[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1429ee76040e7022c5eddb564c70564aa18d55f4fbae7b34d6e500bca28bbf8b",
  "receipt": {
    "to": null,
    "from": "0x86A8b38FE92311df1E707bE3f99c7D076fDa3636",
    "contractAddress": "0x12Ccd67bEF3c84C23daaD227b4e30af08174893D",
    "transactionIndex": 3,
    "gasUsed": "848309",
    "logsBloom": "0x
    "blockHash": "0xb112b3fe8447f49c27afbf9525a68a5ace79418bca3b34358b94e7cd559714da",
    "transactionHash": "0x1429ee76040e7022c5eddb564c70564aa18d55f4fbae7b34d6e500bca28bbf8b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 14392078,
        "transactionHash": "0x1429ee76040e7022c5eddb564c70564aa18d55f4fbae7b34d6e500bca28bbf8b",
        "address": "0x12Ccd67bEF3c84C23daaD227b4e30af08174893D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000086a8b38fe92311df1e707be3f99c7d076fda3636"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb112b3fe8447f49c27afbf9525a68a5ace79418bca3b34358b94e7cd559714da"
      }
    ],
    "blockNumber": 14392078,
    "cumulativeGasUsed": "1264768",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "21657234f86fbee9b879a47e3da3e51c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miniChefPoolShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miniChefAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarderAllocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct SushiMulticall.SushiPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multicall/SushiMulticall.sol\":\"SushiMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IMiniChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function updatePool(uint256 pid)\\n    external\\n    returns (IMiniChefV2.PoolInfo memory);\\n\\n  function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function harvest(uint256 pid, address to) external;\\n\\n  function withdrawAndHarvest(\\n    uint256 pid,\\n    uint256 amount,\\n    address to\\n  ) external;\\n\\n  function emergencyWithdraw(uint256 pid, address to) external;\\n\\n  function sushiPerSecond() external view returns (uint256);\\n\\n  function totalAllocPoint() external view returns (uint256);\\n\\n  function lpToken(uint256 index) external view returns (address);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n  \\n  function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending);\\n}\\n\",\"keccak256\":\"0x9618f4d5a58c018f6f3661111aea4e22c49e31d50c394c43767b9142d968ff03\",\"license\":\"MIT\"},\"contracts/interfaces/sushiswap/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n  struct PoolInfo {\\n    uint128 accSushiPerShare;\\n    uint64 lastRewardTime;\\n    uint64 allocPoint;\\n  }\\n\\n  function onSushiReward(\\n    uint256 pid,\\n    address user,\\n    address recipient,\\n    uint256 sushiAmount,\\n    uint256 newLpAmount\\n  ) external;\\n\\n  function pendingTokens(\\n    uint256 pid,\\n    address user,\\n    uint256 sushiAmount\\n  ) external view returns (IERC20[] memory, uint256[] memory);\\n\\n  function rewardPerSecond() external view returns (uint256);\\n\\n  function poolInfo(uint256 id) external view returns (PoolInfo memory);\\n}\\n\",\"keccak256\":\"0xdaed1cfcb7040df5753aef290201d3c765b971c7db6683fe658391f6327361b9\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57d6a1a30d76f5ae8b7d375bbd336bea0d7ccc217690b72d691f6d564baf7196\",\"license\":\"MIT\"},\"contracts/multicall/SushiMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/sushiswap/IMiniChefV2.sol\\\";\\nimport \\\"../interfaces/sushiswap/IRewarder.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\ncontract SushiMulticall is Ownable {\\n  struct SushiPool {\\n    address poolAddress;\\n    uint256 amount0;\\n    address token0;\\n    uint256 amount1;\\n    address token1;\\n    uint256 miniChefPoolShare;\\n    uint256 miniChefAllocPoint;\\n    uint256 rewarderAllocPoint;\\n  }\\n\\n  function getPools(IMiniChefV2 miniChef, IRewarder rewarder)\\n    external\\n    view\\n    returns (SushiPool[] memory pools)\\n  {\\n    uint256 poolCount = miniChef.poolLength();\\n\\n    pools = new SushiPool[](poolCount);\\n\\n    for (uint16 index = 0; index < poolCount; index++) {\\n      address lpToken = miniChef.lpToken(index);\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      address token0 = pair.token0();\\n      address token1 = pair.token1();\\n\\n      uint256 miniChefPoolShare = 0;\\n      uint256 own = IERC20(lpToken).balanceOf(address(miniChef));\\n      if (own != 0) {\\n        uint256 total = IERC20(lpToken).totalSupply();\\n        miniChefPoolShare = own * 10**18 / total;\\n      }\\n\\n      uint256 miniChefAllocPoint = miniChef.poolInfo(index).allocPoint;\\n      uint256 rewarderAllocPoint = rewarder.poolInfo(index).allocPoint;\\n\\n      pools[index] = SushiPool(\\n        lpToken,\\n        reserve0,\\n        token0,\\n        reserve1,\\n        token1,\\n        miniChefPoolShare,\\n        miniChefAllocPoint,\\n        rewarderAllocPoint\\n      );\\n    }\\n    \\n    return pools;\\n  }\\n}\",\"keccak256\":\"0x1ba2f7a2445f241f900b31313366753b76481d178c956ffa85e5d9aff2374bde\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a3610e0c90816100618239f35b600080fdfe60a060408181526004918236101561001657600080fd5b60009160e0918335831c9485635b1dc86f146100795750505050508063715018a6146100705780638da5cb5b146100675763f2fde38b1461005a575b388080600080fd5b61006261086e565b610052565b5061006261081b565b50610062610773565b346106a757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106a7578035936100b3856106ab565b602435906100c0826106ab565b7f081e3eda00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8096166020608052608051858581845afa94851561069a575b8895610677575b5061012285610b25565b93885b61ffff81168781101561066657908289928c84878a8f87908451957f78ed5d1f000000000000000000000000000000000000000000000000000000008752608051878061017f868d830191909161ffff6020820193169052565b0381885afa968715610659575b8197610636575b50818716938651917f0902f1ac0000000000000000000000000000000000000000000000000000000083526060838c81895afa918215610629575b819382936105f1575b5088519b7f0dfe1681000000000000000000000000000000000000000000000000000000008d526080518d82818b5afa9c8d156105e4575b839d6105c1575b508951957fd21220a70000000000000000000000000000000000000000000000000000000087526080518783818c5afa9687156105b4575b8497610581575b5083988b517f70a082310000000000000000000000000000000000000000000000000000000081528b81806102ac6080519388830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa908115610574575b8691610555575b50806104b6575b50508a80517f1526fe27000000000000000000000000000000000000000000000000000000009b8c825281808c8782019061030a909161ffff6020820193169052565b03815a93606094fa9081156104a9575b869161048a575b50015167ffffffffffffffff1667ffffffffffffffff16998b5198899384928352820190610357909161ffff6020820193169052565b03921691815a93606094fa9a8b156103976104499f6104439e61042499610401966103a49561047d575b9161044e575b50015167ffffffffffffffff1690565b67ffffffffffffffff1690565b986103cc6103b0610aef565b73ffffffffffffffffffffffffffffffffffffffff909c168c52565b6dffffffffffffffffffffffffffff8095166080518c01528a019073ffffffffffffffffffffffffffffffffffffffff169052565b16606087015273ffffffffffffffffffffffffffffffffffffffff166080860152565b60a084015260c08301528882015261043c828b610d93565b5288610d93565b50610bfb565b610125565b610470915060603d606011610476575b6104688183610a92565b810190610d19565b38610387565b503d61045e565b610485610ae2565b610381565b6104a3915060603d606011610476576104688183610a92565b38610321565b6104b1610ae2565b61031a565b610509929a508c51917f18160ddd000000000000000000000000000000000000000000000000000000008352828581608051935afa918215610548575b8692610511575b5061050490610c84565b610ccb565b9738806102c7565b61050491925061053a906080513d60805111610541575b6105328183610a92565b810190610ad3565b91906104fa565b503d610528565b610550610ae2565b6104f3565b60805161056e92503d8111610541576105328183610a92565b386102c0565b61057c610ae2565b6102b9565b6105a69197506080513d608051116105ad575b61059e8183610a92565b810190610c1b565b9538610255565b503d610594565b6105bc610ae2565b61024e565b6105dd919d506080513d608051116105ad5761059e8183610a92565b9b38610216565b6105ec610ae2565b61020f565b90925061061791935060603d606011610622575b61060f8183610a92565b810190610c4e565b5092909291386101d7565b503d610605565b610631610ae2565b6101ce565b6106529197506080513d608051116105ad5761059e8183610a92565b9538610193565b610661610ae2565b61018c565b88518061067389826106ce565b0390f35b6106939195506080513d60805111610541576105328183610a92565b9388610118565b6106a2610ae2565b610111565b8480fd5b73ffffffffffffffffffffffffffffffffffffffff8116036106c957565b600080fd5b60208082019080835283518092528060408094019401926000905b8382106106f857505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0808201519088015260c0808201519088015260e0908101519087015261010090950194938201936001909101906106e9565b50346106c9576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108185780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107ea338414610964565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346106c95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c957602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346106c95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c9576004356108aa816106ab565b73ffffffffffffffffffffffffffffffffffffffff6108ce81600054163314610964565b8116156108e0576108de906109c9565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561096b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117610a8557604052565b610a8d610a38565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610a8557604052565b908160209103126106c9575190565b506040513d6000823e3d90fd5b60405190610afc82610a68565b565b60209067ffffffffffffffff8111610b18575b60051b0190565b610b20610a38565b610b11565b90610b2f82610afe565b604090610b3e82519182610a92565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610b6c8295610afe565b019160005b838110610b7e5750505050565b6020908251610b8c81610a68565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201610b71565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610c0f570190565b610c17610bcb565b0190565b908160209103126106c95751610c30816106ab565b90565b51906dffffffffffffffffffffffffffff821682036106c957565b908160609103126106c957610c6281610c33565b916040610c7160208401610c33565b92015163ffffffff811681036106c95790565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610cbf570290565b610cc7610bcb565b0290565b8115610cd5570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b519067ffffffffffffffff821682036106c957565b908160609103126106c957604051906060820182811067ffffffffffffffff821117610d86575b60405280516fffffffffffffffffffffffffffffffff811681036106c957610d7e916040918452610d7360208201610d04565b602085015201610d04565b604082015290565b610d8e610a38565b610d40565b8051821015610da75760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208c5498ca686c417baa1abe0796b3bf0512980bf87ac8196f24363286302c9cf164736f6c634300080d0033",
  "deployedBytecode": "0x60a060408181526004918236101561001657600080fd5b60009160e0918335831c9485635b1dc86f146100795750505050508063715018a6146100705780638da5cb5b146100675763f2fde38b1461005a575b388080600080fd5b61006261086e565b610052565b5061006261081b565b50610062610773565b346106a757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106a7578035936100b3856106ab565b602435906100c0826106ab565b7f081e3eda00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8096166020608052608051858581845afa94851561069a575b8895610677575b5061012285610b25565b93885b61ffff81168781101561066657908289928c84878a8f87908451957f78ed5d1f000000000000000000000000000000000000000000000000000000008752608051878061017f868d830191909161ffff6020820193169052565b0381885afa968715610659575b8197610636575b50818716938651917f0902f1ac0000000000000000000000000000000000000000000000000000000083526060838c81895afa918215610629575b819382936105f1575b5088519b7f0dfe1681000000000000000000000000000000000000000000000000000000008d526080518d82818b5afa9c8d156105e4575b839d6105c1575b508951957fd21220a70000000000000000000000000000000000000000000000000000000087526080518783818c5afa9687156105b4575b8497610581575b5083988b517f70a082310000000000000000000000000000000000000000000000000000000081528b81806102ac6080519388830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa908115610574575b8691610555575b50806104b6575b50508a80517f1526fe27000000000000000000000000000000000000000000000000000000009b8c825281808c8782019061030a909161ffff6020820193169052565b03815a93606094fa9081156104a9575b869161048a575b50015167ffffffffffffffff1667ffffffffffffffff16998b5198899384928352820190610357909161ffff6020820193169052565b03921691815a93606094fa9a8b156103976104499f6104439e61042499610401966103a49561047d575b9161044e575b50015167ffffffffffffffff1690565b67ffffffffffffffff1690565b986103cc6103b0610aef565b73ffffffffffffffffffffffffffffffffffffffff909c168c52565b6dffffffffffffffffffffffffffff8095166080518c01528a019073ffffffffffffffffffffffffffffffffffffffff169052565b16606087015273ffffffffffffffffffffffffffffffffffffffff166080860152565b60a084015260c08301528882015261043c828b610d93565b5288610d93565b50610bfb565b610125565b610470915060603d606011610476575b6104688183610a92565b810190610d19565b38610387565b503d61045e565b610485610ae2565b610381565b6104a3915060603d606011610476576104688183610a92565b38610321565b6104b1610ae2565b61031a565b610509929a508c51917f18160ddd000000000000000000000000000000000000000000000000000000008352828581608051935afa918215610548575b8692610511575b5061050490610c84565b610ccb565b9738806102c7565b61050491925061053a906080513d60805111610541575b6105328183610a92565b810190610ad3565b91906104fa565b503d610528565b610550610ae2565b6104f3565b60805161056e92503d8111610541576105328183610a92565b386102c0565b61057c610ae2565b6102b9565b6105a69197506080513d608051116105ad575b61059e8183610a92565b810190610c1b565b9538610255565b503d610594565b6105bc610ae2565b61024e565b6105dd919d506080513d608051116105ad5761059e8183610a92565b9b38610216565b6105ec610ae2565b61020f565b90925061061791935060603d606011610622575b61060f8183610a92565b810190610c4e565b5092909291386101d7565b503d610605565b610631610ae2565b6101ce565b6106529197506080513d608051116105ad5761059e8183610a92565b9538610193565b610661610ae2565b61018c565b88518061067389826106ce565b0390f35b6106939195506080513d60805111610541576105328183610a92565b9388610118565b6106a2610ae2565b610111565b8480fd5b73ffffffffffffffffffffffffffffffffffffffff8116036106c957565b600080fd5b60208082019080835283518092528060408094019401926000905b8382106106f857505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff9081168852818501518886015281830151811688840152606080830151908901526080808301519091169088015260a0808201519088015260c0808201519088015260e0908101519087015261010090950194938201936001909101906106e9565b50346106c9576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108185780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107ea338414610964565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346106c95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c957602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346106c95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c9576004356108aa816106ab565b73ffffffffffffffffffffffffffffffffffffffff6108ce81600054163314610964565b8116156108e0576108de906109c9565b005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561096b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610100810190811067ffffffffffffffff821117610a8557604052565b610a8d610a38565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610a8557604052565b908160209103126106c9575190565b506040513d6000823e3d90fd5b60405190610afc82610a68565b565b60209067ffffffffffffffff8111610b18575b60051b0190565b610b20610a38565b610b11565b90610b2f82610afe565b604090610b3e82519182610a92565b8381527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610b6c8295610afe565b019160005b838110610b7e5750505050565b6020908251610b8c81610a68565b60008152826000818301526000858301526000606083015260006080830152600060a0830152600060c0830152600060e0830152828601015201610b71565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60019061ffff809116908114610c0f570190565b610c17610bcb565b0190565b908160209103126106c95751610c30816106ab565b90565b51906dffffffffffffffffffffffffffff821682036106c957565b908160609103126106c957610c6281610c33565b916040610c7160208401610c33565b92015163ffffffff811681036106c95790565b670de0b6b3a764000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610cbf570290565b610cc7610bcb565b0290565b8115610cd5570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b519067ffffffffffffffff821682036106c957565b908160609103126106c957604051906060820182811067ffffffffffffffff821117610d86575b60405280516fffffffffffffffffffffffffffffffff811681036106c957610d7e916040918452610d7360208201610d04565b602085015201610d04565b604082015290565b610d8e610a38565b610d40565b8051821015610da75760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208c5498ca686c417baa1abe0796b3bf0512980bf87ac8196f24363286302c9cf164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/multicall/SushiMulticall.sol:SushiMulticall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}